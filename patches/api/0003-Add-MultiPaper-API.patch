From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 9 Dec 2021 18:10:03 +1000
Subject: [PATCH] Add MultiPaper API


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 53c4e5ca208ee17c7c244e416c537c7b63edf194..6c78165d916d4960dd6eda2837f4cd0a0d44267d 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -702,6 +702,18 @@ public final class Bukkit {
         return server.getServicesManager();
     }
 
+    // MultiPaper start
+    /**
+     * Gets a multipaper notification manager.
+     *
+     * @return a multipaper notification manager
+     */
+    @NotNull
+    public static MultiPaperNotificationManager getMultiPaperNotificationManager() {
+        return server.getMultiPaperNotificationManager();
+    }
+    // MultiPaper end
+
     /**
      * Gets a list of all worlds on this server.
      *
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index 5a4884db36d448c885e49c965ae329a0638dd628..d5cb9a2de7532ad95f3d89f55927a0906b8b2da6 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -182,6 +182,26 @@ public interface Chunk extends PersistentDataHolder {
      */
     boolean unload();
 
+    // MultiPaper start
+
+    /**
+     * Returns whether the chunk is running on an external server or not.
+     *
+     * @return True if the chunk is an external chunk, or false if the chunk
+     * is running on this server or if it's unloaded.
+     */
+    public boolean isExternalChunk();
+
+    /**
+     * Returns whether the chunk is running on this server or not.
+     *
+     * @return True if the chunk is a local chunk, or false if the chunk
+     * is running on an external server or if it's unloaded.
+     */
+    public boolean isLocalChunk();
+
+    // MultiPaper end
+
     /**
      * Checks if this chunk can spawn slimes without being a swamp biome.
      *
diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
index 8321441b8f528a05e297f485672f928e76fe017d..15b646c6cbf74ddbb3290bc0a0b95a2483fa9284 100644
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -346,6 +346,30 @@ public class Location implements Cloneable, ConfigurationSerializable {
         return this;
     }
 
+    // MultiPaper start
+
+    /**
+     * Returns whether the chunk is running on an external server or not.
+     *
+     * @return True if the chunk is an external chunk, or false if the chunk
+     * is running on this server or if it's unloaded.
+     */
+    public boolean isChunkExternal() {
+        return this.getWorld().isChunkExternal(locToBlock(x) >> 4, locToBlock(z) >> 4);
+    }
+
+    /**
+     * Returns whether the chunk is running on this server or not.
+     *
+     * @return True if the chunk is a local chunk, or false if the chunk
+     * is running on an external server or if it's unloaded.
+     */
+    public boolean isChunkLocal() {
+        return this.getWorld().isChunkLocal(locToBlock(x) >> 4, locToBlock(z) >> 4);
+    }
+
+    // MultiPaper end
+
     /**
      * Adds the location by another.
      *
diff --git a/src/main/java/org/bukkit/MultiPaperNotificationManager.java b/src/main/java/org/bukkit/MultiPaperNotificationManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..d569e2c95f07e05d9fce019dafc33f9c51c4461a
--- /dev/null
+++ b/src/main/java/org/bukkit/MultiPaperNotificationManager.java
@@ -0,0 +1,91 @@
+package org.bukkit;
+
+import org.bukkit.plugin.Plugin;
+
+import java.nio.charset.StandardCharsets;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+
+public interface MultiPaperNotificationManager {
+
+    /**
+     * Listen to notifications sent by other servers.
+     * 
+     * @param plugin The plugin listening to these notifications
+     * @param channel The notification channel to listen to
+     * @param callback A handler for any data received
+     */
+    void on(Plugin plugin, String channel, Consumer<byte[]> callback);
+
+    /**
+     * Listen to notifications sent by other servers.
+     *
+     * @param plugin The plugin listening to these notifications
+     * @param channel The notification channel to listen to
+     * @param callback A handler for any data received
+     */
+    default void onString(Plugin plugin, String channel, Consumer<String> callback) {
+        on(plugin, channel, bytes -> callback.accept(new String(bytes, StandardCharsets.UTF_8)));
+    }
+
+    /**
+     * Listen to notifications sent by other servers.
+     *
+     * @param plugin The plugin listening to these notifications
+     * @param channel The notification channel to listen to
+     * @param callbackWithReply A handler for any data received, and a method to reply to the server on a specified channel
+     */
+    void on(Plugin plugin, String channel, BiConsumer<byte[], BiConsumer<String, byte[]>> callbackWithReply);
+
+    /**
+     * Listen to notifications sent by other servers.
+     *
+     * @param plugin The plugin listening to these notifications
+     * @param channel The notification channel to listen to
+     * @param callbackWithReply A handler for any data received, and a method to reply to the server on a specified channel
+     */
+    default void onString(Plugin plugin, String channel, BiConsumer<String, BiConsumer<String, String>> callbackWithReply) {
+        on(plugin, channel, (bytes, reply) -> callbackWithReply.accept(
+                new String(bytes, StandardCharsets.UTF_8),
+                (replyChannel, string) -> reply.accept(replyChannel, string.getBytes(StandardCharsets.UTF_8)))
+        );
+    }
+
+    /**
+     * Notify other servers.
+     *
+     * @param channel The notification channel to notify on
+     * @param data The data to notify other servers with
+     */
+    void notify(String channel, byte[] data);
+
+    /**
+     * Notify other servers.
+     *
+     * @param channel The notification channel to notify on
+     * @param data The data to notify other servers with
+     */
+    default void notify(String channel, String data) {
+        notify(channel, data.getBytes(StandardCharsets.UTF_8));
+    }
+
+    /**
+     * Notify other servers with the specified chunk loaded
+     *
+     * @param chunk The chunk that's loaded
+     * @param channel The notification channel to notify on
+     * @param data The data to notify other servers with
+     */
+    void notify(Chunk chunk, String channel, byte[] data);
+
+    /**
+     * Notify other servers with the specified chunk loaded
+     *
+     * @param chunk The chunk that's loaded
+     * @param channel The notification channel to notify on
+     * @param data The data to notify other servers with
+     */
+    default void notify(Chunk chunk, String channel, String data) {
+        notify(chunk, channel, data.getBytes(StandardCharsets.UTF_8));
+    }
+}
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index e48af3822e9f118399c3a1c9358c56efae12e0da..4393017128eb17556b8daa15ca6d6ec1229ad1ff 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -579,6 +579,16 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     @NotNull
     public ServicesManager getServicesManager();
 
+    // MultiPaper start
+    /**
+     * Gets a multipaper notification manager.
+     *
+     * @return a multipaper notification manager
+     */
+    @NotNull
+    public MultiPaperNotificationManager getMultiPaperNotificationManager();
+    // MultiPaper end
+
     /**
      * Gets a list of all worlds on this server.
      *
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 96235d5e77563496bcf3e2152b6aad9956f492c9..d9fcbe8237169d9998f290b748f0528d0c9a6583 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -421,6 +421,26 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
     @Deprecated
     public boolean isChunkInUse(int x, int z);
 
+    // MultiPaper start
+
+    /**
+     * Returns whether the chunk is running on an external server or not.
+     *
+     * @return True if the chunk is an external chunk, or false if the chunk
+     * is running on this server or if it's unloaded.
+     */
+    public boolean isChunkExternal(int x, int z);
+
+    /**
+     * Returns whether the chunk is running on this server or not.
+     *
+     * @return True if the chunk is a local chunk, or false if the chunk
+     * is running on an external server or if it's unloaded.
+     */
+    public boolean isChunkLocal(int x, int z);
+
+    // MultiPaper end
+
     /**
      * Loads the {@link Chunk} at the specified coordinates.
      * <p>
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 5f35ba35f8517ec28c1b21b3007c9a20dea097a7..6599e4f299c3bdb5690d78d3f5f96a8b332b9c47 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -427,6 +427,28 @@ public interface Block extends Metadatable, net.kyori.adventure.translation.Tran
      */
     int getBlockPower();
 
+    // MultiPaper start
+
+    /**
+     * Returns whether the block is in a chunk that's running on an external
+     * server or not.
+     *
+     * @return True if the block is in an external chunk, or false if the chunk
+     * is running on this server or if it's unloaded.
+     */
+    public boolean isInExternalChunk();
+
+    /**
+     * Returns whether the block is in a chunk that's running on this server
+     * or not.
+     *
+     * @return True if the block is in a local chunk, or false if the chunk
+     * is running on an external server or if it's unloaded.
+     */
+    public boolean isInLocalChunk();
+
+    // MultiPaper end
+
     /**
      * Checks if this block is empty.
      * <p>
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 51ec2e4ec4239659272bba3d6ba2ad73926ebb88..c73729a8d76042b6d8539e33c2dcac1651fcf62a 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -209,6 +209,26 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      */
     public int getEntityId();
 
+    // MultiPaper start
+
+    /**
+     * Returns whether the entity is in a chunk that's running on an external
+     * server or not.
+     *
+     * @return True if the entity is in an external chunk.
+     */
+    public boolean isInExternalChunk();
+
+    /**
+     * Returns whether the entity is in a chunk that's running on this server
+     * or not.
+     *
+     * @return True if the entity is in a local chunk.
+     */
+    public boolean isInLocalChunk();
+
+    // MultiPaper end
+
     /**
      * Returns the entity's current fire ticks (ticks before the entity stops
      * being on fire).
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 5e4a9ce5f899624255e806152c59f60664bcf701..033d501bd73ca60f867b2d1b744608050589786c 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -368,6 +368,68 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     public void setBedSpawnLocation(@Nullable Location location, boolean force);
 
+    // MultiPaper start
+
+    /**
+     * Returns whether the player is on an external server or not.
+     *
+     * @return True if the player is on an external server.
+     */
+    public boolean isExternalPlayer();
+
+    /**
+     * Returns whether the player is on this server or not.
+     *
+     * @return True if the player is on this server.
+     */
+    public boolean isLocalPlayer();
+
+    /**
+     * Returns cross-server data that is stored under the specified key. Note
+     * that all plugins share the same set of keys. This data is
+     * non-persistent, it will be lost when the player disconnects.
+     *
+     * @param key The key the data is stored under.
+     * @return The data stored under the key, or null if the key isn't set.
+     */
+    @Nullable
+    public String getData(String key);
+
+    /**
+     * Store cross-server data under the specified key. Note that all plugins
+     * share the same set of keys. This data is non-persistent, it will be
+     * lost when the player disconnects.
+     *
+     * @param key The key to store the data under.
+     * @param value The data to store under the key.
+     */
+    public void setData(String key, String value);
+
+    /**
+     * Returns cross-server data that is stored under the specified key. Note
+     * that all plugins share the same set of keys. This data is persistent,
+     * it will be saved even if the player disconnects. This persistent data is
+     * saved onto the player's .dat file.
+     *
+     * @param key The key the data is stored under.
+     * @return The data stored under the key, or null if the key isn't set.
+     */
+    @Nullable
+    public String getPersistentData(String key);
+
+    /**
+     * Store cross-server data under the specified key. Note that all plugins
+     * share the same set of keys. This data is persistent, it will be saved
+     * even if the player disconnects. This persistent data is saved onto the
+     * player's .dat file.
+     *
+     * @param key The key to store the data under.
+     * @param value The data to store under the key.
+     */
+    public void setPersistentData(String key, String value);
+
+    // MultiPaper end
+
     /**
      * Play a note for a player at a location. This requires a note block
      * at the particular location (as far as the client is concerned). This
