From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 23 May 2022 15:37:49 +1000
Subject: [PATCH] Load entities async


diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
index 18504b91ff4f10e5f06dd2f0cca7fb4d41ff172f..3ea9351d2332e38d5700ca0d70c42362185404a1 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
@@ -9,15 +9,12 @@ import java.io.IOException;
 import java.nio.file.Path;
 import java.util.List;
 import java.util.Objects;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
+import java.util.Set;
+import java.util.concurrent.*;
+
 import net.minecraft.SharedConstants;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.IntArrayTag;
-import net.minecraft.nbt.ListTag;
-import net.minecraft.nbt.NbtUtils;
+import net.minecraft.nbt.*;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.util.thread.ProcessorMailbox;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
@@ -25,6 +22,7 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.entity.ChunkEntities;
 import net.minecraft.world.level.entity.EntityPersistentStorage;
 import org.slf4j.Logger;
+import puregero.multipaper.MultiPaper;
 import puregero.multipaper.MultiPaperEntitiesHandler;
 
 public class EntityStorage implements EntityPersistentStorage<Entity> {
@@ -36,6 +34,7 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
     private final LongSet emptyChunks = new LongOpenHashSet();
     public final ProcessorMailbox<Runnable> entityDeserializerQueue;
     protected final DataFixer fixerUpper;
+    private final Set<CompletableFuture<CompoundTag>> loadingTasksInProgress = ConcurrentHashMap.newKeySet(); // MultiPaper
 
     public EntityStorage(ServerLevel world, Path path, DataFixer dataFixer, boolean dsync, Executor executor) {
         this.level = world;
@@ -44,9 +43,39 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
         this.worker = new IOWorker(path, dsync, "entities");
     }
 
+    // MultiPaper start - async entity loading
+    private CompletableFuture<CompoundTag> loadAsync(ChunkPos pos) {
+        String world = level.getWorld().getName();
+        String path = "entities";
+        int cx = pos.x;
+        int cz = pos.z;
+        CompletableFuture<CompoundTag> future = MultiPaper.readRegionFileAsync(world, path, cx, cz)
+                .orTimeout(20, TimeUnit.SECONDS)
+                .thenApplyAsync(in -> {
+                    try {
+                        return in == null ? null : NbtIo.read(in);
+                    } catch (IOException e) {
+                        throw new RuntimeException(e);
+                    }
+                })
+                .exceptionallyCompose(exception -> {
+                    if (exception instanceof TimeoutException) {
+                        LOGGER.warn("Timed out reading " + world + "," + path + "," + cx + "," + cz + ", retrying...");
+                        return loadAsync(pos);
+                    }
+                    return CompletableFuture.failedFuture(exception);
+                });
+
+        loadingTasksInProgress.add(future);
+        future.whenComplete((tag, throwable) -> loadingTasksInProgress.remove(future));
+
+        return future;
+    }
+    // MultiPaper end
+
     @Override
     public CompletableFuture<ChunkEntities<Entity>> loadEntities(ChunkPos pos) {
-        return this.emptyChunks.contains(pos.toLong()) ? CompletableFuture.completedFuture(emptyChunk(pos)) : this.worker.loadAsync(pos).thenApplyAsync((compound) -> {
+        return this.emptyChunks.contains(pos.toLong()) ? CompletableFuture.completedFuture(emptyChunk(pos)) : loadAsync(pos).thenApplyAsync((compound) -> { // MultiPaper - replace this.worker.loadAsync(pos) with async chunk loading
             if (compound == null) {
                 // this.emptyChunks.add(pos.toLong()); // MultiPaper - don't cache empty chunks
                 return emptyChunk(pos);
@@ -125,6 +154,13 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
 
     @Override
     public void flush(boolean sync) {
+        // MultiPaper start - wait for async loading tasks
+        while (!loadingTasksInProgress.isEmpty()) {
+            for (CompletableFuture<CompoundTag> future : loadingTasksInProgress) {
+                level.chunkSource.mainThreadProcessor.managedBlock(future::isDone);
+            }
+        }
+        // MultiPaper end
         // MultiPaper start - Run tasks while we wait for the entity storage worker to close
         CompletableFuture<Void> completableFuture = this.worker.synchronize(sync);
         if (!completableFuture.isDone()) {
