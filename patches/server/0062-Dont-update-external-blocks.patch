From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 3 Dec 2021 22:28:35 +1000
Subject: [PATCH] Dont update external blocks


diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index c53190203f18e9ae40466454e1a3b76e7b8511d3..7bc773cd8a3e597e381a91943b8c9923e37f5a90 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -99,6 +99,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.world.GenericGameEvent;
+import puregero.multipaper.MultiPaper;
 import puregero.multipaper.MultiPaperChunkHandler;
 // CraftBukkit end
 
@@ -814,6 +815,14 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             return false;
         } else {
             FluidState fluid = this.getFluidState(pos);
+
+            // MultiPaper start - only animate destroyed blocks on our chunks
+            ChunkAccess chunk = getChunkIfLoaded(pos);
+            if (MultiPaper.isChunkExternal(chunk)) {
+                return this.setBlock(pos, fluid.createLegacyBlock(), 3, maxUpdateDepth);
+            }
+            // MultiPaper end
+
             // Paper start - while the above setAir method is named same and looks very similar
             // they are NOT used with same intent and the above should not fire this event. The above method is more of a BlockSetToAirEvent,
             // it doesn't imply destruction of a block that plays a sound effect / drops an item.
@@ -898,6 +907,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         if (!this.isClientSide) {
             BlockState iblockdata = this.getBlockState(pos);
 
+            if (!iblockdata.is(Blocks.REDSTONE_WIRE) && MultiPaper.isChunkExternal(getChunkIfLoaded(pos))) return; // MultiPaper - don't update blocks not owned by us (except for redstone)
+
             try {
                 // CraftBukkit start
                 CraftWorld world = ((ServerLevel) this).getWorld();
@@ -1057,7 +1068,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
                 toRemove.add(tickingblockentity); // Paper - use removeAll
                 // Spigot end
             } else if (this.shouldTickBlocksAt(ChunkPos.asLong(tickingblockentity.getPos()))) {
-                if (!MultiPaperChunkHandler.shouldTick(this, tickingblockentity.getPos())) continue; // MultiPaper - should tick
+                if (!MultiPaperChunkHandler.shouldTick(this, tickingblockentity.getPos()) && !tickingblockentity.getType().equals("minecraft:piston")) continue; // MultiPaper - should tick
                 tickingblockentity.tick();
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index ab5b9f00123e2ede2931ffc520684e482aac49b4..e1b0b93a640609fcce326e3cad500c8156c73350 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -62,6 +62,7 @@ import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import puregero.multipaper.MultiPaper;
 
 public class Block extends BlockBehaviour implements ItemLike {
 
@@ -189,6 +190,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
 
     public static void updateOrDestroy(BlockState state, BlockState newState, LevelAccessor world, BlockPos pos, int flags, int maxUpdateDepth) {
+        if (MultiPaper.isChunkExternal(world.getChunkIfLoadedImmediately(pos.getX(), pos.getZ()))) return; // MultiPaper - don't update blocks on external servers
         if (newState != state) {
             if (newState.isAir()) {
                 if (!world.isClientSide()) {
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index 28256f1f0aeb7718a5866add4ec40ce0198c36b9..0e3f1340006c1df7db01533e0f6fcb84015eb21c 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -228,6 +228,7 @@ public class PistonBaseBlock extends DirectionalBlock {
             world.playSound((Player) null, pos, SoundEvents.PISTON_EXTEND, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.25F + 0.6F);
             world.gameEvent(GameEvent.PISTON_EXTEND, pos);
         } else if (type == 1 || type == 2) {
+
             BlockEntity tileentity = world.getBlockEntity(pos.relative(enumdirection));
 
             if (tileentity instanceof PistonMovingBlockEntity) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 555f5f4a61606235a79f1fa8289e9c34aceb14f3..fbb3090c47839a1b7020bb66a0e121fbafa24d6f 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -563,6 +563,7 @@ public class LevelChunk extends ChunkAccess {
                 boolean flag3 = iblockdata1.hasBlockEntity();
 
                 if (!this.level.isClientSide) {
+                    if (!MultiPaper.isChunkExternal(this)) // MultiPaper - only call the onremove for our blocks
                     iblockdata1.onRemove(this.level, blockposition, iblockdata, flag);
                 } else if (!iblockdata1.is(block) && flag3) {
                     this.removeBlockEntity(blockposition);
