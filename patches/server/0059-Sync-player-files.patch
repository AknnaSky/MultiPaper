From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 25 Nov 2021 17:43:58 +1000
Subject: [PATCH] Sync player files


diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index f7959fe8d5247504dd79a18010470d98781c7cfe..48fd1536f1af48b0238d2ceaeca10acbf83e64a8 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -51,6 +51,7 @@ import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.GameRules;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import puregero.multipaper.MultiPaper;
 
 public class PlayerAdvancements {
 
@@ -156,9 +157,12 @@ public class PlayerAdvancements {
     }
 
     private void load(ServerAdvancementManager advancementLoader) {
-        if (this.file.isFile()) {
+        // MultiPaper start
+        String json = MultiPaper.readAdvancements(player.server.storageSource.levelPath.getFileName().toString(), player.getStringUUID());
+        if ((json != null && !json.isEmpty()) || this.file.isFile()) {
+        // MultiPaper end
             try {
-                JsonReader jsonreader = new JsonReader(new StringReader(Files.toString(this.file, StandardCharsets.UTF_8)));
+                JsonReader jsonreader = new JsonReader(new StringReader(json)); // MultiPaper
 
                 try {
                     jsonreader.setLenient(false);
@@ -239,6 +243,13 @@ public class PlayerAdvancements {
         jsonelement.getAsJsonObject().addProperty("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
 
         try {
+            // MultiPaper start
+            if (true) {
+                MultiPaper.writeAdvancements(player.server.storageSource.levelPath.getFileName().toString(), player.getStringUUID(), PlayerAdvancements.GSON.toJson(jsonelement));
+                return;
+            }
+            // MultiPaper end
+
             FileOutputStream fileoutputstream = new FileOutputStream(this.file);
 
             try {
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 632b77eefca34be3518888f58625dba9850c8e2d..128bdd27a05310aa95e40cfea4ed6fbebfba54eb 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -591,6 +591,7 @@ public abstract class PlayerList {
         if (!player.getBukkitEntity().isPersistent()) return; // CraftBukkit
         if (!player.didPlayerJoinEvent) return; // Paper - If we never fired PJE, we disconnected during login. Data has not changed, and additionally, our saved vehicle is not loaded! If we save now, we will lose our vehicle (CraftBukkit bug)
         player.lastSave = MinecraftServer.currentTick; // Paper
+        if (MultiPaper.isExternalPlayer(player)) return; // MultiPaper
         this.playerIo.save(player);
         ServerStatsCounter serverstatisticmanager = (ServerStatsCounter) player.getStats(); // CraftBukkit
 
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index ee5bb1a8edb812d48d5af45ea8485f574dcb2ad5..fa627ea97b2b5b1046fe3a476e10e0e96e097cba 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -36,6 +36,7 @@ import net.minecraft.world.entity.player.Player;
 import org.apache.commons.io.FileUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import puregero.multipaper.MultiPaper;
 
 public class ServerStatsCounter extends StatsCounter {
 
@@ -53,6 +54,21 @@ public class ServerStatsCounter extends StatsCounter {
             Stat<ResourceLocation> wrapper = Stats.CUSTOM.get( entry.getKey() );
             this.stats.put( wrapper, entry.getValue().intValue() );
         }
+        // MultiPaper start
+        if (true) {
+            try {
+                String json = MultiPaper.readStats(server.storageSource.levelPath.getFileName().toString(), this.file.getName().split("\\.")[0]);
+                if (!json.isEmpty()) {
+                    this.parseLocal(server.getFixerUpper(), json);
+                }
+            //} catch (IOException ioexception) {
+            //    ServerStatsCounter.LOGGER.error("Couldn't read statistics file {}", file, ioexception);
+            } catch (JsonParseException jsonparseexception) {
+                ServerStatsCounter.LOGGER.error("Couldn't parse statistics file {}", file, jsonparseexception);
+            }
+            return;
+        }
+        // MultiPaper end
         // Spigot end
         if (file.isFile()) {
             try {
@@ -69,6 +85,12 @@ public class ServerStatsCounter extends StatsCounter {
     public void save() {
         if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
         try {
+            // MultiPaper start
+            if (true) {
+                MultiPaper.writeStats(server.storageSource.levelPath.getFileName().toString(), this.file.getName().split("\\.")[0], this.toJson());
+                return;
+            }
+            // MultiPaper end
             FileUtils.writeStringToFile(this.file, this.toJson());
         } catch (IOException ioexception) {
             ServerStatsCounter.LOGGER.error("Couldn't save stats", ioexception);
diff --git a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
index 35c39aed9583275ef25d32c783715798b52bdb63..641581f2c84100b84bed7254801b41f207dcf909 100644
--- a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -17,15 +17,18 @@ import org.apache.logging.log4j.Logger;
 import java.io.FileInputStream;
 import java.io.InputStream;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public class PlayerDataStorage {
 
     private static final Logger LOGGER = LogManager.getLogger();
     private final File playerDir;
+    private final LevelStorageSource.LevelStorageAccess session; // MultiPaper
     protected final DataFixer fixerUpper;
 
     public PlayerDataStorage(LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer) {
+        this.session = session; // MultiPaper
         this.fixerUpper = dataFixer;
         this.playerDir = session.getLevelPath(LevelResource.PLAYER_DATA_DIR).toFile();
         this.playerDir.mkdirs();
@@ -35,6 +38,14 @@ public class PlayerDataStorage {
         if (org.spigotmc.SpigotConfig.disablePlayerDataSaving) return; // Spigot
         try {
             CompoundTag nbttagcompound = player.saveWithoutId(new CompoundTag());
+
+            // MultiPaper start
+            if (true) {
+                MultiPaper.writePlayer(session.levelPath.getFileName().toString(), player.getStringUUID(), nbttagcompound);
+                return;
+            }
+            // MultiPaper end
+        
             File file = File.createTempFile(player.getStringUUID() + "-", ".dat", this.playerDir);
 
             NbtIo.writeCompressed(nbttagcompound, file);
@@ -53,6 +64,9 @@ public class PlayerDataStorage {
         CompoundTag nbttagcompound = null;
 
         try {
+            nbttagcompound = MultiPaper.readPlayer(session.levelPath.getFileName().toString(), player.getStringUUID()); // MultiPaper
+
+            if (false) { // MultiPaper
             File file = new File(this.playerDir, player.getStringUUID() + ".dat");
             // Spigot Start
             boolean usingWrongFile = false;
@@ -76,11 +90,13 @@ public class PlayerDataStorage {
                 file.renameTo( new File( file.getPath() + ".offline-read" ) );
             }
             // Spigot End
+            } // MultiPaper
         } catch (Exception exception) {
             PlayerDataStorage.LOGGER.warn("Failed to load player data for {}", player.getName().getString());
         }
 
         if (nbttagcompound != null) {
+            /* // MultiPaper
             // CraftBukkit start
             if (player instanceof ServerPlayer) {
                 CraftPlayer player1 = (CraftPlayer) player.getBukkitEntity();
@@ -91,6 +107,7 @@ public class PlayerDataStorage {
                 }
             }
             // CraftBukkit end
+            */ // MultiPaper
             int i = nbttagcompound.contains("DataVersion", 3) ? nbttagcompound.getInt("DataVersion") : -1;
 
             player.load(ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertTag(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.PLAYER, nbttagcompound, i, net.minecraft.SharedConstants.getCurrentVersion().getWorldVersion())); // Paper - replace player converter
@@ -102,6 +119,8 @@ public class PlayerDataStorage {
     // CraftBukkit start
     public CompoundTag getPlayerData(String s) {
         try {
+            if (true) return MultiPaper.readPlayer(session.levelPath.getFileName().toString(), s); // MultiPaper
+
             File file1 = new File(this.playerDir, s + ".dat");
 
             if (file1.exists()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index d309d9f0b54e2a966ccfbb780359bb8e68d15ee3..f49628392792af16014e378c12148b144716dae9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -144,6 +144,7 @@ import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.NotNull;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import puregero.multipaper.MultiPaper;
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
@@ -1094,6 +1095,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void saveData() {
+        if (MultiPaper.isExternalPlayer(this.getHandle())) return; // MultiPaper
         server.getHandle().playerIo.save(this.getHandle());
     }
 
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 5927825b48580fbfe184f7faff6a00039cf03d1b..1c547164600c373ca6f2e97ec9bf319a069c0c23 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -364,6 +364,34 @@ public class MultiPaper {
         }
     }
 
+    public static CompoundTag readPlayer(String world, String uuid) throws IOException {
+        byte[] data = getConnection().sendAndAwaitReply(new ReadPlayerMessage(world, uuid), DataMessageReply.class).thenApply(message -> message.data).join();
+
+        return data.length == 0 ? null : NbtIo.readCompressed(new ByteArrayInputStream(data));
+    }
+
+    public static void writePlayer(String world, String uuid, CompoundTag compoundTag) throws IOException {
+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
+        NbtIo.writeCompressed(compoundTag, buffer);
+        getConnection().send(new WritePlayerMessage(world, uuid, buffer.toByteArray()), message -> { /* do nothing */ });
+    }
+
+    public static String readAdvancements(String world, String uuid) {
+        return getConnection().sendAndAwaitReply(new ReadAdvancementMessage(world, uuid), DataMessageReply.class).thenApply(message -> new String(message.data, StandardCharsets.UTF_8)).join();
+    }
+
+    public static void writeAdvancements(String world, String uuid, String json) {
+        getConnection().send(new WriteAdvancementsMessage(world, uuid, json.getBytes(StandardCharsets.UTF_8)), message -> { /* do nothing */ });
+    }
+
+    public static String readStats(String world, String uuid) {
+        return getConnection().sendAndAwaitReply(new ReadStatsMessage(world, uuid), DataMessageReply.class).thenApply(message -> new String(message.data, StandardCharsets.UTF_8)).join();
+    }
+
+    public static void writeStats(String world, String uuid, String json) {
+        getConnection().send(new WriteStatsMessage(world, uuid, json.getBytes(StandardCharsets.UTF_8)), message -> { /* do nothing */ });
+    }
+
     private static String getWorld(File path) {
         do {
             path = path.getParentFile();
