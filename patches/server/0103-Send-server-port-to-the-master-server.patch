From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Wed, 5 Jan 2022 16:43:52 +1000
Subject: [PATCH] Send server port to the master server


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index a187e36aca089ec6b024b19760c935f7c9fa6cd4..835003a72c506bf3bf97dbf051cb5e8ceefc6bdc 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -270,6 +270,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             this.setPort(dedicatedserverproperties.serverPort);
         }
         bindAddress = new java.net.InetSocketAddress(inetaddress, this.getPort());
+        MultiPaper.setPort(this.getPort()); // MultiPaper
         }
         // Paper end
 
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 2a266e939dc63614ce2952e149df31e3c3b5d02b..327c6dd91a7cc4083cca0f36be1dd9c5948a2911 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -93,6 +93,14 @@ public class MultiPaper {
         return syncJsonFiles;
     }
 
+    private static Boolean advertiseToBuiltInProxy = null;
+    public static boolean shouldAdvertiseToBuiltInProxy() {
+        if (advertiseToBuiltInProxy == null) {
+            loadConfig();
+        }
+        return advertiseToBuiltInProxy;
+    }
+
     private static void loadConfig() {
         YamlConfiguration config = new YamlConfiguration();
         File file = new File("multipaper.yml");
@@ -127,6 +135,13 @@ public class MultiPaper {
 
         syncJsonFiles = config.getBoolean("syncJsonFiles");
 
+        if (!config.contains("advertiseToBuiltInProxy")) {
+            save = true;
+            config.set("advertiseToBuiltInProxy", true);
+        }
+
+        advertiseToBuiltInProxy = config.getBoolean("advertiseToBuiltInProxy");
+
         try {
             if (save) {
                 config.save(file);
@@ -580,4 +595,8 @@ public class MultiPaper {
     public static void broadcastPlayerAction(ServerPlayer player, ServerboundSetCarriedItemPacket packet) {
         broadcastPacketToExternalServers(new PlayerActionPacket(player, packet));
     }
+
+    public static void setPort(int port) {
+        getConnection().sendPort(port);
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index 6c7d49b4b8c51b166e045a01ad606f7329207cf6..334d17394c0328bde65c02a440230f99f20b47a3 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -48,6 +48,7 @@ public class MultiPaperConnection extends Thread {
     private final Map<String, ExternalServer> serversMap = new ConcurrentHashMap<>();
     private String myName = null;
     public String secret;
+    private int port = -1;
 
     public MultiPaperConnection() {
         super("MultiPaperConnection Thread");
@@ -125,6 +126,10 @@ public class MultiPaperConnection extends Thread {
                     }
                 }
 
+                if (port >= 0) {
+                    sendPort(port);
+                }
+
                 DataInputStream in = new DataInputStream(new BufferedInputStream(socket.getInputStream()));
                 while (!socket.isClosed()) {
                     int id = in.readInt();
@@ -877,4 +882,20 @@ public class MultiPaperConnection extends Thread {
             e.printStackTrace();
         }
     }
+
+    public void sendPort(int port) {
+        if (!MultiPaper.shouldAdvertiseToBuiltInProxy()) {
+            return;
+        }
+
+        this.port = port;
+        try {
+            DataOutputSender out = new DataOutputSender(this);
+            out.writeUTF("setPort");
+            out.writeInt(port);
+            out.send(null);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
 }
