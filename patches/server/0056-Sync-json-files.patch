From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 25 Nov 2021 15:25:30 +1000
Subject: [PATCH] Sync json files


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
index 21613cd49ebcccfd3837991dba1df0a188c42760..613c27c73e1dcfa7b71820d18e0ec974fefe0af1 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
@@ -22,16 +22,18 @@ public class DedicatedPlayerList extends PlayerList {
     @Override
     public void loadAndSaveFiles() {
         // Paper end
+        // MultiPaper start - why are we saving these if we haven't modified them?
         this.loadUserBanList();
-        this.saveUserBanList();
+        // this.saveUserBanList();
         this.loadIpBanList();
-        this.saveIpBanList();
+        // this.saveIpBanList();
         this.loadOps();
         this.loadWhiteList();
-        this.saveOps();
-        if (!this.getWhiteList().getFile().exists()) {
-            this.saveWhiteList();
-        }
+        // this.saveOps();
+        // if (!this.getWhiteList().getFile().exists()) {
+        //    this.saveWhiteList();
+        // }
+        // MultiPaper end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/players/IpBanList.java b/src/main/java/net/minecraft/server/players/IpBanList.java
index 8382b5de75803e2d5443662cedc975e548c36fbc..4f135486a826ce12b0651b9c79b6fba2683e9055 100644
--- a/src/main/java/net/minecraft/server/players/IpBanList.java
+++ b/src/main/java/net/minecraft/server/players/IpBanList.java
@@ -1,6 +1,9 @@
 package net.minecraft.server.players;
 
 import com.google.gson.JsonObject;
+import puregero.multipaper.externalserverprotocol.BanIpPacket;
+import puregero.multipaper.externalserverprotocol.PardonIpPacket;
+
 import java.io.File;
 import java.net.SocketAddress;
 import javax.annotation.Nullable;
@@ -42,4 +45,18 @@ public class IpBanList extends StoredUserList<String, IpBanListEntry> {
 
         return string;
     }
+
+    // MultiPaper start
+    @Override
+    public void add(IpBanListEntry entry) {
+        super.add(entry);
+        BanIpPacket.broadcast(entry.getUser(), entry.created, entry.expires, entry.reason, entry.source);
+    }
+
+    @Override
+    public void remove(String key) {
+        super.remove(key);
+        PardonIpPacket.broadcast(key);
+    }
+    // MultiPaper end
 }
diff --git a/src/main/java/net/minecraft/server/players/ServerOpList.java b/src/main/java/net/minecraft/server/players/ServerOpList.java
index e80323a54dcd3b065ec73f0abe5bb196d7de93a0..0a17bf23ce4df8d04964940ce30cb7b1bbb0a254 100644
--- a/src/main/java/net/minecraft/server/players/ServerOpList.java
+++ b/src/main/java/net/minecraft/server/players/ServerOpList.java
@@ -2,6 +2,9 @@ package net.minecraft.server.players;
 
 import com.google.gson.JsonObject;
 import com.mojang.authlib.GameProfile;
+import puregero.multipaper.externalserverprotocol.DeopPlayerPacket;
+import puregero.multipaper.externalserverprotocol.OpPlayerPacket;
+
 import java.io.File;
 import java.util.Objects;
 
@@ -31,4 +34,18 @@ public class ServerOpList extends StoredUserList<GameProfile, ServerOpListEntry>
     protected String getKeyForUser(GameProfile gameProfile) {
         return gameProfile.getId().toString();
     }
+
+    // MultiPaper start
+    @Override
+    public void add(ServerOpListEntry entry) {
+        super.add(entry);
+        OpPlayerPacket.broadcast(entry.getUser().getName(), entry.getUser().getId(), entry.getLevel(), entry.getBypassesPlayerLimit());
+    }
+
+    @Override
+    public void remove(GameProfile key) {
+        super.remove(key);
+        DeopPlayerPacket.broadcast(key.getName(), key.getId());
+    }
+    // MultiPaper end
 }
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 8982562721c3a5a5a3305e90bd8b5bc21585a425..14aca3fcdcc8b35eb483afbe996a81133b3ae5ee 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -26,6 +26,7 @@ import net.minecraft.Util;
 import net.minecraft.util.GsonHelper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import puregero.multipaper.MultiPaper;
 
 public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
 
@@ -159,10 +160,10 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
 
         Objects.requireNonNull(jsonarray);
         stream.forEach(jsonarray::add);
-        BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
+        BufferedWriter bufferedwriter = null; // Files.newWriter(this.file, StandardCharsets.UTF_8); // MultiPaper - don't touch files
 
         try {
-            StoredUserList.GSON.toJson(jsonarray, bufferedwriter);
+            MultiPaper.writeJson(this.file.getName(), StoredUserList.GSON.toJson(jsonarray)); // StoredUserList.GSON.toJson(jsonarray, bufferedwriter); // MultiPaper
         } catch (Throwable throwable) {
             if (bufferedwriter != null) {
                 try {
@@ -182,11 +183,18 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
     }
 
     public void load() throws IOException {
-        if (this.file.exists()) {
-            BufferedReader bufferedreader = Files.newReader(this.file, StandardCharsets.UTF_8);
+        if (true || this.file.exists()) { // MultiPaper
+            BufferedReader bufferedreader = null; // Files.newReader(this.file, StandardCharsets.UTF_8); // MultiPaper
+            
+            // MultiPaper start
+            String json = MultiPaper.readJson(this.file.getName());
+            if (json == null || json.isEmpty()) {
+                return;
+            }
+            // MultiPaper end
 
             try {
-                JsonArray jsonarray = (JsonArray) StoredUserList.GSON.fromJson(bufferedreader, JsonArray.class);
+                JsonArray jsonarray = (JsonArray) StoredUserList.GSON.fromJson(json, JsonArray.class); // MultiPaper
                 com.google.common.base.Preconditions.checkState(jsonarray != null, "The file \"" + this.file.getName() + "\" is either empty or corrupt"); // Paper
 
                 this.map.clear();
diff --git a/src/main/java/net/minecraft/server/players/UserBanList.java b/src/main/java/net/minecraft/server/players/UserBanList.java
index 524c5f227a73ea987e760311c761561e13e7d8ee..2c81d4caba4ae2e258964d8f1d49f912d6d2c223 100644
--- a/src/main/java/net/minecraft/server/players/UserBanList.java
+++ b/src/main/java/net/minecraft/server/players/UserBanList.java
@@ -2,6 +2,9 @@ package net.minecraft.server.players;
 
 import com.google.gson.JsonObject;
 import com.mojang.authlib.GameProfile;
+import puregero.multipaper.externalserverprotocol.BanPlayerPacket;
+import puregero.multipaper.externalserverprotocol.PardonPlayerPacket;
+
 import java.io.File;
 import java.util.Objects;
 
@@ -30,4 +33,18 @@ public class UserBanList extends StoredUserList<GameProfile, UserBanListEntry> {
     protected String getKeyForUser(GameProfile gameProfile) {
         return gameProfile.getId().toString();
     }
+
+    // MultiPaper start
+    @Override
+    public void add(UserBanListEntry entry) {
+        super.add(entry);
+        BanPlayerPacket.broadcast(entry.getUser().getName(), entry.getUser().getId(), entry.created, entry.expires, entry.reason, entry.source);
+    }
+
+    @Override
+    public void remove(GameProfile key) {
+        super.remove(key);
+        PardonPlayerPacket.broadcast(key.getName(), key.getId());
+    }
+    // MultiPaper end
 }
diff --git a/src/main/java/net/minecraft/server/players/UserWhiteList.java b/src/main/java/net/minecraft/server/players/UserWhiteList.java
index a6c70decad1a496595944a5dd2aeeb387757fef3..9b41635c5cfaef8305ab11936bae5e15304ea1be 100644
--- a/src/main/java/net/minecraft/server/players/UserWhiteList.java
+++ b/src/main/java/net/minecraft/server/players/UserWhiteList.java
@@ -2,6 +2,9 @@ package net.minecraft.server.players;
 
 import com.google.gson.JsonObject;
 import com.mojang.authlib.GameProfile;
+import puregero.multipaper.externalserverprotocol.RemoveWhiteListedPlayerPacket;
+import puregero.multipaper.externalserverprotocol.WhiteListPlayerPacket;
+
 import java.io.File;
 import java.util.Objects;
 
@@ -30,4 +33,18 @@ public class UserWhiteList extends StoredUserList<GameProfile, UserWhiteListEntr
     protected String getKeyForUser(GameProfile gameProfile) {
         return gameProfile.getId().toString();
     }
+
+    // MultiPaper start
+    @Override
+    public void add(UserWhiteListEntry entry) {
+        super.add(entry);
+        WhiteListPlayerPacket.broadcast(entry.getUser().getName(), entry.getUser().getId());
+    }
+
+    @Override
+    public void remove(GameProfile key) {
+        super.remove(key);
+        RemoveWhiteListedPlayerPacket.broadcast(key.getName(), key.getId());
+    }
+    // MultiPaper end
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 6e4da520bfc41b67e1cb50f44e464f298e102fcc..8d039d2374f46a4d5fb92c1638eb1e7bf3be7746 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -33,6 +33,7 @@ import puregero.multipaper.externalserverprotocol.*;
 import java.io.*;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -81,6 +82,14 @@ public class MultiPaper {
         return multipaperMasterAddress;
     }
 
+    private static Boolean syncJsonFiles = null;
+    public static boolean getSyncJsonFiles() {
+        if (syncJsonFiles == null) {
+            loadConfig();
+        }
+        return syncJsonFiles;
+    }
+
     private static void loadConfig() {
         YamlConfiguration config = new YamlConfiguration();
         File file = new File("multipaper.yml");
@@ -108,6 +117,13 @@ public class MultiPaper {
 
         multipaperMasterAddress = config.getString("multipaperMasterAddress");
 
+        if (!config.contains("syncJsonFiles")) {
+            save = true;
+            config.set("syncJsonFiles", true);
+        }
+
+        syncJsonFiles = config.getBoolean("syncJsonFiles");
+
         try {
             if (save) {
                 config.save(file);
@@ -353,6 +369,24 @@ public class MultiPaper {
         getConnection().writeLevel(world, buffer.toByteArray());
     }
 
+    public static String readJson(String name) throws IOException {
+        if (getSyncJsonFiles()) {
+            return getConnection().readJson(name).join();
+        } else if (new File(name).isFile()) {
+            return Files.readString(new File(name).toPath());
+        } else {
+            return null;
+        }
+    }
+
+    public static void writeJson(String name, String json) throws IOException {
+        if (getSyncJsonFiles()) {
+            getConnection().writeJson(name, json);
+        } else {
+            Files.writeString(new File(name).toPath(), json);
+        }
+    }
+
     private static String getWorld(File path) {
         do {
             path = path.getParentFile();
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index 4e9a2d726da557238a5bcffa00c6c6a0328c7b94..b735f64905e38e54e4ce17657461d19cfe7f3a66 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -8,6 +8,7 @@ import io.netty.channel.socket.nio.NioSocketChannel;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.network.ServerConnectionListener;
@@ -18,6 +19,8 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.World;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
 import puregero.multipaper.externalserverprotocol.RequestChunkPacket;
 import puregero.multipaper.externalserverprotocol.SendTickListPacket;
 
@@ -25,7 +28,9 @@ import javax.annotation.Nullable;
 import java.io.*;
 import java.net.Socket;
 import java.net.SocketException;
+import java.nio.charset.StandardCharsets;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
@@ -160,6 +165,46 @@ public class MultiPaperConnection extends Thread {
         secret = in.readUTF();
     }
 
+    public void loadJson(DataInputStream in, DataOutputSender out) throws IOException {
+        String file = in.readUTF();
+        LOGGER.info("Reloading json " + file);
+        CompletableFuture.runAsync(() -> {
+            try {
+                if (DedicatedServer.getServer() == null) {
+                    return;
+                }
+
+                switch (file) {
+                    case "banned-players.json":
+                        DedicatedServer.getServer().getPlayerList().getBans().load();
+                        break;
+                    case "banned-ips.json":
+                        DedicatedServer.getServer().getPlayerList().getIpBans().load();
+                        break;
+                    case "ops.json":
+                        List<? extends Player> ops = Bukkit.getOnlinePlayers().stream().filter(Player::isOp).toList();
+                        DedicatedServer.getServer().getPlayerList().getOps().load();
+                        MultiPaper.runSync(() -> {
+                            for (Player player : Bukkit.getOnlinePlayers()) {
+                                if ((!player.isOp() && ops.contains(player)) || (player.isOp() && !ops.contains(player))) {
+                                    DedicatedServer.getServer().getPlayerList().sendPlayerPermissionLevel(((CraftPlayer) player).getHandle());
+                                    player.recalculatePermissions();
+                                }
+                            }
+                        });
+                        break;
+                    case "whitelist.json":
+                        DedicatedServer.getServer().getPlayerList().getWhiteList().load();
+                        break;
+                    default:
+                        throw new IllegalArgumentException("Invalid json file to load " + file);
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        });
+    }
+
     public void chunkOwner(DataInputStream in, DataOutputSender out) throws IOException {
         String world = in.readUTF();
         int cx = in.readInt();
@@ -485,6 +530,36 @@ public class MultiPaperConnection extends Thread {
         out.send(in -> { /* Do nothing */ });
     }
 
+    public CompletableFuture<String> readJson(String name) throws IOException {
+        CompletableFuture<String> future = new CompletableFuture<>();
+
+        DataOutputSender out = new DataOutputSender(this);
+        out.writeUTF("readJson");
+        out.writeUTF(name);
+        out.send(in -> {
+            try {
+                byte[] data = new byte[in.readInt()];
+                in.readFully(data);
+
+                future.complete(new String(data, StandardCharsets.UTF_8));
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        });
+
+        return future;
+    }
+
+    public void writeJson(String name, String json) throws IOException {
+        byte[] data = json.getBytes(StandardCharsets.UTF_8);
+        DataOutputSender out = new DataOutputSender(this);
+        out.writeUTF("writeJson");
+        out.writeUTF(name);
+        out.writeInt(data.length);
+        out.write(data);
+        out.send(in -> { /* Do nothing */ });
+    }
+
     public void lockChunk(String world, int cx, int cz) throws IOException {
         DataOutputSender out = new DataOutputSender(this);
         out.writeUTF("lockChunk");
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/BanIpPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/BanIpPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..6b0ee4823ea4573254f66f96f843221ad82e56d3
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/BanIpPacket.java
@@ -0,0 +1,78 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.players.IpBanListEntry;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.Date;
+
+public class BanIpPacket extends ExternalServerPacket {
+
+    private static boolean handlingPacket = false;
+    private final String ip;
+    private final Date created;
+    private final Date expires;
+    private final String reason;
+    private final String source;
+
+    public BanIpPacket(String ip, Date created, Date expires, String reason, String source) {
+        this.ip = ip;
+        this.created = created;
+        this.expires = expires;
+        this.reason = reason;
+        this.source = source;
+    }
+
+    public static void broadcast(String ip, Date created, Date expires, String reason, String source) {
+        if (!handlingPacket && MultiPaper.getSyncJsonFiles()) {
+            MultiPaper.broadcastPacketToExternalServers(new BanIpPacket(ip, created, expires, reason, source));
+        }
+    }
+
+    public BanIpPacket(FriendlyByteBuf in) {
+        ip = in.readBoolean() ? in.readUtf() : null;
+        created = in.readBoolean() ? in.readDate() : null;
+        expires = in.readBoolean() ? in.readDate() : null;
+        reason = in.readBoolean() ? in.readUtf() : null;
+        source = in.readBoolean() ? in.readUtf() : null;
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeBoolean(ip != null);
+        if (ip != null) {
+            out.writeUtf(ip);
+        }
+
+        out.writeBoolean(created != null);
+        if (created != null) {
+            out.writeDate(created);
+        }
+
+        out.writeBoolean(expires != null);
+        if (expires != null) {
+            out.writeDate(expires);
+        }
+
+        out.writeBoolean(reason != null);
+        if (reason != null) {
+            out.writeUtf(reason);
+        }
+
+        out.writeBoolean(source != null);
+        if (source != null) {
+            out.writeUtf(source);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            handlingPacket = true;
+            MinecraftServer.getServer().getPlayerList().getIpBans().add(new IpBanListEntry(ip, created, source, expires, reason));
+            handlingPacket = false;
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/BanPlayerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/BanPlayerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..9fbc112b2288393fece410d841ea6962ca60ef4b
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/BanPlayerPacket.java
@@ -0,0 +1,88 @@
+package puregero.multipaper.externalserverprotocol;
+
+import com.mojang.authlib.GameProfile;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.players.UserBanListEntry;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.Date;
+import java.util.UUID;
+
+public class BanPlayerPacket extends ExternalServerPacket {
+
+    private static boolean handlingPacket = false;
+    private final String name;
+    private final UUID uuid;
+    private final Date created;
+    private final Date expires;
+    private final String reason;
+    private final String source;
+
+    public BanPlayerPacket(String name, UUID uuid, Date created, Date expires, String reason, String source) {
+        this.name = name;
+        this.uuid = uuid;
+        this.created = created;
+        this.expires = expires;
+        this.reason = reason;
+        this.source = source;
+    }
+
+    public static void broadcast(String name, UUID uuid, Date created, Date expires, String reason, String source) {
+        if (!handlingPacket && MultiPaper.getSyncJsonFiles()) {
+            MultiPaper.broadcastPacketToExternalServers(new BanPlayerPacket(name, uuid, created, expires, reason, source));
+        }
+    }
+
+    public BanPlayerPacket(FriendlyByteBuf in) {
+        name = in.readBoolean() ? in.readUtf() : null;
+        uuid = in.readBoolean() ? in.readUUID() : null;
+        created = in.readBoolean() ? in.readDate() : null;
+        expires = in.readBoolean() ? in.readDate() : null;
+        reason = in.readBoolean() ? in.readUtf() : null;
+        source = in.readBoolean() ? in.readUtf() : null;
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeBoolean(name != null);
+        if (name != null) {
+            out.writeUtf(name);
+        }
+
+        out.writeBoolean(uuid != null);
+        if (uuid != null) {
+            out.writeUUID(uuid);
+        }
+
+        out.writeBoolean(created != null);
+        if (created != null) {
+            out.writeDate(created);
+        }
+
+        out.writeBoolean(expires != null);
+        if (expires != null) {
+            out.writeDate(expires);
+        }
+
+        out.writeBoolean(reason != null);
+        if (reason != null) {
+            out.writeUtf(reason);
+        }
+
+        out.writeBoolean(source != null);
+        if (source != null) {
+            out.writeUtf(source);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            handlingPacket = true;
+            MinecraftServer.getServer().getPlayerList().getBans().add(new UserBanListEntry(new GameProfile(uuid, name), created, source, expires, reason));
+            handlingPacket = false;
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/DeopPlayerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/DeopPlayerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..1558ea8e8652dd8250b5e050e872df64d8be69de
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/DeopPlayerPacket.java
@@ -0,0 +1,61 @@
+package puregero.multipaper.externalserverprotocol;
+
+import com.mojang.authlib.GameProfile;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class DeopPlayerPacket extends ExternalServerPacket {
+
+    private static boolean handlingPacket = false;
+    private final String name;
+    private final UUID uuid;
+
+    public DeopPlayerPacket(String name, UUID uuid) {
+        this.name = name;
+        this.uuid = uuid;
+    }
+
+    public static void broadcast(String name, UUID uuid) {
+        if (!handlingPacket && MultiPaper.getSyncJsonFiles()) {
+            MultiPaper.broadcastPacketToExternalServers(new DeopPlayerPacket(name, uuid));
+        }
+    }
+
+    public DeopPlayerPacket(FriendlyByteBuf in) {
+        name = in.readBoolean() ? in.readUtf() : null;
+        uuid = in.readBoolean() ? in.readUUID() : null;
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeBoolean(name != null);
+        if (name != null) {
+            out.writeUtf(name);
+        }
+
+        out.writeBoolean(uuid != null);
+        if (uuid != null) {
+            out.writeUUID(uuid);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            handlingPacket = true;
+            Player player = Bukkit.getPlayer(uuid);
+            if (player != null) {
+                player.setOp(false);
+            } else {
+                MinecraftServer.getServer().getPlayerList().getOps().remove(new GameProfile(uuid, name));
+            }
+            handlingPacket = false;
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 058d319fc52025afc9b68e627a99d68eb60cc490..b40c61a02356f595ab08d181e4e17f5b23c32132 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -23,6 +23,14 @@ public class ExternalServerPacketSerializer {
         addPacket(RequestChunkPacket.class, RequestChunkPacket::new);
         addPacket(SendChunkPacket.class, SendChunkPacket::new);
         addPacket(SendTickListPacket.class, SendTickListPacket::new);
+        addPacket(BanPlayerPacket.class, BanPlayerPacket::new);
+        addPacket(PardonPlayerPacket.class, PardonPlayerPacket::new);
+        addPacket(BanIpPacket.class, BanIpPacket::new);
+        addPacket(PardonIpPacket.class, PardonIpPacket::new);
+        addPacket(OpPlayerPacket.class, OpPlayerPacket::new);
+        addPacket(DeopPlayerPacket.class, DeopPlayerPacket::new);
+        addPacket(WhiteListPlayerPacket.class, WhiteListPlayerPacket::new);
+        addPacket(RemoveWhiteListedPlayerPacket.class, RemoveWhiteListedPlayerPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/OpPlayerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/OpPlayerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..79daf021ec576b496c9edd41df10079d38026104
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/OpPlayerPacket.java
@@ -0,0 +1,72 @@
+package puregero.multipaper.externalserverprotocol;
+
+import com.mojang.authlib.GameProfile;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.players.ServerOpListEntry;
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class OpPlayerPacket extends ExternalServerPacket {
+
+    private static boolean handlingPacket = false;
+    private final String name;
+    private final UUID uuid;
+    private final int level;
+    private final boolean bypassPlayerLimit;
+
+    public OpPlayerPacket(String name, UUID uuid, int level, boolean bypassPlayerLimit) {
+        this.name = name;
+        this.uuid = uuid;
+        this.level = level;
+        this.bypassPlayerLimit = bypassPlayerLimit;
+    }
+
+    public static void broadcast(String name, UUID uuid, int level, boolean bypassPlayerLimit) {
+        if (!handlingPacket && MultiPaper.getSyncJsonFiles()) {
+            MultiPaper.broadcastPacketToExternalServers(new OpPlayerPacket(name, uuid, level, bypassPlayerLimit));
+        }
+    }
+
+    public OpPlayerPacket(FriendlyByteBuf in) {
+        name = in.readBoolean() ? in.readUtf() : null;
+        uuid = in.readBoolean() ? in.readUUID() : null;
+        level = in.readInt();
+        bypassPlayerLimit = in.readBoolean();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeBoolean(name != null);
+        if (name != null) {
+            out.writeUtf(name);
+        }
+
+        out.writeBoolean(uuid != null);
+        if (uuid != null) {
+            out.writeUUID(uuid);
+        }
+
+        out.writeInt(level);
+
+        out.writeBoolean(bypassPlayerLimit);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            handlingPacket = true;
+            Player player = Bukkit.getPlayer(uuid);
+            if (player != null) {
+                player.setOp(true);
+            } else {
+                MinecraftServer.getServer().getPlayerList().getOps().add(new ServerOpListEntry(new GameProfile(uuid, name), level, bypassPlayerLimit));
+            }
+            handlingPacket = false;
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PardonIpPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PardonIpPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..041016ae91a0a84f86552f2a5b54cb58ede87b77
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PardonIpPacket.java
@@ -0,0 +1,43 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+public class PardonIpPacket extends ExternalServerPacket {
+
+    private static boolean handlingPacket = false;
+    private final String ip;
+
+    public PardonIpPacket(String ip) {
+        this.ip = ip;
+    }
+
+    public static void broadcast(String ip) {
+        if (!handlingPacket && MultiPaper.getSyncJsonFiles()) {
+            MultiPaper.broadcastPacketToExternalServers(new PardonIpPacket(ip));
+        }
+    }
+
+    public PardonIpPacket(FriendlyByteBuf in) {
+        ip = in.readBoolean() ? in.readUtf() : null;
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeBoolean(ip != null);
+        if (ip != null) {
+            out.writeUtf(ip);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            handlingPacket = true;
+            MinecraftServer.getServer().getPlayerList().getIpBans().remove(ip);
+            handlingPacket = false;
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PardonPlayerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PardonPlayerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..66de13afc67ab277fda2418938fc02251f3e1ead
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PardonPlayerPacket.java
@@ -0,0 +1,54 @@
+package puregero.multipaper.externalserverprotocol;
+
+import com.mojang.authlib.GameProfile;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PardonPlayerPacket extends ExternalServerPacket {
+
+    private static boolean handlingPacket = false;
+    private final String name;
+    private final UUID uuid;
+
+    public PardonPlayerPacket(String name, UUID uuid) {
+        this.name = name;
+        this.uuid = uuid;
+    }
+
+    public static void broadcast(String name, UUID uuid) {
+        if (!handlingPacket && MultiPaper.getSyncJsonFiles()) {
+            MultiPaper.broadcastPacketToExternalServers(new PardonPlayerPacket(name, uuid));
+        }
+    }
+
+    public PardonPlayerPacket(FriendlyByteBuf in) {
+        name = in.readBoolean() ? in.readUtf() : null;
+        uuid = in.readBoolean() ? in.readUUID() : null;
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeBoolean(name != null);
+        if (name != null) {
+            out.writeUtf(name);
+        }
+
+        out.writeBoolean(uuid != null);
+        if (uuid != null) {
+            out.writeUUID(uuid);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            handlingPacket = true;
+            MinecraftServer.getServer().getPlayerList().getBans().remove(new GameProfile(uuid, name));
+            handlingPacket = false;
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/RemoveWhiteListedPlayerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/RemoveWhiteListedPlayerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..043e429e92235f02896cd87babcaf664f622f2ad
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/RemoveWhiteListedPlayerPacket.java
@@ -0,0 +1,54 @@
+package puregero.multipaper.externalserverprotocol;
+
+import com.mojang.authlib.GameProfile;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class RemoveWhiteListedPlayerPacket extends ExternalServerPacket {
+
+    private static boolean handlingPacket = false;
+    private final String name;
+    private final UUID uuid;
+
+    public RemoveWhiteListedPlayerPacket(String name, UUID uuid) {
+        this.name = name;
+        this.uuid = uuid;
+    }
+
+    public static void broadcast(String name, UUID uuid) {
+        if (!handlingPacket && MultiPaper.getSyncJsonFiles()) {
+            MultiPaper.broadcastPacketToExternalServers(new RemoveWhiteListedPlayerPacket(name, uuid));
+        }
+    }
+
+    public RemoveWhiteListedPlayerPacket(FriendlyByteBuf in) {
+        name = in.readBoolean() ? in.readUtf() : null;
+        uuid = in.readBoolean() ? in.readUUID() : null;
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeBoolean(name != null);
+        if (name != null) {
+            out.writeUtf(name);
+        }
+
+        out.writeBoolean(uuid != null);
+        if (uuid != null) {
+            out.writeUUID(uuid);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            handlingPacket = true;
+            MinecraftServer.getServer().getPlayerList().getWhiteList().remove(new GameProfile(uuid, name));
+            handlingPacket = false;
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/WhiteListPlayerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/WhiteListPlayerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..9973ba0c17c26f82885a60590f792c6cf54227c0
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/WhiteListPlayerPacket.java
@@ -0,0 +1,55 @@
+package puregero.multipaper.externalserverprotocol;
+
+import com.mojang.authlib.GameProfile;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.players.UserWhiteListEntry;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class WhiteListPlayerPacket extends ExternalServerPacket {
+
+    private static boolean handlingPacket = false;
+    private final String name;
+    private final UUID uuid;
+
+    public WhiteListPlayerPacket(String name, UUID uuid) {
+        this.name = name;
+        this.uuid = uuid;
+    }
+
+    public static void broadcast(String name, UUID uuid) {
+        if (!handlingPacket && MultiPaper.getSyncJsonFiles()) {
+            MultiPaper.broadcastPacketToExternalServers(new WhiteListPlayerPacket(name, uuid));
+        }
+    }
+
+    public WhiteListPlayerPacket(FriendlyByteBuf in) {
+        name = in.readBoolean() ? in.readUtf() : null;
+        uuid = in.readBoolean() ? in.readUUID() : null;
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeBoolean(name != null);
+        if (name != null) {
+            out.writeUtf(name);
+        }
+
+        out.writeBoolean(uuid != null);
+        if (uuid != null) {
+            out.writeUUID(uuid);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            handlingPacket = true;
+            MinecraftServer.getServer().getPlayerList().getWhiteList().add(new UserWhiteListEntry(new GameProfile(uuid, name)));
+            handlingPacket = false;
+        });
+    }
+}
