From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 27 Mar 2021 17:06:51 +1000
Subject: [PATCH] Teleport players between servers when they get too close to
 eachother


diff --git a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
index 472adbd2aa2a9e1d8d481749ba92c3a290a5fa36..a9c4537852baf4833fa1cbedc532e8828896dbdb 100644
--- a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
+++ b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
@@ -27,6 +27,7 @@ import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.AsyncPlayerChatEvent;
 import org.bukkit.event.player.PlayerChatEvent;
+import puregero.multipaper.MultiPaper;
 
 public final class ChatProcessor {
     // <-- copied from adventure-text-serializer-legacy
@@ -169,6 +170,8 @@ public final class ChatProcessor {
                 recipient.sendMessage(player, message);
             }
         }
+
+        MultiPaper.broadcastPacket(event.getPlayer().getUniqueId(), message); // MultiPaper broadcast chat message
     }
 
     private AsyncChatEvent createAsync(final ChatComposer composer, final Set<Player> recipients, final Component message) {
diff --git a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
index 4fad3caf8cd0bcc57b87223df6005a9388319ac8..e5b1d5a566e51dd117ac0d16837282c1b84743b3 100644
--- a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
@@ -1870,7 +1870,6 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     private boolean cannotLoadChunks(EntityPlayer entityplayer) { return this.b(entityplayer); } // Paper - OBFHELPER
     private boolean b(EntityPlayer entityplayer) {
-        if (Zone.isBeingSentToAnotherServer(entityplayer.getBukkitEntity())) return true; // MultiPaper
         return entityplayer.isSpectator() && !this.world.getGameRules().getBoolean(GameRules.SPECTATORS_GENERATE_CHUNKS);
     }
 
diff --git a/src/main/java/net/minecraft/server/network/PlayerConnection.java b/src/main/java/net/minecraft/server/network/PlayerConnection.java
index a0b81a75f73c507f507c22b6dfeab738d4010b90..64375cb8ebb709d1ae6001ab8b133be9bb19aca4 100644
--- a/src/main/java/net/minecraft/server/network/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/network/PlayerConnection.java
@@ -2698,12 +2698,6 @@ public class PlayerConnection implements PacketListenerPlayIn {
                         return;
                     }
 
-                    // MultiPaper start - don't let them click items if they shouldn't be ticked
-                    if (!MultiPaper.isPlayerSafe(player)) {
-                        event.setCancelled(true);
-                    }
-                    // MultiPaper end
-
                     switch (event.getResult()) {
                         case ALLOW:
                         case DEFAULT:
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index e9acefe789b7cf76085f00b311a87731d321ff26..a89ed5c21563fa91384e5da37e2b73e4c9de80a5 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -286,6 +286,13 @@ public abstract class PlayerList {
         entityplayer.getRecipeBook().a(entityplayer);
         this.sendScoreboard(worldserver1.getScoreboard(), entityplayer);
         this.server.invalidatePingSample();
+        
+        // MultiPaper start - Check if player should move servers
+        if (Zone.checkIfShouldMerge(entityplayer.getBukkitEntity())) {
+            return;
+        }
+        // MultiPaper end
+        
         // Paper start - async load spawn in chunk
         WorldServer finalWorldserver = worldserver1;
         int chunkX = loc.getBlockX() >> 4;
diff --git a/src/main/java/net/minecraft/world/entity/player/EntityHuman.java b/src/main/java/net/minecraft/world/entity/player/EntityHuman.java
index 914886836cb9ed29dfe844167db4c9267e2c5c34..93c6bb77f11dd28fc8859461d8f87d96fc461ee0 100644
--- a/src/main/java/net/minecraft/world/entity/player/EntityHuman.java
+++ b/src/main/java/net/minecraft/world/entity/player/EntityHuman.java
@@ -688,7 +688,7 @@ public abstract class EntityHuman extends EntityLiving {
             PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
             this.world.getServer().getPluginManager().callEvent(event);
 
-            if (event.isCancelled() || !MultiPaper.isPlayerSafe(this)) { // MultiPaper don't drop items if they shouldn't be ticked
+            if (event.isCancelled()) {
                 org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
                 if (flag1 && (cur == null || cur.getAmount() == 0)) {
                     // The complete stack was dropped
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index adbae37fdd55780cdeaf34e6d2dbb3cf3decea54..9685fb2fceb2fc2528a6209fa7e9d6cf7b5b9623 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -531,12 +531,6 @@ public class CraftEventFactory {
         }
         craftServer.getPluginManager().callEvent(event);
 
-        // MultiPaper start - don't interact if they shouldn't be ticked
-        if (!MultiPaper.isPlayerSafe(who)) {
-            event.setCancelled(true);
-        }
-        // MultiPaper end
-
         return event;
     }
 
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index f3b147824896eaede61af72db2fc2095ef0dab2b..279e5e4d1f96884b23e1646eebbc399e1e47b851 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -13,7 +13,6 @@ import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.level.EntityPlayer;
 import net.minecraft.server.level.WorldServer;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.player.EntityHuman;
 import net.minecraft.world.level.ChunkCoordIntPair;
 import net.minecraft.world.level.chunk.Chunk;
 import net.minecraft.world.level.saveddata.maps.PersistentIdCounts;
@@ -43,7 +42,7 @@ public class MultiPaper {
     private static long last10Seconds = System.currentTimeMillis();
     private static MultiPaperPlugin plugin = null;
 
-    private static MultiPaperConnection getConnection() {
+    public static MultiPaperConnection getConnection() {
         if (multiPaperConnection == null) {
             multiPaperConnection = new MultiPaperConnection();
         }
@@ -54,7 +53,7 @@ public class MultiPaper {
     private static void tick() {
         if (plugin == null) {
             plugin = new MultiPaperPlugin();
-            Bukkit.getPluginManager().registerEvents(new MultiPaperListener(), plugin);
+            new MultiPaperListener(plugin);
         }
         
         boolean hasBeen10Seconds = last10Seconds < System.currentTimeMillis() - 10 * 1000;
@@ -75,17 +74,11 @@ public class MultiPaper {
 
     private static void checkIfPlayersNeedToBeMoved() {
         for (Player player : Bukkit.getOnlinePlayers()) {
-            if (!Zone.isBeingSentToAnotherServer(player) && player.getLastLogin() < System.currentTimeMillis() - 5 * 1000L) {
-                for (ExternalServer server : getConnection().getServersMap().values()) {
-                    if (server.isAlive() && !server.isMe()) {
-                        for (UUID uuid : server.getPlayers()) {
-                            Location location = getConnection().playerLocations.get(uuid);
-                            if (Bukkit.getPlayer(uuid) == null && location != null && location.getWorld() == player.getWorld()
-                                    && chunkDistance(player.getLocation(), location) <= (10 + Bukkit.getViewDistance()) * 2) {
-                                Zone.doMerge(player.getChunk(), server.getName());
-                            }
-                        }
-                    }
+            if (player.getLastLogin() < System.currentTimeMillis() - 5 * 1000L) {
+                String server = Zone.getServer(player.getLocation());
+
+                if (server != null) {
+                    Zone.doMerge(player, server);
                 }
             }
         }
@@ -354,29 +347,21 @@ public class MultiPaper {
         return multiPaperConnection.playerLocations.get(uuid);
     }
 
-    private static int chunkDistance(Entity entity1, Entity entity2) {
+    public static int chunkDistance(Entity entity1, Entity entity2) {
         return chunkDistance(entity1.chunkX, entity1.chunkZ, entity2.chunkX, entity2.chunkZ);
     }
 
-    private static int chunkDistance(Location loc1, Location loc2) {
+    public static int chunkDistance(Location loc1, Location loc2) {
         return chunkDistance(loc1.getBlockX() >> 4, loc1.getBlockZ() >> 4, loc2.getBlockX() >> 4, loc2.getBlockZ() >> 4);
     }
 
-    private static int chunkDistance(Entity entity, Chunk chunk) {
+    public static int chunkDistance(Entity entity, Chunk chunk) {
         return chunkDistance(entity.chunkX, entity.chunkZ, chunk.getPos().x, chunk.getPos().z);
     }
 
-    private static int chunkDistance(int cx1, int cz1, int cx2, int cz2) {
+    public static int chunkDistance(int cx1, int cz1, int cx2, int cz2) {
         return Math.max(Math.abs(cx1 - cx2), Math.abs(cz1 - cz2));
     }
-    
-    public static boolean isPlayerSafe(EntityHuman player) {
-        if (!(player instanceof EntityPlayer)) {
-            return true;
-        }
-        
-        return !Zone.isBeingSentToAnotherServer(((EntityPlayer) player).getBukkitEntity());
-    }
 
     public static boolean shouldTickEntity(WorldServer worldServer, Entity entity) {
         return shouldTickChunk(worldServer, entity.getCurrentChunk());
@@ -392,7 +377,7 @@ public class MultiPaper {
         for (EntityPlayer player : worldServer.players) {
             if (chunkDistance(player, chunk) <= Bukkit.getViewDistance() * 2) {
                 playerNearby = true;
-                if (isPlayerSafe(player) && player.shouldTickEntities) {
+                if (player.shouldTickEntities) {
                     return true;
                 }
             }
diff --git a/src/main/java/puregero/multipaper/MultiPaperListener.java b/src/main/java/puregero/multipaper/MultiPaperListener.java
index 75f4049ba0643018fbab17d6954d1736f685d231..e928cae02d9f3327b998a2e98effb71cea5d0efa 100644
--- a/src/main/java/puregero/multipaper/MultiPaperListener.java
+++ b/src/main/java/puregero/multipaper/MultiPaperListener.java
@@ -1,15 +1,31 @@
 package puregero.multipaper;
 
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.EventPriority;
 import org.bukkit.event.Listener;
+import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.event.player.PlayerKickEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.plugin.Plugin;
 
+import java.util.Arrays;
 import java.util.HashSet;
+import java.util.List;
 
 public class MultiPaperListener implements Listener {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private final Plugin plugin;
+
+    public MultiPaperListener(Plugin plugin) {
+        this.plugin = plugin;
+        Bukkit.getPluginManager().registerEvents(this, plugin);
+    }
 
     private HashSet<Player> kickedPlayers = new HashSet<>();
     
@@ -34,4 +50,27 @@ public class MultiPaperListener implements Listener {
         Zone zone = new Zone(player.getWorld(), player.getLocation().getBlockX() >> 4, player.getLocation().getBlockZ() >> 4);
         zone.forEach(MultiPaper::willSaveChunk);
     }
+    
+    private static final List<PlayerTeleportEvent.TeleportCause> teleportCauseCanMoveServers = Arrays.asList(
+            PlayerTeleportEvent.TeleportCause.COMMAND,
+            PlayerTeleportEvent.TeleportCause.PLUGIN,
+            PlayerTeleportEvent.TeleportCause.SPECTATE
+    );
+    
+    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
+    public void onTeleport(PlayerTeleportEvent e) {
+        if ((e.getTo().getWorld() != e.getFrom().getWorld() || e.getTo().distanceSquared(e.getFrom()) > 16 * 16)
+                && teleportCauseCanMoveServers.contains(e.getCause())) {
+            Bukkit.getScheduler().runTaskLater(plugin, () -> Zone.checkIfShouldMerge(e.getPlayer()), 0);
+        }
+    }
+    
+    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
+    public void onEntityPortal(EntityPortalEvent e) {
+        String server = Zone.getServer(e.getTo());
+        if (server != null) {
+            LOGGER.info("Disabling EntityPortalEvent{" + e.getEntity() + "," + e.getFrom() + " -> " + e.getTo() + "} as the other side is within " + server + "'s zone");
+            e.setCancelled(true);
+        }
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaperPlugin.java b/src/main/java/puregero/multipaper/MultiPaperPlugin.java
index c00c227819e0f0b02abbe6e555a4afcfb461653c..0d5a221f54bb25dbf7ddedb30979576bf5204754 100644
--- a/src/main/java/puregero/multipaper/MultiPaperPlugin.java
+++ b/src/main/java/puregero/multipaper/MultiPaperPlugin.java
@@ -29,7 +29,7 @@ public class MultiPaperPlugin implements Plugin {
 
     @Override
     public @NotNull PluginDescriptionFile getDescription() {
-        return null;
+        return new PluginDescriptionFile(getName(), Bukkit.getVersion(), getClass().getName());
     }
 
     @Override
diff --git a/src/main/java/puregero/multipaper/ShutdownHandler.java b/src/main/java/puregero/multipaper/ShutdownHandler.java
index 710ce810ddbfe83c902142b05a0c886383cbdcde..1bb2afccaeff7644026846f0ba3cda25062ee945 100644
--- a/src/main/java/puregero/multipaper/ShutdownHandler.java
+++ b/src/main/java/puregero/multipaper/ShutdownHandler.java
@@ -32,42 +32,21 @@ public class ShutdownHandler {
 
     private static void movePlayersToDifferentServer() {
         HashSet<Player> moved = new HashSet<>();
-        int tries = 0;
-        do {
-            moved.clear();
 
-            if (tries++ > 10) {
-                LOGGER.warn("Given up sending players to another server, disconnecting them instead");
-                return;
+        for (Player player : Bukkit.getOnlinePlayers()) {
+            if (moved.contains(player)) {
+                continue;
             }
 
-            for (Player player : Bukkit.getOnlinePlayers()) {
-                if (moved.contains(player) || ((CraftPlayer) player).getHandle().playerConnection.isDisconnected()) {
-                    continue;
-                }
-
-                String server = randomServer();
+            String server = randomServer();
 
-                if (server == null) {
-                    LOGGER.info("No other servers are online, disconnecting players instead");
-                    return;
-                }
-
-                moved.addAll(Zone.doMerge(player.getChunk(), server));
+            if (server == null) {
+                LOGGER.info("No other servers are online, disconnecting players instead");
+                return;
             }
 
-            LOGGER.info("Moving players to different servers... (" + moved.size() + " players to go)");
-
-            if (!moved.isEmpty()) {
-                // Wait for players to get moved
-                try {
-                    Thread.sleep(2500);
-                } catch (InterruptedException e) {
-                    e.printStackTrace();
-                    return;
-                }
-            }
-        } while (!moved.isEmpty());
+            moved.addAll(Zone.doMerge(player, server));
+        }
     }
 
     private static String randomServer() {
diff --git a/src/main/java/puregero/multipaper/Zone.java b/src/main/java/puregero/multipaper/Zone.java
index 1fd658967de55adb5f38cefe500263c49470b74e..794f61347671df8edb2fe2fac6673172890b1ef6 100644
--- a/src/main/java/puregero/multipaper/Zone.java
+++ b/src/main/java/puregero/multipaper/Zone.java
@@ -5,6 +5,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
+import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.scheduler.CraftScheduler;
@@ -16,9 +17,6 @@ import java.util.function.Consumer;
 
 public class Zone implements Iterable<Chunk> {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final int SHOULD_MERGE_CHUNK_LIMIT = 15;
-
-    private static HashSet<Player> beingSentToAnotherServer = new HashSet<>();
 
     private static List<Consumer<Chunk>> chunkSaveHandlers = new ArrayList<>();
 
@@ -26,74 +24,60 @@ public class Zone implements Iterable<Chunk> {
         chunkSaveHandlers.add(handler);
     }
 
-    public static boolean isBeingSentToAnotherServer(Player player) {
-        return beingSentToAnotherServer.contains(player);
-    }
-
-    public static Collection<Player> doMerge(Chunk chunk, String server) {
-        Zone zone = new Zone(chunk);
+    public static Collection<Player> doMerge(Player centerPlayer, String server) {
+        HashSet<Player> players = new HashSet<>();
 
-        if (zone.players.size() > 0) {
-            return doMerge(chunk, zone, server);
-        } else {
-            return Collections.emptySet();
-        }
-    }
+        recursivelyAddPlayersInSameZone(players, centerPlayer);
+        
+        LOGGER.info("Merging " + players.size() + " players with server " + server);
 
-    private static Collection<Player> doMerge(Chunk chunk, Zone zone1, String server) {
-        LOGGER.info("Merging " + zone1.players.size() + " players and " + zone1.chunks.size() + " chunks with server " + server);
+        for (Player player : players) {
+            ((CraftPlayer) player).getHandle().isBeingSentToAnotherServer = true;
+            player.kick(Component.text("sendto:" + server));
 
-        HashSet<Player> toSend = new HashSet<>();
-        for (Player player : zone1.players) {
-            if (beingSentToAnotherServer.add(player)) {
-                toSend.add(player);
+            if (player.getLocation().isChunkLoaded()) {
+                // Attempt to unload the player's chunk first to make teleporting faster
+                Chunk c = player.getChunk();
+                ((CraftScheduler) Bukkit.getScheduler()).scheduleInternalTask(c::unload, 0, "Unload Chunk");
             }
         }
 
-        Zone zone = new Zone(chunk);
-
-        for (Chunk c : zone.chunks) {
-            MultiPaper.willSaveChunk(c);
-        }
+        return players;
+    }
+    
+    public static boolean inSameZone(Location location1, Location location2) {
+        return MultiPaper.chunkDistance(location1, location2) <= (12 + Bukkit.getViewDistance()) * 2;
+    }
 
-//        for (Chunk c : zone.chunks) {
-//            net.minecraft.world.level.chunk.Chunk nmsChunk = ((CraftChunk) c).getHandle();
-//            MultiPaper.releaseChunk(nmsChunk.getPos(), nmsChunk.world);
-//            chunkSaveHandlers.forEach(handler -> handler.accept(c));
-//            nmsChunk.world.getChunkProvider().playerChunkMap.saveChunk(nmsChunk);
-//        }
-//
-//        WorldServer worldServer = ((CraftChunk) chunk).getHandle().world;
-//        if (worldServer.getMinecraftServer().hasStopped()) {
-//            LOGGER.info("Server is stopping, running garbage collector before flushing chunk writes");
-//            System.gc();
-//            LOGGER.info("Server is stopping, flushing chunk writes");
-//            worldServer.asyncChunkTaskManager.flush();
-//            LOGGER.info("Server is stopping, running garbage collector after flushing chunk writes");
-//            System.gc();
-//        }
-
-        for (Player player : toSend) {
-            ((CraftPlayer) player).getHandle().isBeingSentToAnotherServer = true;
-            if (!player.getItemOnCursor().getType().isAir()) {
-                player.getInventory().addItem(player.getItemOnCursor());
-                player.setItemOnCursor(null);
+    public static String getServer(Location location) {
+        for (ExternalServer server : MultiPaper.getConnection().getServersMap().values()) {
+            if (server.isAlive() && !server.isMe()) {
+                for (UUID uuid : server.getPlayers()) {
+                    Location loc = MultiPaper.getConnection().playerLocations.get(uuid);
+                    if (Bukkit.getPlayer(uuid) == null && loc != null && loc.getWorld() == location.getWorld()
+                            && Zone.inSameZone(loc, location)) {
+                        return server.getName();
+                    }
+                }
             }
-            player.saveData();
-            player.kick(Component.text("sendto:" + server));
         }
         
-        ((CraftScheduler) Bukkit.getScheduler()).scheduleInternalTask(() -> zone.chunks.forEach(Chunk::unload), 0, "Unload Chunks");
-
-        return toSend;
+        return null;
     }
 
-    public static boolean checkIfShouldMerge(Chunk chunk) {
+    public static boolean checkIfShouldMerge(Player player) {
+        String serverAtLocation = getServer(player.getLocation());
+        
+        if (serverAtLocation != null) {
+            Zone.doMerge(player, serverAtLocation);
+            return true;
+        }
+        
         ExternalServer serverTo = MultiPaper.getMe();
 
         // Find server with lowest average tick time
         for (ExternalServer server : MultiPaper.getServers()) {
-            if (server.getAverageTickTime() < serverTo.getAverageTickTime() - 20 &&
+            if (server.getAverageTickTime() < serverTo.getAverageTickTime() - 2 &&
                     server.isAlive()) {
                 serverTo = server;
             }
@@ -103,38 +87,27 @@ public class Zone implements Iterable<Chunk> {
             // Can't merge with yourself
             return false;
         }
-
-        Zone zone = new Zone(chunk, SHOULD_MERGE_CHUNK_LIMIT);
-
-        if (zone.chunks.size() >= SHOULD_MERGE_CHUNK_LIMIT) {
-            // Too many chunks loaded, probably not worth merging
-            return false;
-        }
-
-        if (zone.players.isEmpty()) {
-            // No one to merge
-            return false;
+        
+        HashSet<Player> players = new HashSet<>();
+        
+        recursivelyAddPlayersInSameZone(players, player);
+        
+        if (players.size() == 1) {
+            Zone.doMerge(player, serverTo.getName());
+            return true;
         }
+        
+        return false;
+    }
 
-        HashSet<Player> nearbyPlayers = new HashSet<>();
-        for (Player player : chunk.getWorld().getPlayers()) {
-            if (!zone.players.contains(player) &&
-                    Math.abs(player.getChunk().getX() - chunk.getX()) < Bukkit.getViewDistance() * 5 &&
-                    Math.abs(player.getChunk().getZ() - chunk.getZ()) < Bukkit.getViewDistance() * 5) {
-                nearbyPlayers.add(player);
+    private static void recursivelyAddPlayersInSameZone(HashSet<Player> players, Player player) {
+        if (players.add(player)) {
+            for (Player p : player.getWorld().getPlayers()) {
+                if (p != player && inSameZone(p.getLocation(), player.getLocation())) {
+                    recursivelyAddPlayersInSameZone(players, p);
+                }
             }
         }
-
-        if (!nearbyPlayers.isEmpty()) {
-            // There are nearby players on this server, this will probably mean
-            // that if we merge with another server, we might end up merging
-            // back very soon
-            return false;
-        }
-
-        Zone.doMerge(chunk, zone, serverTo.getName());
-        
-        return true;
     }
 
     private final HashSet<Chunk> chunks = new HashSet<>();
