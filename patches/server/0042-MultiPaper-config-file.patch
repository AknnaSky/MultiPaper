From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 4 Mar 2022 20:33:33 +1000
Subject: [PATCH] MultiPaper config file


diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 1e0d261439255091a6f61485c0747231fbd5b1db..345a6822c9cc8e8a74e63d78dbbeeaeb66ea5db6 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -59,6 +59,7 @@ import org.slf4j.Logger;
 // CraftBukkit start
 import java.util.concurrent.atomic.AtomicReference;
 import net.minecraft.SharedConstants;
+import puregero.multipaper.MultiPaperConfig;
 
 public class Main {
 
@@ -103,6 +104,9 @@ public class Main {
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
 
+            MultiPaperConfig.init((File) optionset.valueOf("multipaper-settings")); // MultiPaper
+            System.setProperty("bungeecordName", MultiPaperConfig.bungeeCordName); // MultiPaper - remember this property even after config reloads
+
             Bootstrap.bootStrap();
             Bootstrap.validate();
             Util.startTimerHackThread();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a892857b42eaf73f85db1ce0994ff4c89f28d527..52261d931b404d7ab89088f7dac111b209663fb2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -244,6 +244,7 @@ import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import puregero.multipaper.permissions.MultiPaperPermissions;
 
 import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
@@ -484,6 +485,7 @@ public final class CraftServer implements Server {
             this.commandMap.registerServerAliases();
             DefaultPermissions.registerCorePermissions();
             CraftDefaultPermissions.registerCorePermissions();
+            MultiPaperPermissions.registerCorePermissions(); // MultiPaper
             if (!com.destroystokyo.paper.PaperConfig.loadPermsBeforePlugins) this.loadCustomPermissions(); // Paper
             this.helpMap.initializeCommands();
             this.syncCommands();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index fbe68bd4739d9a0e7d9bc4c3d5ba8ecfd2d13954..74fb5b3197cd2bdb151058dcb0b8630261e82bd9 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -153,6 +153,14 @@ public class Main {
                         .describedAs("Jar file");
                 // Paper end
 
+                // MultiPaper start
+                acceptsAll(asList("multipaper", "multipaper-settings"), "File for multipaper settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("multipaper.yml"))
+                        .describedAs("Yml file");
+                // MultiPaper end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/puregero/multipaper/MultiPaperConfig.java b/src/main/java/puregero/multipaper/MultiPaperConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..5a83e3cfe419ca03dfe96ee91f9a388b0dd334c8
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperConfig.java
@@ -0,0 +1,232 @@
+package puregero.multipaper;
+
+import com.google.common.base.Throwables;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.Arrays;
+import java.util.List;
+import java.util.logging.Level;
+
+public class MultiPaperConfig {
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = """
+            This is the main configuration file for MultiPaper.
+            There's quite alot to configure. Read the docs for more information.
+
+            Docs: https://github.com/PureGero/MultiPaper/blob/main/MULTIPAPER_YAML.md\s
+            """;
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    private static boolean dirty = false;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load multipaper.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+
+        readConfig(MultiPaperConfig.class, null);
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+        upgradeConfig();
+        if (dirty) {
+            saveConfig();
+        }
+    }
+
+    private static void upgradeConfig() {
+        upgradeOption("ticksPerInactiveEntityTracking", "optimizations.ticksPerInactiveEntityTracking");
+    }
+
+    private static void upgradeOption(String from, String to) {
+        if (System.getProperty(from) != null && System.getProperty(to) == null) {
+            System.setProperty(to, System.getProperty(from));
+        }
+
+        if (config.contains(from)) {
+            config.set(to, config.get(from));
+            config.set(from, null);
+            dirty = true;
+        }
+    }
+
+    static void saveConfig() {
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        if (System.getProperty(path) != null) {
+            return Boolean.getBoolean(path);
+        }
+        if (!config.isBoolean(path)) {
+            dirty = true;
+            config.set(path, def);
+        }
+        return config.getBoolean(path);
+    }
+
+    private static double getDouble(String path, double def) {
+        if (System.getProperty(path) != null) {
+            return Double.parseDouble(System.getProperty(path));
+        }
+        if (!config.isDouble(path)) {
+            dirty = true;
+            config.set(path, def);
+        }
+        return config.getDouble(path);
+    }
+
+    private static int getInt(String path, int def) {
+        if (System.getProperty(path) != null) {
+            return Integer.getInteger(path);
+        }
+        if (!config.isInt(path)) {
+            dirty = true;
+            config.set(path, def);
+        }
+        return config.getInt(path);
+    }
+
+    private static <T> List<?> getList(String path, T def) {
+        if (!config.isList(path)) {
+            dirty = true;
+            config.set(path, def);
+        }
+        return config.getList(path);
+    }
+
+    private static String getString(String path, String def) {
+        if (System.getProperty(path) != null) {
+            return System.getProperty(path);
+        }
+        if (!config.isString(path)) {
+            dirty = true;
+            config.set(path, def);
+        }
+        return config.getString(path);
+    }
+
+    public static String bungeeCordName;
+    private static void bungeeCordName() {
+        bungeeCordName = getString("bungeecordName", "server" + Double.toString(Math.random()).substring(2, 7));
+    }
+
+    public static String multipaperMasterAddress;
+    private static void multipaperMasterAddress() {
+        multipaperMasterAddress = getString("multipaperMasterAddress", "localhost:35353");
+    }
+
+    public static boolean syncJsonFiles;
+    private static void syncJsonFiles() {
+        syncJsonFiles = getBoolean("syncJsonFiles", true);
+    }
+
+    public static boolean advertiseToBuiltInProxy;
+    private static void advertiseToBuiltInProxy() {
+        advertiseToBuiltInProxy = getBoolean("advertiseToBuiltInProxy", true);
+    }
+
+    public static boolean syncScoreboards;
+    private static void syncScoreboards() {
+        syncScoreboards = getBoolean("syncScoreboards", true);
+    }
+
+    public static boolean logFileSyncing;
+    private static void logFileSyncing() {
+        logFileSyncing = getBoolean("logFileSyncing", true);
+    }
+
+    public static List<String> filesToSyncOnStartup;
+    private static void filesToSyncOnStartup() {
+        filesToSyncOnStartup = getList("filesToSyncOnStartup", Arrays.asList("myconfigfile.yml", "plugins/MyPlugin.jar")).stream().map(Object::toString).toList();
+    }
+
+    public static List<String> filesToSyncInRealTime;
+    private static void filesToSyncInRealTime() {
+        filesToSyncInRealTime = getList("filesToSyncInRealTime", Arrays.asList("plugins/MyPluginDirectory")).stream().map(Object::toString).toList();
+    }
+
+    public static List<String> filesToOnlyUploadOnServerStop;
+    private static void filesToOnlyUploadOnServerStop() {
+        filesToOnlyUploadOnServerStop = getList("filesToOnlyUploadOnServerStop", Arrays.asList("plugins/MyPluginDirectory/my_big_database.db")).stream().map(Object::toString).toList();
+    }
+
+    public static List<String> filesToNotSync;
+    private static void filesToNotSync() {
+        filesToNotSync = getList("filesToNotSync", Arrays.asList("plugins/bStats")).stream().map(Object::toString).toList();
+    }
+
+    public static int ticksPerInactiveEntityTracking;
+    private static void ticksPerInactiveEntityTracking() {
+        ticksPerInactiveEntityTracking = getInt("optimizations.ticksPerInactiveEntityTracking", 1);
+    }
+
+    public static int interServerCompressionThreshold;
+    private static void interServerCompressionThreshold() {
+        interServerCompressionThreshold = getInt("interServerCompressionThreshold", 0);
+    }
+
+    public static int interServerConsolidationDelay;
+    private static void interServerConsolidationDelay() {
+        interServerConsolidationDelay = getInt("interServerConsolidationDelay", 0);
+    }
+
+    public static boolean useLocalPlayerCountForServerIsFullKick;
+    private static void useLocalPlayerCountForServerIsFullKick() {
+        useLocalPlayerCountForServerIsFullKick = getBoolean("useLocalPlayerCountForServerIsFullKick", false);
+    }
+
+    public static boolean syncPermissions;
+    private static void syncPermissions() {
+        syncPermissions = getBoolean("syncPermissions", true);
+    }
+
+    public static boolean reducePlayerPositionUpdatesInUnloadedChunks;
+    private static void reducePlayerPositionUpdatesInUnloadedChunks() {
+        reducePlayerPositionUpdatesInUnloadedChunks = getBoolean("optimizations.reducePlayerPositionUpdatesInUnloadedChunks", false);
+    }
+
+    public static boolean dontSaveLightingUpdates;
+    private static void dontSaveLightingUpdates() {
+        dontSaveLightingUpdates = getBoolean("optimizations.dontSaveLightingUpdates", false);
+    }
+
+    public static boolean useFutureBasedIO;
+    private static void useFutureBasedIO() {
+        useFutureBasedIO = getBoolean("optimizations.useFutureBasedIO", true);
+    }
+}
diff --git a/src/main/java/puregero/multipaper/permissions/MultiPaperCommandPermissions.java b/src/main/java/puregero/multipaper/permissions/MultiPaperCommandPermissions.java
new file mode 100644
index 0000000000000000000000000000000000000000..f7d9a1538ec842e453e5add3f9e33f8c43bfa3d2
--- /dev/null
+++ b/src/main/java/puregero/multipaper/permissions/MultiPaperCommandPermissions.java
@@ -0,0 +1,17 @@
+package puregero.multipaper.permissions;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
+
+public class MultiPaperCommandPermissions {
+    private static final String ROOT = "multipaper.command";
+    private static final String PREFIX = ROOT + ".";
+
+    public static void registerPermissions(@NotNull Permission parent) {
+        Permission commands = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all MultiPaper commands", parent);
+
+
+        commands.recalculatePermissibles();
+    }
+}
diff --git a/src/main/java/puregero/multipaper/permissions/MultiPaperPermissions.java b/src/main/java/puregero/multipaper/permissions/MultiPaperPermissions.java
new file mode 100644
index 0000000000000000000000000000000000000000..91b2e3564d7c737b2006f8c2860ab43846637384
--- /dev/null
+++ b/src/main/java/puregero/multipaper/permissions/MultiPaperPermissions.java
@@ -0,0 +1,16 @@
+package puregero.multipaper.permissions;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.util.permissions.DefaultPermissions;
+
+public class MultiPaperPermissions {
+    private static final String ROOT = "multipaper";
+
+    public static void registerCorePermissions() {
+        Permission parent = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all MultiPaper utilities and commands");
+
+        MultiPaperCommandPermissions.registerPermissions(parent);
+
+        parent.recalculatePermissibles();
+    }
+}
