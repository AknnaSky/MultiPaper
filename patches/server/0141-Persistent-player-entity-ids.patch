From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 1 Sep 2023 20:24:00 +0900
Subject: [PATCH] Persistent player entity ids


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 7544a199d426009df9a70d7810a9656149784564..c57490e42249adca50ff67e360dd0328fdc3aaf3 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -14,10 +14,13 @@ import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.Set;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
 import net.minecraft.ChatFormatting;
@@ -101,7 +104,6 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.Unit;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
@@ -187,6 +189,7 @@ import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.event.player.PlayerToggleSneakEvent;
 import org.bukkit.inventory.MainHand;
 import puregero.multipaper.*;
+import puregero.multipaper.config.MultiPaperConfiguration;
 import puregero.multipaper.externalserverprotocol.*;
 // CraftBukkit end
 
@@ -258,6 +261,7 @@ public class ServerPlayer extends Player {
     public boolean queueHealthUpdatePacket = false;
     public net.minecraft.network.protocol.game.ClientboundSetHealthPacket queuedHealthUpdatePacket;
     // Paper end
+    public static final Map<UUID, Integer> persistentEntityIds = new ConcurrentHashMap<>(); // MultiPaper - persistent entity ids for players across servers
     // Paper start - mob spawning rework
     public static final int MOBCATEGORY_TOTAL_ENUMS = net.minecraft.world.entity.MobCategory.values().length;
     public final int[] mobCounts = new int[MOBCATEGORY_TOTAL_ENUMS]; // Paper
@@ -335,6 +339,19 @@ public class ServerPlayer extends Player {
 
     public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile) {
         super(world, world.getSharedSpawnPos(), world.getSharedSpawnAngle(), profile);
+
+        // MultiPaper start - persistent entity ids for players across servers
+        if (MultiPaperConfiguration.get().syncSettings.persistentPlayerEntityIds) {
+            if (!(this instanceof ExternalPlayer)) {
+                Integer value = persistentEntityIds.get(profile.getId());
+                if (value != null) {
+                    setId(value);
+                }
+            }
+            persistentEntityIds.put(profile.getId(), getId());
+        }
+        // MultiPaper end - persistent entity ids for players across servers
+
         this.chatVisibility = ChatVisiblity.FULL;
         this.canChatColor = true;
         this.lastActionTime = Util.getMillis();
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 3d63fd235fc6e156e8bd2b71230e2f90ee1f046e..3083b1aff43c25b398faeba49cbe4797126f70bc 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -749,13 +749,17 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return this.entityData;
     }
 
-    public boolean equals(Object object) {
-        return object instanceof Entity ? ((Entity) object).id == this.id : false;
-    }
-
-    public int hashCode() {
-        return this.id;
-    }
+    // MultiPaper start - The Vanilla server never changes an entity's id from the randomly generated one, so we can use Java's built in equals and hashcode instead
+    // The Vanilla client does actually use these methods, but the server does not
+    // Since MultiPaper does change the entity's id, these can return true when the entities are not actually equal
+//    public boolean equals(Object object) {
+//        return object instanceof Entity ? ((Entity) object).id == this.id : false;
+//    }
+//
+//    public int hashCode() {
+//        return this.id;
+//    }
+    // MultiPaper end
 
     public void remove(Entity.RemovalReason reason) {
         this.setRemoved(reason);
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index 5370ffb23452f5e6eff9b2b3dd53c2c42f98cd2a..9b2f5ea606f7fb6701fa4ece902fef93b69b96a4 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -50,6 +50,7 @@ public class ExternalPlayer extends ServerPlayer {
 
         if (MultiPaperConfiguration.get().syncSettings.syncEntityIds) {
             setId(entityId);
+            if (MultiPaperConfiguration.get().syncSettings.persistentPlayerEntityIds) persistentEntityIds.put(gameProfile.getId(), getId());// MultiPaper - persistent entity ids for players across servers
             // Update cache hast sets with our new entity id
             this.cachedSingleHashSet = new com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<>(this);
             this.cachedSingleMobDistanceMap = new com.destroystokyo.paper.util.PooledHashSets.PooledObjectLinkedOpenHashSet<>(this);
