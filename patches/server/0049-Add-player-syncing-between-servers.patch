From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 15 Nov 2021 20:30:35 +1000
Subject: [PATCH] Add player syncing between servers


diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index 17ebc0ac3d4c91d6818c79e8821681b668bd95c6..e0dc397e12c8e1a07e50102f08bb248b42fda6ac 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -603,7 +603,7 @@ public class Metrics {
                     return minecraftVersion;
                 }));
 
-                metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
+                metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> (int) Bukkit.getOnlinePlayers().stream().filter(MultiPaper::isRealPlayer).count())); // MultiPaper
                 metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
                 metrics.addCustomChart(new Metrics.SimplePie("multipaper_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown")); // Tuinity - we have our own bstats page // Airplane // MultiPaper
                 metrics.addCustomChart(new Metrics.SimplePie("total_servers", () -> String.valueOf(MultiPaper.getConnection().getServersMap().values().stream().filter(ExternalServer::isAlive).count()))); // MultiPaper
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 34697742e26c083d16eb234555b1954ada5030a1..0eb5873d807d444a56b4b1b8456f9ef1ac7f2123 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1493,6 +1493,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             }
         }
 
+        MultiPaper.tick(); // MultiPaper
+
         // Paper start - incremental chunk and player saving
         int playerSaveInterval = com.destroystokyo.paper.PaperConfig.playerAutoSaveRate;
         if (playerSaveInterval < 0) {
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 7b23535a680d2a8534dcb8dd87770f66fb982c13..56c7e9748e9fd8294bf7cf1df97cf6e5fd3b90bc 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -164,6 +164,11 @@ import org.bukkit.event.player.PlayerPortalEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.inventory.MainHand;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerChangeDimensionPacket;
+import puregero.multipaper.externalserverprotocol.PlayerChangeGamemodePacket;
+import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
 // CraftBukkit end
 
 public class ServerPlayer extends Player {
@@ -219,12 +224,13 @@ public class ServerPlayer extends Player {
     private final TextFilter textFilter;
     private boolean textFilteringEnabled;
     private boolean allowsListing;
+    public boolean didMultiPaperJoin = false; // Multipaper
     private final ContainerSynchronizer containerSynchronizer;
     private final ContainerListener containerListener;
     private int containerCounter;
     public int latency;
     public boolean wonGame;
-    private int containerUpdateDelay; // Paper
+    public int containerUpdateDelay; // Paper // MultiPaper - make public
     public long loginTime; // Paper
     public int patrolSpawnDelay; // Paper - per player patrol spawns
     // Paper start - cancellable death event
@@ -1175,6 +1181,24 @@ public class ServerPlayer extends Player {
             }
             // Paper end
 
+            // MultiPaper start
+            ServerLevel destination = worldserver;
+            MultiPaper.forEachExternalServer(externalServer -> {
+                if (externalServer.getConnection() != null && externalServer.getConnection().isOpen()) {
+                    boolean subscribedToSoruce = externalServer.getConnection().subscribedWorlds.contains(worldserver1.getWorld().getName());
+                    boolean subscribedToDestination = externalServer.getConnection().subscribedWorlds.contains(destination.getWorld().getName());
+
+                    if (subscribedToSoruce && subscribedToDestination) {
+                        externalServer.getConnection().send(new PlayerChangeDimensionPacket(this, false));
+                    } else if (subscribedToDestination) {
+                        PlayerCreatePacket.sendPlayer(externalServer.getConnection(), this);
+                    } else if (subscribedToSoruce) {
+                        externalServer.getConnection().send(new PlayerRemovePacket(this));
+                    }
+                }
+            });
+            // MultiPaper end
+
             return this;
         }
     }
@@ -1835,6 +1859,8 @@ public class ServerPlayer extends Player {
                 this.setCamera(this);
             }
 
+            MultiPaper.broadcastPacketToExternalServers(this, new PlayerChangeGamemodePacket(this)); // MultiPaper
+
             this.onUpdateAbilities();
             this.updateEffectVisibility();
             return event; // Paper
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index b9f2f6713bd9e3431ddbf2a41f16cbda5739ef57..f0ec99341abc0cedb67c72a6d3ff6ff3cbc284d7 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -213,6 +213,7 @@ import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.SmithingInventory;
 import co.aikar.timings.MinecraftTimings; // Paper
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener {
@@ -1991,7 +1992,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         this.player.disconnect();
         // Paper start - Adventure
         quitMessage = quitMessage == null ? this.server.getPlayerList().remove(this.player) : this.server.getPlayerList().remove(this.player, quitMessage); // Paper - pass in quitMessage to fix kick message not being used
-        if ((quitMessage != null) && !quitMessage.equals(net.kyori.adventure.text.Component.empty())) {
+        if ((quitMessage != null) && !quitMessage.equals(net.kyori.adventure.text.Component.empty()) && MultiPaper.isRealPlayer(this.player)) { // MultiPaper - Only run for real players
             this.server.getPlayerList().broadcastMessage(PaperAdventure.asVanilla(quitMessage), ChatType.SYSTEM, Util.NIL_UUID);
             // Paper end
         }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index cd08f9b16c065be8f0eacaeba51d3e72d332daf9..cc8bdbb869434c98df58126607b687b154c7462a 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -13,14 +13,7 @@ import java.io.File;
 import java.net.SocketAddress;
 import java.nio.file.Path;
 import java.text.SimpleDateFormat;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.function.Function;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
@@ -118,6 +111,12 @@ import org.bukkit.event.player.PlayerJoinEvent;
 import org.bukkit.event.player.PlayerLoginEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerRespawnEvent;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerChangeDimensionPacket;
+import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRespawnPacket;
 // CraftBukkit end
 
 public abstract class PlayerList {
@@ -328,6 +327,7 @@ public abstract class PlayerList {
         if (!networkmanager.isConnected()) {
             return;
         }
+        MultiPaper.onPlayerJoin(player); // MultiPaper
         player.didPlayerJoinEvent = true;
         // Paper end
         TranslatableComponent chatmessage;
@@ -607,10 +607,10 @@ public abstract class PlayerList {
         }
 
         PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(entityplayer.getBukkitEntity(), leaveMessage, entityplayer.quitReason); // Paper - quit reason
-        if (entityplayer.didPlayerJoinEvent) this.cserver.getPluginManager().callEvent(playerQuitEvent); // Paper - if we disconnected before join ever fired, don't fire quit
+        if (entityplayer.didPlayerJoinEvent && MultiPaper.isRealPlayer(entityplayer)) this.cserver.getPluginManager().callEvent(playerQuitEvent); // Paper - if we disconnected before join ever fired, don't fire quit // MultiPaper - don't run for external players
         entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
 
-        if (server.isSameThread()) entityplayer.doTick(); // SPIGOT-924 // Paper - don't tick during emergency shutdowns (Watchdog)
+        if (server.isSameThread() && MultiPaper.isRealPlayer(entityplayer)) entityplayer.doTick(); // SPIGOT-924 // Paper - don't tick during emergency shutdowns (Watchdog) // MultiPaper - don't run for external players
         // CraftBukkit end
 
         // Paper start - Remove from collideRule team if needed
@@ -692,6 +692,8 @@ public abstract class PlayerList {
         this.cserver.getScoreboardManager().removePlayer(entityplayer.getBukkitEntity());
         // CraftBukkit end
 
+        MultiPaper.onPlayerDisconnect(entityplayer); // MultiPaper
+
         return entityplayer.didPlayerJoinEvent ? playerQuitEvent.quitMessage() : null; // CraftBukkit // Paper - Adventure // Paper - don't print quit if we never printed join
     }
 
@@ -821,6 +823,12 @@ public abstract class PlayerList {
 
     public ServerPlayer respawn(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
         // Paper end
+        // Multipaper start
+        if (MultiPaper.isExternalPlayer(entityplayer)) {
+            ((ExternalPlayer) entityplayer).externalServerConnection.send(new PlayerRespawnPacket(entityplayer, worldserver, flag, location, avoidSuffocation, respawnFlags));
+            return entityplayer;
+        }
+        // MultiPaper end
         entityplayer.stopRiding(); // CraftBukkit
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
@@ -998,6 +1006,25 @@ public abstract class PlayerList {
         // Paper end
 
         // CraftBukkit end
+
+        // MultiPaper start
+        boolean isRespawnFinal = isRespawn;
+        MultiPaper.forEachExternalServer(externalServer -> {
+            if (externalServer.getConnection() != null && externalServer.getConnection().isOpen()) {
+                boolean subscribedToSoruce = externalServer.getConnection().subscribedWorlds.contains(fromWorld.getName());
+                boolean subscribedToDestination = externalServer.getConnection().subscribedWorlds.contains(worldserver1.getWorld().getName());
+
+                if (subscribedToSoruce && subscribedToDestination) {
+                    externalServer.getConnection().send(new PlayerChangeDimensionPacket(entityplayer1, isRespawnFinal));
+                } else if (subscribedToDestination) {
+                    PlayerCreatePacket.sendPlayer(externalServer.getConnection(), entityplayer1);
+                } else if (subscribedToSoruce) {
+                    externalServer.getConnection().send(new PlayerRemovePacket(entityplayer1));
+                }
+            }
+        });
+        // MultiPaper end
+
         return entityplayer1;
     }
 
@@ -1008,6 +1035,20 @@ public abstract class PlayerList {
         this.sendPlayerPermissionLevel(player, i);
     }
 
+    // MultiPaper start - Add player manually
+    public void addPlayer(ServerPlayer player) {
+        players.add(player);
+        playersByUUID.put(player.getUUID(), player);
+        playersByName.put(player.getScoreboardName().toLowerCase(Locale.ROOT), player);
+    }
+
+    public void removePlayer(ServerPlayer player) {
+        players.remove(player);
+        playersByUUID.remove(player.getUUID());
+        playersByName.remove(player.getScoreboardName().toLowerCase(Locale.ROOT));
+    }
+    // MultiPaper end
+
     public void tick() {
         if (++this.sendAllPlayerInfoIn > 600) {
             // CraftBukkit start
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..bc4bafb2aa1accf0c19796780e3fbbcd62be0c33
--- /dev/null
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -0,0 +1,86 @@
+package puregero.multipaper;
+
+import com.mojang.authlib.GameProfile;
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+import net.minecraft.network.Connection;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import net.minecraft.world.level.GameType;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+
+import javax.annotation.Nullable;
+import java.net.InetSocketAddress;
+import java.util.UUID;
+
+public class ExternalPlayer extends ServerPlayer {
+
+    private static final Logger LOGGER = LogManager.getLogger(ExternalPlayer.class.getSimpleName());
+    public ExternalServerConnection externalServerConnection;
+    private final InetSocketAddress address;
+    private boolean sendPackets = true;
+
+    public static ExternalPlayer create(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address) {
+        return new ExternalPlayer(externalServerConnection, name, uuid, world, x, y, z, yaw, pitch, gamemode, address);
+    }
+
+    public ExternalPlayer(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address) {
+        super(((CraftServer) Bukkit.getServer()).getServer(), ((CraftWorld) Bukkit.getWorld(world)).getHandle(), new GameProfile(uuid, name));
+        this.externalServerConnection = externalServerConnection;
+        this.address = address;
+        this.isRealPlayer = true;
+        this.didPlayerJoinEvent = true;
+        this.valid = true;
+        this.onGround = true;
+        connection = new ServerGamePacketListenerImpl(getServer(), new ExternalPlayerConnection(PacketFlow.CLIENTBOUND), this);
+        setPos(x, y, z);
+        setYRot(yaw);
+        setXRot(pitch);
+        getServer().getPlayerList().addPlayer(this);
+        ((ServerLevel) level).addNewPlayer(this);
+        sendPackets = false;
+        containerMenu.transferTo(containerMenu, getBukkitEntity());
+        initInventoryMenu();
+        sendPackets = true;
+        gameMode.changeGameModeForPlayer(gamemode);
+        detectEquipmentUpdates();
+    }
+
+    @Override
+    public void tick() {
+        // Don't tick
+    }
+
+    private class ExternalPlayerConnection extends Connection {
+        public ExternalPlayerConnection(PacketFlow side) {
+            super(side);
+            this.address = ExternalPlayer.this.address;
+        }
+
+        @Override
+        public void setReadOnly() {
+            // Do nothing
+        }
+ 
+        @Override
+        public boolean isConnected() {
+            return true;
+        }
+
+        @Override
+        public void send(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> callback) {
+            if (sendPackets) {
+
+            } else {
+//                LOGGER.info("Not sending packet " + packet.getClass().getSimpleName());
+            }
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/ExternalServerConnection.java b/src/main/java/puregero/multipaper/ExternalServerConnection.java
index 0316e1d068e794f4c2d56bf8091fdcd420a7f03a..653b9500385803618051af46ea40aa1aa27b4e39 100644
--- a/src/main/java/puregero/multipaper/ExternalServerConnection.java
+++ b/src/main/java/puregero/multipaper/ExternalServerConnection.java
@@ -12,6 +12,8 @@ import io.netty.util.internal.SystemPropertyUtil;
 import net.minecraft.network.*;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.LazyLoadedValue;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -92,6 +94,17 @@ public class ExternalServerConnection extends ChannelInitializer<SocketChannel>
         } else {
             LOGGER.info("Using Minecraft's event loop");
         }
+
+        // And when this closes
+        channel.closeFuture().addListener(future -> {
+            if (future.isDone()) {
+                for (ServerPlayer player : DedicatedServer.getServer().getPlayerList().players) {
+                    if (player instanceof ExternalPlayer && ((ExternalPlayer) player).externalServerConnection == this) {
+                        MultiPaper.runSync(() -> player.connection.disconnect("External server disconnected"));
+                    }
+                }
+            }
+        });
     }
 
     @Override
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index cd4c4917b0266cb4dcba6bbaf96c96b09342bda6..f6fc3873bf53cbf1bc78438f37c32d7319cb8229 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -4,7 +4,12 @@ import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.craftbukkit.entity.CraftEntity;
 import puregero.multipaper.externalserverprotocol.ExternalServerPacket;
+import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -18,6 +23,7 @@ import java.util.function.Consumer;
 import java.util.function.Supplier;
 
 public class MultiPaper {
+
     private static MultiPaperConnection multiPaperConnection = null;
 
     public static MultiPaperConnection getConnection() {
@@ -80,6 +86,19 @@ public class MultiPaper {
         }
     }
 
+    public static void tick() {
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().players) {
+            if (player instanceof ExternalPlayer externalPlayer) {
+                // Copied from Paper start - Configurable container update tick rate
+                if (externalPlayer.containerMenu != externalPlayer.inventoryMenu && --externalPlayer.containerUpdateDelay <= 0) {
+                    externalPlayer.containerMenu.broadcastChanges();
+                    externalPlayer.containerUpdateDelay = externalPlayer.level.paperConfig.containerUpdateTickRate;
+                }
+                // Copied from Paper end
+            }
+        }
+    }
+
     public static void sendTickTime(long time, double tps) {
         try {
             getConnection().writeTickTime(time, tps);
@@ -140,4 +159,35 @@ public class MultiPaper {
     public static void broadcastPacketToExternalServers(ServerPlayer player, ExternalServerPacket packet) {
         broadcastPacketToExternalServers(player.getLevel().getWorld().getName(), packet);
     }
+
+    public static void onPlayerJoin(ServerPlayer player) {
+        player.didMultiPaperJoin = true;
+        forEachExternalServer(externalServer -> {
+            if (externalServer.getConnection() != null && externalServer.getConnection().isOpen() && externalServer.getConnection().subscribedWorlds.contains(player.getLevel().getWorld().getName())) {
+                PlayerCreatePacket.sendPlayer(externalServer.getConnection(), player);
+            }
+        });
+    }
+
+    public static void onPlayerDisconnect(ServerPlayer player) {
+        if (!(player instanceof ExternalPlayer) && player.didMultiPaperJoin) {
+            broadcastPacketToExternalServers(player, new PlayerRemovePacket(player));
+        }
+    }
+
+    public static boolean isRealPlayer(Entity entity) {
+        return entity instanceof ServerPlayer && !(entity instanceof ExternalPlayer);
+    }
+
+    public static boolean isRealPlayer(org.bukkit.entity.Entity bukkitEntity) {
+        return isRealPlayer(((CraftEntity) bukkitEntity).getHandle());
+    }
+
+    public static boolean isExternalPlayer(Entity entity) {
+        return entity instanceof ExternalPlayer;
+    }
+
+    public static boolean isExternalPlayer(org.bukkit.entity.Entity bukkitEntity) {
+        return isExternalPlayer(((CraftEntity) bukkitEntity).getHandle());
+    }
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index d6b8db5ad5a6ff2da1197e55129f1b30fa4cbad1..63df2405527b339b82de5e66880b4c67a1c5c51c 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -13,6 +13,11 @@ public class ExternalServerPacketSerializer {
     static {
         addPacket(HelloPacket.class, HelloPacket::new);
         addPacket(SubscribeToWorldPacket.class, SubscribeToWorldPacket::new);
+        addPacket(PlayerCreatePacket.class, PlayerCreatePacket::new);
+        addPacket(PlayerRemovePacket.class, PlayerRemovePacket::new);
+        addPacket(PlayerChangeGamemodePacket.class, PlayerChangeGamemodePacket::new);
+        addPacket(PlayerRespawnPacket.class, PlayerRespawnPacket::new);
+        addPacket(PlayerChangeDimensionPacket.class, PlayerChangeDimensionPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeDimensionPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeDimensionPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..28784d2cb62328bb087bd22485696ae0c359bbe8
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeDimensionPacket.java
@@ -0,0 +1,73 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PlayerChangeDimensionPacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final String world;
+    private final double x;
+    private final double y;
+    private final double z;
+    private final boolean reset;
+
+    public PlayerChangeDimensionPacket(ServerPlayer player, boolean reset) {
+        this.uuid = player.getUUID();
+        this.world = player.getLevel().convertable.getLevelId();
+        this.x = player.getX();
+        this.y = player.getY();
+        this.z = player.getZ();
+        this.reset = reset;
+    }
+
+    public PlayerChangeDimensionPacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        world = in.readUtf();
+        x = in.readDouble();
+        y = in.readDouble();
+        z = in.readDouble();
+        reset = in.readBoolean();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeUtf(world);
+        out.writeDouble(x);
+        out.writeDouble(y);
+        out.writeDouble(z);
+        out.writeBoolean(reset);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            // Remove from old world
+            player.getLevel().removePlayerImmediately(player, Entity.RemovalReason.DISCARDED);
+
+            player.setPosRaw(x, y, z);
+
+            if (reset) {
+                player.reset();
+            }
+
+            // Add to new world
+            player.setLevel(level);
+            player.unsetRemoved();
+            level.addRespawnedPlayer(player);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeGamemodePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeGamemodePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..a9814bbe4fc9eff864f30b389e88cb1375704de0
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeGamemodePacket.java
@@ -0,0 +1,37 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.GameType;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PlayerChangeGamemodePacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final GameType gamemode;
+
+    public PlayerChangeGamemodePacket(ServerPlayer player) {
+        this.uuid = player.getUUID();
+        this.gamemode = player.gameMode.getGameModeForPlayer();
+    }
+
+    public PlayerChangeGamemodePacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        gamemode = GameType.byId(in.readByte());
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeByte(gamemode.getId());
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> MinecraftServer.getServer().getPlayerList().getPlayer(uuid).gameMode.changeGameModeForPlayer(gamemode));
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..029c3b4624530c5ac0b996e470e479dcbe43c53b
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -0,0 +1,106 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.GameType;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.UnknownHostException;
+import java.util.UUID;
+
+public class PlayerCreatePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerCreatePacket.class.getSimpleName());
+
+    private final String name;
+    private final UUID uuid;
+    private final String world;
+    private final double x;
+    private final double y;
+    private final double z;
+    private final float yaw;
+    private final float pitch;
+    private final GameType gamemode;
+    private final byte[] ip;
+    private final short port;
+
+    private PlayerCreatePacket(ServerPlayer player) {
+        this.name = player.getScoreboardName();
+        this.uuid = player.getUUID();
+        this.world = player.getLevel().convertable.getLevelId();
+        this.x = player.getX();
+        this.y = player.getY();
+        this.z = player.getZ();
+        this.yaw = player.getYRot();
+        this.pitch = player.getXRot();
+        this.gamemode = player.gameMode.getGameModeForPlayer();
+        this.ip = ((InetSocketAddress) player.connection.connection.address).getAddress().getAddress();
+        this.port = (short) ((InetSocketAddress) player.connection.connection.address).getPort();
+    }
+
+    public PlayerCreatePacket(FriendlyByteBuf in) {
+        name = in.readUtf();
+        uuid = in.readUUID();
+        world = in.readUtf();
+        x = in.readDouble();
+        y = in.readDouble();
+        z = in.readDouble();
+        yaw = in.readFloat();
+        pitch = in.readFloat();
+        gamemode = GameType.byId(in.readByte());
+        ip = in.readByteArray();
+        port = in.readShort();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(name);
+        out.writeUUID(uuid);
+        out.writeUtf(world);
+        out.writeDouble(x);
+        out.writeDouble(y);
+        out.writeDouble(z);
+        out.writeFloat(yaw);
+        out.writeFloat(pitch);
+        out.writeByte(gamemode.getId());
+        out.writeByteArray(ip);
+        out.writeShort(port);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        LOGGER.info("Adding player " + name + " (" + uuid + ")");
+        MultiPaper.runSync(() -> {
+            ServerPlayer existingPlayer = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+            if (existingPlayer != null) {
+                LOGGER.warn("Trying to add external player " + name + " (" + uuid + "), but they're already online as a " + existingPlayer.getClass().getSimpleName() + ", kicking them");
+                existingPlayer.connection.disconnect("Logged in from another location");
+            }
+
+            InetSocketAddress address = null;
+            try {
+                address = new InetSocketAddress(InetAddress.getByAddress(ip), port & 0xFFFF);
+            } catch (UnknownHostException e) {
+                e.printStackTrace();
+            }
+
+            ExternalPlayer.create(connection, name, uuid, world, x, y, z, yaw, pitch, gamemode, address);
+        });
+    }
+
+    public static void sendPlayer(ExternalServerConnection connection, ServerPlayer player) {
+        if (player.isDeadOrDying()) {
+            // Don't send dead players
+            return;
+        }
+
+        connection.send(new PlayerCreatePacket(player));
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..d01a2ca89a83f6878faf9215cfd1d5123e9fed0e
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java
@@ -0,0 +1,45 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PlayerRemovePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerRemovePacket.class.getSimpleName());
+
+    private final UUID uuid;
+
+    public PlayerRemovePacket(ServerPlayer player) {
+        this.uuid = player.getUUID();
+    }
+
+    public PlayerRemovePacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn("Tried to remove a non-existent player with uuid " + uuid);
+                return;
+            }
+
+            player.connection.disconnect("Disconnected from external server");
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRespawnPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRespawnPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..4d92fd923e58058422f0cdaa7df47c6c3ead888b
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRespawnPacket.java
@@ -0,0 +1,86 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PlayerRespawnPacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final String world;
+    private final boolean alive;
+    private final double x;
+    private final double y;
+    private final double z;
+    private final float yaw;
+    private final float pitch;
+    private final boolean avoidSuffocation;
+    private final PlayerRespawnEvent.RespawnFlag[] respawnFlags;
+
+    public PlayerRespawnPacket(ServerPlayer player, ServerLevel worldserver, boolean alive, Location location, boolean avoidSuffocation, PlayerRespawnEvent.RespawnFlag[] respawnFlags) {
+        this.uuid = player.getUUID();
+        this.world = worldserver.convertable.getLevelId();
+        this.alive = alive;
+        this.x = location.getX();
+        this.y = location.getY();
+        this.z = location.getZ();
+        this.yaw = location.getYaw();
+        this.pitch = location.getPitch();
+        this.avoidSuffocation = avoidSuffocation;
+        this.respawnFlags = respawnFlags;
+    }
+
+    public PlayerRespawnPacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        world = in.readUtf();
+        alive = in.readBoolean();
+        x = in.readDouble();
+        y = in.readDouble();
+        z = in.readDouble();
+        yaw = in.readFloat();
+        pitch = in.readFloat();
+        avoidSuffocation = in.readBoolean();
+
+        respawnFlags = new PlayerRespawnEvent.RespawnFlag[in.readInt()];
+        for (int i = 0; i < respawnFlags.length; i++) {
+            respawnFlags[i] = PlayerRespawnEvent.RespawnFlag.valueOf(in.readUtf());
+        }
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeUtf(world);
+        out.writeBoolean(alive);
+        out.writeDouble(x);
+        out.writeDouble(y);
+        out.writeDouble(z);
+        out.writeFloat(yaw);
+        out.writeFloat(pitch);
+        out.writeBoolean(avoidSuffocation);
+
+        out.writeInt(respawnFlags.length);
+        for (PlayerRespawnEvent.RespawnFlag flag : respawnFlags) {
+            out.writeUtf(flag.name());
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            level.getServer().getPlayerList().respawn(player, level, alive, new Location(level.getWorld(), x, y, z, yaw, pitch), avoidSuffocation, respawnFlags);
+        });
+    }
+}
