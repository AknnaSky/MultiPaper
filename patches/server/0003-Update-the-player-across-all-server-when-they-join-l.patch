From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 29 Mar 2021 20:22:34 +1000
Subject: [PATCH] Update the player across all server when they join, leave and
 teleport


diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 8d9265c599569fda3db74b9f544c3afc9c0d8888..896def3c49e616602bdc29945fbd2a9f88375faa 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -282,7 +282,7 @@ public abstract class PlayerList {
         this.server.invalidateStatus();
 
         // MultiPaper start - Check if player should move servers
-        if (Zone.checkIfShouldMerge(player.getBukkitEntity())) {
+        if (Zone.checkIfShouldMerge(player.getBukkitEntity(), false)) {
             return;
         }
         // MultiPaper end
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 279e5e4d1f96884b23e1646eebbc399e1e47b851..0d3b825d56a4680cec5d6abee82e7ec7bdad775b 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -288,6 +288,14 @@ public class MultiPaper {
         packet.adventure$message = message;
         broadcastPacket(packet);
     }
+    
+    public static void sendPlayerUpdate(Player player, boolean online) {
+        try {
+            getConnection().sendPlayerUpdate(player, online);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
 
     public static void onStart() {
         try {
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index 426b80b4113c87e5d138736b337a1ba8db0b84f9..620bf76ce64b85c5341090c8cf9e3b70a74ad051 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -328,9 +328,31 @@ public class MultiPaperConnection extends Thread {
         LOGGER.info("Unsolicited chunk data of length: " + length + " bytes");
     }
 
-    public void lockedChunk(DataInputStream in, DataOutputSender out) throws IOException {
-        String locker = in.readUTF();
-        LOGGER.info("Unsolicited locked chunk with locker: " + (locker.length() == 0 ? "null" : locker));
+    public void playerUpdate(DataInputStream in, DataOutputSender out) throws IOException {
+        String server = in.readUTF();
+        ExternalServer externalServer = serversMap.get(server);
+        
+        boolean add = in.readBoolean();
+
+        UUID uuid = new UUID(in.readLong(), in.readLong());
+        String world = in.readUTF();
+        double x = in.readDouble();
+        double y = in.readDouble();
+        double z = in.readDouble();
+        float yaw = in.readFloat();
+        float pitch = in.readFloat();
+
+        if (Bukkit.getServer() != null && add) {
+            playerLocations.put(uuid, new Location(Bukkit.getWorld(world), x, y, z, yaw, pitch));
+        }
+
+        if (externalServer != null) {
+            if (add) {
+                externalServer.getPlayers().add(uuid);
+            } else {
+                externalServer.getPlayers().remove(uuid);
+            }
+        }
     }
 
     public void start(DataInputStream in, DataOutputSender out) throws IOException {
@@ -698,6 +720,21 @@ public class MultiPaperConnection extends Thread {
         }
     }
 
+    public void sendPlayerUpdate(Player player, boolean online) throws IOException {
+        DataOutputSender out = new DataOutputSender(this);
+        out.writeUTF("playerUpdate");
+        out.writeBoolean(online);
+        out.writeLong(player.getUniqueId().getMostSignificantBits());
+        out.writeLong(player.getUniqueId().getLeastSignificantBits());
+        out.writeUTF(player.getWorld().getName());
+        out.writeDouble(player.getLocation().getX());
+        out.writeDouble(player.getLocation().getY());
+        out.writeDouble(player.getLocation().getZ());
+        out.writeFloat(player.getLocation().getYaw());
+        out.writeFloat(player.getLocation().getPitch());
+        out.send(null);
+    }
+
     public HashMap<String, ExternalServer> getServersMap() {
         return serversMap;
     }
diff --git a/src/main/java/puregero/multipaper/MultiPaperListener.java b/src/main/java/puregero/multipaper/MultiPaperListener.java
index e928cae02d9f3327b998a2e98effb71cea5d0efa..50922eb0f6fd59c1c73d3294c1895ce58c6956c8 100644
--- a/src/main/java/puregero/multipaper/MultiPaperListener.java
+++ b/src/main/java/puregero/multipaper/MultiPaperListener.java
@@ -3,11 +3,13 @@ package puregero.multipaper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftChunk;
 import org.bukkit.entity.Player;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.EventPriority;
 import org.bukkit.event.Listener;
 import org.bukkit.event.entity.EntityPortalEvent;
+import org.bukkit.event.player.PlayerJoinEvent;
 import org.bukkit.event.player.PlayerKickEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
@@ -29,11 +31,17 @@ public class MultiPaperListener implements Listener {
 
     private HashSet<Player> kickedPlayers = new HashSet<>();
     
+    @EventHandler
+    public void onPlayerJoin(PlayerJoinEvent e) {
+        MultiPaper.sendPlayerUpdate(e.getPlayer(), true);
+    }
+    
     @EventHandler(priority = EventPriority.LOWEST)
     public void onPlayerQuit(PlayerQuitEvent e) {
         if (!kickedPlayers.remove(e.getPlayer())) {
             willSaveChunks(e.getPlayer());
         }
+        MultiPaper.sendPlayerUpdate(e.getPlayer(), false);
     }
 
     @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
@@ -48,7 +56,11 @@ public class MultiPaperListener implements Listener {
      */
     private void willSaveChunks(Player player) {
         Zone zone = new Zone(player.getWorld(), player.getLocation().getBlockX() >> 4, player.getLocation().getBlockZ() >> 4);
-        zone.forEach(MultiPaper::willSaveChunk);
+        zone.forEach(chunk -> {
+            if (chunk.isLoaded() && ((CraftChunk) chunk).getHandle().isNeedsSaving()) {
+                MultiPaper.willSaveChunk(chunk);
+            }
+        });
     }
     
     private static final List<PlayerTeleportEvent.TeleportCause> teleportCauseCanMoveServers = Arrays.asList(
@@ -61,7 +73,11 @@ public class MultiPaperListener implements Listener {
     public void onTeleport(PlayerTeleportEvent e) {
         if ((e.getTo().getWorld() != e.getFrom().getWorld() || e.getTo().distanceSquared(e.getFrom()) > 16 * 16)
                 && teleportCauseCanMoveServers.contains(e.getCause())) {
-            Bukkit.getScheduler().runTaskLater(plugin, () -> Zone.checkIfShouldMerge(e.getPlayer()), 0);
+            Bukkit.getScheduler().runTaskLater(plugin, () -> {
+                if (!Zone.checkIfShouldMerge(e.getPlayer(), e.getTo().getWorld() != e.getFrom().getWorld() || e.getTo().distanceSquared(e.getFrom()) > 512 * 512)) {
+                    MultiPaper.sendPlayerUpdate(e.getPlayer(), true);
+                }
+            }, 0);
         }
     }
     
diff --git a/src/main/java/puregero/multipaper/Zone.java b/src/main/java/puregero/multipaper/Zone.java
index 794f61347671df8edb2fe2fac6673172890b1ef6..cc548cc592aefcee3579594297267f40c428e50d 100644
--- a/src/main/java/puregero/multipaper/Zone.java
+++ b/src/main/java/puregero/multipaper/Zone.java
@@ -7,6 +7,7 @@ import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
 import org.bukkit.Location;
 import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftChunk;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.scheduler.CraftScheduler;
 import org.bukkit.entity.Player;
@@ -33,6 +34,8 @@ public class Zone implements Iterable<Chunk> {
 
         for (Player player : players) {
             ((CraftPlayer) player).getHandle().isBeingSentToAnotherServer = true;
+            LOGGER.info("Sending " + player.getName() + " to server " + server + ". Does the chunk they're in need saving? "
+                    + (player.getLocation().isChunkLoaded() && ((CraftChunk) player.getChunk()).getHandle().isNeedsSaving()));
             player.kick(Component.text("sendto:" + server));
 
             if (player.getLocation().isChunkLoaded()) {
@@ -65,7 +68,7 @@ public class Zone implements Iterable<Chunk> {
         return null;
     }
 
-    public static boolean checkIfShouldMerge(Player player) {
+    public static boolean checkIfShouldMerge(Player player, boolean teleportToQuietServer) {
         String serverAtLocation = getServer(player.getLocation());
         
         if (serverAtLocation != null) {
@@ -73,11 +76,15 @@ public class Zone implements Iterable<Chunk> {
             return true;
         }
         
+        if (!teleportToQuietServer) {
+            return false;
+        }
+        
         ExternalServer serverTo = MultiPaper.getMe();
 
         // Find server with lowest average tick time
         for (ExternalServer server : MultiPaper.getServers()) {
-            if (server.getAverageTickTime() < serverTo.getAverageTickTime() - 2 &&
+            if (server.getAverageTickTime() < serverTo.getAverageTickTime() - 20 &&
                     server.isAlive()) {
                 serverTo = server;
             }
