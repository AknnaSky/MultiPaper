From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 18 Mar 2022 01:43:33 +1000
Subject: [PATCH] Add ability to pardon floodgate players


diff --git a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
index 97ff2d8a5ac9ab76701447947ada1ad17a9cb78b..e2780cd0c278b2113b76401dd0ec79e10df9da90 100644
--- a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
+++ b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
@@ -57,6 +57,7 @@ import net.minecraft.gametest.framework.TestClassNameArgument;
 import net.minecraft.gametest.framework.TestFunctionArgument;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.commands.PardonCommand;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -82,6 +83,7 @@ public class ArgumentTypes {
         BrigadierArgumentSerializers.bootstrap();
         register("entity", EntityArgument.class, new EntityArgument.Serializer());
         register("game_profile", GameProfileArgument.class, new EmptyArgumentSerializer<>(GameProfileArgument::gameProfile));
+        BY_CLASS.put(PardonCommand.BanListGameProfileArgument.class, BY_CLASS.get(GameProfileArgument.class)); // MultiPaper - Add our own GameProfileArgument implementation
         register("block_pos", BlockPosArgument.class, new EmptyArgumentSerializer<>(BlockPosArgument::blockPos));
         register("column_pos", ColumnPosArgument.class, new EmptyArgumentSerializer<>(ColumnPosArgument::columnPos));
         register("vec3", Vec3Argument.class, new EmptyArgumentSerializer<>(Vec3Argument::vec3));
@@ -122,7 +124,6 @@ public class ArgumentTypes {
             register("test_argument", TestFunctionArgument.class, new EmptyArgumentSerializer<>(TestFunctionArgument::testFunctionArgument));
             register("test_class", TestClassNameArgument.class, new EmptyArgumentSerializer<>(TestClassNameArgument::testClassName));
         }
-
     }
 
     @Nullable
@@ -136,7 +137,7 @@ public class ArgumentTypes {
     }
 
     public static <T extends ArgumentType<?>> void serialize(FriendlyByteBuf buf, T type) {
-        ArgumentTypes.Entry<T> entry = get(type);
+        ArgumentTypes.Entry<T> entry = (Entry<T>) get(type); // MultiPaper - fix decompile error
         if (entry == null) {
             LOGGER.error("Could not serialize {} ({}) - will not be sent to client!", type, type.getClass());
             buf.writeResourceLocation(new ResourceLocation(""));
@@ -159,7 +160,7 @@ public class ArgumentTypes {
     }
 
     private static <T extends ArgumentType<?>> void serializeToJson(JsonObject json, T type) {
-        ArgumentTypes.Entry<T> entry = get(type);
+        ArgumentTypes.Entry<T> entry = (Entry<T>) get(type); // MultiPaper - fix decompile error
         if (entry == null) {
             LOGGER.error("Could not serialize argument {} ({})!", type, type.getClass());
             json.addProperty("type", "unknown");
diff --git a/src/main/java/net/minecraft/server/commands/PardonCommand.java b/src/main/java/net/minecraft/server/commands/PardonCommand.java
index 77670471a5bbfceeba92fda95f2585616f626416..8579415159435e59d4faaacc47c66d0502ee7bd8 100644
--- a/src/main/java/net/minecraft/server/commands/PardonCommand.java
+++ b/src/main/java/net/minecraft/server/commands/PardonCommand.java
@@ -2,16 +2,21 @@ package net.minecraft.server.commands;
 
 import com.mojang.authlib.GameProfile;
 import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import java.util.Collection;
+import java.util.Collections;
+
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.SharedSuggestionProvider;
 import net.minecraft.commands.arguments.GameProfileArgument;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.players.UserBanList;
+import net.minecraft.server.players.UserBanListEntry;
 
 public class PardonCommand {
     private static final SimpleCommandExceptionType ERROR_NOT_BANNED = new SimpleCommandExceptionType(new TranslatableComponent("commands.pardon.failed"));
@@ -19,13 +24,38 @@ public class PardonCommand {
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
         dispatcher.register(Commands.literal("pardon").requires((source) -> {
             return source.hasPermission(3);
-        }).then(Commands.argument("targets", GameProfileArgument.gameProfile()).suggests((context, builder) -> {
+        }).then(Commands.argument("targets", new BanListGameProfileArgument()).suggests((context, builder) -> { // MultiPaper - also get gameprofiles from the ban list
             return SharedSuggestionProvider.suggest(context.getSource().getServer().getPlayerList().getBans().getUserList(), builder);
         }).executes((context) -> {
             return pardonPlayers(context.getSource(), GameProfileArgument.getGameProfiles(context, "targets"));
         })));
     }
 
+    // MultiPaper start - also get gameprofiles from the ban list
+    public static class BanListGameProfileArgument extends GameProfileArgument {
+        @Override
+        public GameProfileArgument.Result parse(StringReader stringReader) throws CommandSyntaxException {
+            int cursor = stringReader.getCursor();
+
+            while(stringReader.canRead() && stringReader.peek() != ' ') {
+                stringReader.skip();
+            }
+
+            String username = stringReader.getString().substring(cursor, stringReader.getCursor());
+
+            for (UserBanListEntry entry : MinecraftServer.getServer().getPlayerList().getBans().getEntries()) {
+                if (entry.getUser() != null && entry.getUser().getName() != null && entry.getUser().getName().equalsIgnoreCase(username)) {
+                    return (source) -> Collections.singleton(entry.getUser());
+                }
+            }
+
+            stringReader.setCursor(cursor);
+
+            return super.parse(stringReader);
+        }
+    }
+    // MultiPaper end
+
     private static int pardonPlayers(CommandSourceStack source, Collection<GameProfile> targets) throws CommandSyntaxException {
         UserBanList userBanList = source.getServer().getPlayerList().getBans();
         int i = 0;
