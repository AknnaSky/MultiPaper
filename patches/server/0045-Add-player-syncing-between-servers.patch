From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 15 Nov 2021 20:30:35 +1000
Subject: [PATCH] Add player syncing between servers


diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index 17ebc0ac3d4c91d6818c79e8821681b668bd95c6..e0dc397e12c8e1a07e50102f08bb248b42fda6ac 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -603,7 +603,7 @@ public class Metrics {
                     return minecraftVersion;
                 }));
 
-                metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
+                metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> (int) Bukkit.getOnlinePlayers().stream().filter(MultiPaper::isRealPlayer).count())); // MultiPaper
                 metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
                 metrics.addCustomChart(new Metrics.SimplePie("multipaper_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown")); // Tuinity - we have our own bstats page // Airplane // MultiPaper
                 metrics.addCustomChart(new Metrics.SimplePie("total_servers", () -> String.valueOf(MultiPaper.getConnection().getServersMap().values().stream().filter(ExternalServer::isAlive).count()))); // MultiPaper
diff --git a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
index 4eadc15f747528b59349f095171dd5a649a46ed9..6824c3da571d9fcf9c045b6ccbbdf73fac786abc 100644
--- a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
@@ -22,6 +22,8 @@ import net.minecraft.server.level.TicketType;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.LevelChunk;
+import puregero.multipaper.MultiPaper;
+
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.List;
@@ -448,6 +450,8 @@ public final class PlayerChunkLoader {
 
             this.chunkSendWaitQueue.pollFirst();
 
+            if (MultiPaper.isExternalPlayer(data.player)) continue; // MultiPaper - don't send chunks to ExternalPlayers
+
             this.chunkSendQueue.add(data);
         }
 
@@ -867,6 +871,10 @@ public final class PlayerChunkLoader {
             this.player.needsChunkCenterUpdate = true;
             this.loader.broadcastMap.addOrUpdate(this.player, centerChunkX, centerChunkZ, sendViewDistance);
             this.player.needsChunkCenterUpdate = false;
+
+            // MultiPaper start - Don't load chunks for an ExternalPlayer, but do broadcast changes to us
+            if (MultiPaper.isExternalPlayer(this.player)) return;
+
             this.loader.loadMap.addOrUpdate(this.player, centerChunkX, centerChunkZ, loadViewDistance);
             this.loader.loadTicketCleanup.addOrUpdate(this.player, centerChunkX, centerChunkZ, loadViewDistance + 1);
             this.loader.tickMap.addOrUpdate(this.player, centerChunkX, centerChunkZ, tickViewDistance);
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 744f7b717f14a070d5a4be0b35e7f422694fb407..210f0714534cb4c2e9701199666811112a201117 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -214,6 +214,7 @@ import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.SmithingInventory;
 import org.bukkit.util.NumberConversions;
 import co.aikar.timings.MinecraftTimings; // Paper
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener {
@@ -1965,7 +1966,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         this.player.disconnect();
         // Paper start - Adventure
         quitMessage = quitMessage == null ? this.server.getPlayerList().disconnect(this.player) : this.server.getPlayerList().disconnect(this.player, quitMessage); // Paper - pass in quitMessage to fix kick message not being used
-        if ((quitMessage != null) && !quitMessage.equals(net.kyori.adventure.text.Component.empty())) {
+        if ((quitMessage != null) && !quitMessage.equals(net.kyori.adventure.text.Component.empty()) && MultiPaper.isRealPlayer(this.player)) { // MultiPaper - Only run for real players
             this.server.getPlayerList().broadcastMessage(PaperAdventure.asVanilla(quitMessage), ChatType.SYSTEM, Util.NIL_UUID);
             // Paper end
         }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index eaa005c1c9b4386bcdbe1d6eb28c3eca7635066c..1f962cf94e6e6b592281fca5fb8c5eea99ddccb2 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -13,14 +13,7 @@ import java.io.File;
 import java.net.SocketAddress;
 import java.nio.file.Path;
 import java.text.SimpleDateFormat;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.function.Function;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
@@ -119,6 +112,7 @@ import org.bukkit.event.player.PlayerJoinEvent;
 import org.bukkit.event.player.PlayerLoginEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerRespawnEvent;
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public abstract class PlayerList {
@@ -325,6 +319,7 @@ public abstract class PlayerList {
         if (!networkmanager.isConnected()) {
             return;
         }
+        MultiPaper.onPlayerJoin(player); // MultiPaper
         player.didPlayerJoinEvent = true;
         // Paper end
         TranslatableComponent chatmessage;
@@ -604,7 +599,7 @@ public abstract class PlayerList {
         }
 
         PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(entityplayer.getBukkitEntity(), leaveMessage, entityplayer.quitReason); // Paper - quit reason
-        if (entityplayer.didPlayerJoinEvent) this.cserver.getPluginManager().callEvent(playerQuitEvent); // Paper - if we disconnected before join ever fired, don't fire quit
+        if (entityplayer.didPlayerJoinEvent && MultiPaper.isRealPlayer(entityplayer)) this.cserver.getPluginManager().callEvent(playerQuitEvent); // Paper - if we disconnected before join ever fired, don't fire quit // MultiPaper - don't run for external players
         entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
 
         if (server.isSameThread()) entityplayer.doTick(); // SPIGOT-924 // Paper - don't tick during emergency shutdowns (Watchdog)
@@ -690,6 +685,8 @@ public abstract class PlayerList {
         this.cserver.getScoreboardManager().removePlayer(entityplayer.getBukkitEntity());
         // CraftBukkit end
 
+        MultiPaper.onPlayerDisconnect(entityplayer); // MultiPaper
+
         return entityplayer.didPlayerJoinEvent ? playerQuitEvent.quitMessage() : null; // CraftBukkit // Paper - Adventure // Paper - don't print quit if we never printed join
     }
 
@@ -1009,6 +1006,20 @@ public abstract class PlayerList {
         this.sendPlayerPermissionLevel(player, i);
     }
 
+    // MultiPaper start - Add player manually
+    public void addPlayer(ServerPlayer player) {
+        players.add(player);
+        playersByUUID.put(player.getUUID(), player);
+        playersByName.put(player.getScoreboardName().toLowerCase(Locale.ROOT), player);
+    }
+
+    public void removePlayer(ServerPlayer player) {
+        players.remove(player);
+        playersByUUID.remove(player.getUUID());
+        playersByName.remove(player.getScoreboardName().toLowerCase(Locale.ROOT));
+    }
+    // MultiPaper end
+
     public void tick() {
         if (++this.sendAllPlayerInfoIn > 600) {
             // CraftBukkit start
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..cadbd24322a2bea589d6d83b22d8cc0f5619d074
--- /dev/null
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -0,0 +1,64 @@
+package puregero.multipaper;
+
+import com.mojang.authlib.GameProfile;
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+import net.minecraft.network.Connection;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+
+import javax.annotation.Nullable;
+import java.util.UUID;
+
+public class ExternalPlayer extends ServerPlayer {
+
+    private static final Logger LOGGER = LogManager.getLogger(ExternalPlayer.class.getSimpleName());
+    public ExternalServerConnection externalServerConnection;
+
+    public static void create(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z) {
+        new ExternalPlayer(externalServerConnection, name, uuid, world, x, y, z);
+    }
+
+    public ExternalPlayer(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z) {
+        super(((CraftServer) Bukkit.getServer()).getServer(), ((CraftWorld) Bukkit.getWorld(world)).getHandle(), new GameProfile(uuid, name));
+        this.externalServerConnection = externalServerConnection;
+        this.isRealPlayer = true;
+        this.didPlayerJoinEvent = true;
+        this.valid = true;
+        connection = new ServerGamePacketListenerImpl(getServer(), new ExternalPlayerConnection(PacketFlow.CLIENTBOUND), this);
+        setPos(x, y, z);
+        getServer().getPlayerList().addPlayer(this);
+        ((ServerLevel) level).addNewPlayer(this);
+        containerMenu.transferTo(containerMenu, getBukkitEntity());
+        initInventoryMenu();
+    }
+
+    private class ExternalPlayerConnection extends Connection {
+        public ExternalPlayerConnection(PacketFlow side) {
+            super(side);
+        }
+
+        @Override
+        public void setReadOnly() {
+            // Do nothing
+        }
+ 
+        @Override
+        public boolean isConnected() {
+            return true;
+        }
+
+        @Override
+        public void send(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> callback) {
+
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/ExternalServerConnection.java b/src/main/java/puregero/multipaper/ExternalServerConnection.java
index 519333b7d1629a3e8105d11e911df0b7430e00c5..11ee85df2d7ed546c4f7b05ff668d6278d73d1b3 100644
--- a/src/main/java/puregero/multipaper/ExternalServerConnection.java
+++ b/src/main/java/puregero/multipaper/ExternalServerConnection.java
@@ -1,5 +1,7 @@
 package puregero.multipaper;
 
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.level.ServerPlayer;
 import puregero.multipaper.externalserverprotocol.ExternalServerPacket;
 import puregero.multipaper.externalserverprotocol.ExternalServerPacketSerializer;
 import puregero.multipaper.externalserverprotocol.HelloPacket;
@@ -50,6 +52,12 @@ public class ExternalServerConnection extends Thread implements Closeable {
             // Ignore
         }
 
+        for (ServerPlayer player : DedicatedServer.getServer().getPlayerList().players) {
+            if (player instanceof ExternalPlayer && ((ExternalPlayer) player).externalServerConnection == this) {
+                MultiPaper.runSync(() -> player.connection.disconnect("External server disconnected"));
+            }
+        }
+
         if (externalServer != null && externalServer.getConnection() == this) {
             externalServer.setConnection(null);
         }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 2382f0980bef9704f227a331b5a441d748aff268..253541e5f55b816116898ab239925c65b54da2e7 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -1,10 +1,21 @@
 package puregero.multipaper;
 
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import puregero.multipaper.externalserverprotocol.ExternalServerPacket;
+import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
+
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
+import java.util.Collection;
+import java.util.function.Supplier;
 
 public class MultiPaper {
+
     private static MultiPaperConnection multiPaperConnection = null;
     private static ExternalServerSocket externalServerSocket = null;
 
@@ -32,9 +43,18 @@ public class MultiPaper {
         return bungeeCordName;
     }
 
+    public static void runSync(Runnable runnable) {
+        MinecraftServer.getServer().scheduleOnMain(runnable);
+    }
+
+    public static void tick() {
+    }
+
     public static void sendTickTime(long time, double tps) {
         try {
             getConnection().writeTickTime(time, tps);
+
+            tick();
         } catch (IOException e) {
             e.printStackTrace();
         }
@@ -48,4 +68,49 @@ public class MultiPaper {
             e.printStackTrace();
         }
     }
+
+    public static void onPlayerJoin(ServerPlayer player) {
+        broadcastPacketToExternalServers(new PlayerCreatePacket(player));
+    }
+
+    public static void onPlayerDisconnect(ServerPlayer player) {
+        if (!(player instanceof ExternalPlayer)) {
+            broadcastPacketToExternalServers(new PlayerRemovePacket(player));
+        }
+    }
+
+    public static void broadcastPacketToExternalServers(ExternalServerPacket packet) {
+        broadcastPacketToExternalServers(getConnection().getServersMap().values(), packet);
+    }
+
+    public static void broadcastPacketToExternalServers(Collection<ExternalServer> externalServers, ExternalServerPacket packet) {
+        broadcastPacketToExternalServers(externalServers, () -> packet);
+    }
+
+    public static void broadcastPacketToExternalServers(Collection<ExternalServer> externalServers, Supplier<ExternalServerPacket> generatePacketIfNeeded) {
+        if (!externalServers.isEmpty()) {
+            ExternalServerPacket packet = generatePacketIfNeeded.get();
+            externalServers.forEach(externalServer -> {
+                if (externalServer.getConnection() != null) {
+                    externalServer.getConnection().send(packet);
+                }
+            });
+        }
+    }
+
+    public static boolean isRealPlayer(Entity entity) {
+        return entity instanceof ServerPlayer && !(entity instanceof ExternalPlayer);
+    }
+
+    public static boolean isRealPlayer(org.bukkit.entity.Entity bukkitEntity) {
+        return isRealPlayer(((CraftEntity) bukkitEntity).getHandle());
+    }
+
+    public static boolean isExternalPlayer(Entity entity) {
+        return entity instanceof ExternalPlayer;
+    }
+
+    public static boolean isExternalPlayer(org.bukkit.entity.Entity bukkitEntity) {
+        return isExternalPlayer(((CraftEntity) bukkitEntity).getHandle());
+    }
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacket.java
index 81d61a2d671fedd031eb2725ac3ab45622e196b1..ae0855ca9cc5328b2fad1cd505a28ce44f57acaa 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacket.java
@@ -2,8 +2,10 @@ package puregero.multipaper.externalserverprotocol;
 
 import puregero.multipaper.ExternalServerConnection;
 
+import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
+import java.util.UUID;
 
 public abstract class ExternalServerPacket {
 
@@ -11,4 +13,13 @@ public abstract class ExternalServerPacket {
 
     public abstract void write(DataOutputStream out) throws IOException;
 
+    protected UUID readUUID(DataInputStream in) throws IOException {
+        return new UUID(in.readLong(), in.readLong());
+    }
+
+    protected void writeUUID(DataOutputStream out, UUID uuid) throws IOException {
+        out.writeLong(uuid.getMostSignificantBits());
+        out.writeLong(uuid.getLeastSignificantBits());
+    }
+
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index c21f3dc975820b3d979a4fc5c0fa981296375f0b..135253cbc89fa5bd4fb7cd95bc58051fc8d17de5 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -13,6 +13,8 @@ public class ExternalServerPacketSerializer {
     private static final List<IOExceptionFunction<DataInputStream, ExternalServerPacket>> PACKET_DESERIALIZERS = new ArrayList<>();
     static {
         addPacket(HelloPacket.class, HelloPacket::new);
+        addPacket(PlayerCreatePacket.class, PlayerCreatePacket::new);
+        addPacket(PlayerRemovePacket.class, PlayerRemovePacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, IOExceptionFunction<DataInputStream, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..152f91480a3a453a7dd55c1c28c5c6e5bea41cc0
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -0,0 +1,59 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerCreatePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerCreatePacket.class.getSimpleName());
+
+    private final String name;
+    private final UUID uuid;
+    private final String world;
+    private final double x;
+    private final double y;
+    private final double z;
+
+    public PlayerCreatePacket(ServerPlayer player) {
+        this.name = player.getScoreboardName();
+        this.uuid = player.getUUID();
+        this.world = player.getLevel().convertable.getLevelId();
+        this.x = player.getX();
+        this.y = player.getY();
+        this.z = player.getZ();
+    }
+
+    public PlayerCreatePacket(DataInputStream in) throws IOException {
+        name = in.readUTF();
+        uuid = readUUID(in);
+        world = in.readUTF();
+        x = in.readDouble();
+        y = in.readDouble();
+        z = in.readDouble();
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        out.writeUTF(name);
+        writeUUID(out, uuid);
+        out.writeUTF(world);
+        out.writeDouble(x);
+        out.writeDouble(y);
+        out.writeDouble(z);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        LOGGER.info("Adding player " + name + " (" + uuid + ")");
+        MultiPaper.runSync(() -> ExternalPlayer.create(connection, name, uuid, world, x, y, z));
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..b2012d93a098ddacf707159b7fccd0a1820776ae
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java
@@ -0,0 +1,45 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerRemovePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerRemovePacket.class.getSimpleName());
+
+    private final UUID uuid;
+
+    public PlayerRemovePacket(ServerPlayer player) {
+        this.uuid = player.getUUID();
+    }
+
+    public PlayerRemovePacket(DataInputStream in) throws IOException {
+        uuid = readUUID(in);
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+        if (player == null) {
+            LOGGER.warn("Tried to remove a non-existent player with uuid " + uuid);
+            return;
+        }
+
+        MultiPaper.runSync(() -> player.connection.disconnect("Disconnected from external server"));
+    }
+}
