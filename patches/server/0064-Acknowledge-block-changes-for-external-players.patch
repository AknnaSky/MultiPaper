From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 10 Jul 2022 21:13:49 +1000
Subject: [PATCH] Acknowledge block changes for external players


diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 1e57d3e394fb710bf866ddd2d2de51ab6caf1da9..72f97a8d37048cd5269145b7e6b238f4b2e2fe21 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -242,6 +242,7 @@ import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.SmithingInventory;
 import puregero.multipaper.ExternalPlayer;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperAckBlockChangesHandler;
 import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
 // CraftBukkit end
 
@@ -257,7 +258,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     public Runnable playerJoinReady; // Paper
     public ServerPlayer player;
     private int tickCount;
-    private int ackBlockChangesUpTo = -1;
+    public int ackBlockChangesUpTo = -1; // MultiPaper - make public
     private long keepAliveTime = Util.getMillis();
     private boolean keepAlivePending;
     private long keepAliveChallenge;
@@ -2149,6 +2150,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             throw new IllegalArgumentException("Expected packet sequence nr >= 0");
         } else {
             this.ackBlockChangesUpTo = Math.max(sequence, this.ackBlockChangesUpTo);
+            MultiPaperAckBlockChangesHandler.onAckNeeded(this.player); // MultiPaper
         }
     }
 
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 89e4033565822a7e1c2f4129bb066eb9b3ee6f4f..bde6b20066576a1d366c24f9d1a4578587ae0267 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -134,6 +134,8 @@ public class MultiPaper {
                 }
             });
         });
+
+        MultiPaperAckBlockChangesHandler.tick();
     }
 
     public static void sendTickTime(long time, double tps) {
diff --git a/src/main/java/puregero/multipaper/MultiPaperAckBlockChangesHandler.java b/src/main/java/puregero/multipaper/MultiPaperAckBlockChangesHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..c71c4e08696dc749f47b477df43d74d3d148c26b
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperAckBlockChangesHandler.java
@@ -0,0 +1,29 @@
+package puregero.multipaper;
+
+import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
+import net.minecraft.network.protocol.game.ClientboundBlockChangedAckPacket;
+import net.minecraft.server.level.ServerPlayer;
+
+import java.util.Set;
+
+public class MultiPaperAckBlockChangesHandler {
+    private final static Set<ExternalPlayer> ackBlockChangesQueue = new ObjectLinkedOpenHashSet<>(); // Linked set for faster iteration
+
+    public static void tick() {
+        if (!ackBlockChangesQueue.isEmpty()) {
+            for (ExternalPlayer player : ackBlockChangesQueue) {
+                if (player.connection.ackBlockChangesUpTo > -1) {
+                    player.connection.send(new ClientboundBlockChangedAckPacket(player.connection.ackBlockChangesUpTo));
+                    player.connection.ackBlockChangesUpTo = -1;
+                }
+            }
+            ackBlockChangesQueue.clear();
+        }
+    }
+
+    public static void onAckNeeded(ServerPlayer player) {
+        if (player instanceof ExternalPlayer externalPlayer) {
+            ackBlockChangesQueue.add(externalPlayer);
+        }
+    }
+}
