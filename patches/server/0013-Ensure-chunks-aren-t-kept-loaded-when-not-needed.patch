From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 26 Jun 2021 19:05:51 +1000
Subject: [PATCH] Ensure chunks aren't kept loaded when not needed


diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index f1ba403f897d7cff56b37dd3b46f026b551ce9ec..1a1b62cfddb7322a21822b221399b3ac0096c9a8 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -1,5 +1,6 @@
 package puregero.multipaper;
 
+import it.unimi.dsi.fastutil.longs.LongSet;
 import net.kyori.adventure.text.Component;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.Util;
@@ -11,6 +12,9 @@ import net.minecraft.network.protocol.game.ClientboundChatPacket;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.level.Ticket;
+import net.minecraft.server.level.TicketType;
+import net.minecraft.util.SortedArraySet;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.LevelChunk;
@@ -74,8 +78,68 @@ public class MultiPaper {
                     }
                 });
             }
+            
+            checkChunkTickets(world);
         });
     }
+    
+    private static final List<Ticket<?>> ticketsToRemove = new ArrayList<>();
+    private static void checkChunkTickets(World world) {
+        // Get a random chunk in the world
+        LongSet keys = ((CraftWorld) world).getHandle().getChunkSource().distanceManager.tickets.keySet();
+        
+        if (keys.isEmpty()) {
+            return;
+        }
+        
+        int i = 0;
+        int index = (int) (Math.random() * keys.size());
+        long key;
+        Iterator<Long> iterator = keys.iterator();
+        do {
+            key = iterator.next();
+        } while (i++ < index);
+
+        // Get tickets for this chunk
+        SortedArraySet<Ticket<?>> tickets = ((CraftWorld) world).getHandle().getChunkSource().distanceManager.tickets.get(key);
+        if (tickets == null) {
+            return;
+        }
+        ticketsToRemove.clear();
+        for (Ticket<?> ticket : tickets) {
+            if (ticket.getType() == TicketType.PLAYER) {
+                ticketsToRemove.add(ticket);
+            }
+        }
+        
+        // No tickets to remove, exit
+        if (ticketsToRemove.isEmpty()) {
+            return;
+        }
+        
+        // Check if a player is nearby
+        for (Player player : world.getPlayers()) {
+            int cx = player.getLocation().getBlockX() >> 4;
+            int cz = player.getLocation().getBlockZ() >> 4;
+            int distance = Math.max(Math.abs(ChunkPos.getX(key) - cx), Math.abs(ChunkPos.getZ(key) - cz));
+            if (distance <= ((CraftWorld) world).getHandle().chunkSource.chunkMap.playerChunkManager.getLoadDistance() + 5) {
+                // Player is within load distance
+                return;
+            }
+        }
+        
+        // Generate a human readable string of the tickets
+        // and remove the invalid tickets!!!
+        String ticketsStr = "";
+        String sep = "";
+        for (Ticket ticket : ticketsToRemove) {
+            ((CraftWorld) world).getHandle().chunkSource.distanceManager.removeTicket(ticket.getType(), new ChunkPos(key), ticket.getTicketLevel(), ticket.key);
+            ticketsStr += sep + ticket.getType() + ":" + ticket.getTicketLevel();
+            sep = ", ";
+        }
+        
+        LOGGER.info("Removing tickets " + ticketsStr + " for chunk " + world.getName() + " " + ChunkPos.getX(key) + "," + ChunkPos.getZ(key) + " as no players are in range");
+    }
 
     private static void checkIfPlayersNeedToBeMoved() {
         try {
