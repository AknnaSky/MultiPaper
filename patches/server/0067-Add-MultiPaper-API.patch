From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 9 Dec 2021 18:10:17 +1000
Subject: [PATCH] Add MultiPaper API


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index db344e5b9f96f317a232304587e6b1673fc6067d..ed60b889abae8972b625bb84762166584eb7ac1f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -46,6 +46,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.entity.Entity;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
+import puregero.multipaper.MultiPaper;
 
 public class CraftChunk implements Chunk {
     private WeakReference<net.minecraft.world.level.chunk.LevelChunk> weakChunk;
@@ -213,6 +214,20 @@ public class CraftChunk implements Chunk {
         return this.getWorld().unloadChunk(this.getX(), this.getZ(), save);
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isExternalChunk() {
+        return MultiPaper.isChunkExternal(worldServer.getChunkIfLoadedImmediately(getX(), getZ()));
+    }
+
+    @Override
+    public boolean isLocalChunk() {
+        return MultiPaper.isChunkLocal(worldServer.getChunkIfLoadedImmediately(getX(), getZ()));
+    }
+
+    // MultiPaper end
+
     @Override
     public boolean isForceLoaded() {
         return this.getWorld().isChunkForceLoaded(this.getX(), this.getZ());
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index e4efac7522292897911eb822c7c6786eb01aa4bf..369d3e19a8cb05d07f820da9466fa8753a0581d7 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -460,6 +460,20 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return this.isChunkLoaded(x, z);
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isChunkExternal(int x, int z) {
+        return MultiPaper.isChunkExternal(world.getChunkIfLoaded(x, z));
+    }
+
+    @Override
+    public boolean isChunkLocal(int x, int z) {
+        return MultiPaper.isChunkLocal(world.getChunkIfLoaded(x, z));
+    }
+
+    // MultiPaper end
+
     @Override
     public boolean loadChunk(int x, int z, boolean generate) {
         org.spigotmc.AsyncCatcher.catchOp("chunk load"); // Spigot
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index ca320ef8a28fe15b32197669419981c4c2fcafd9..0c32120d4a49eeb017b85492d7a132b7e9cec7f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -55,6 +55,7 @@ import org.bukkit.util.BlockVector;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
+import puregero.multipaper.MultiPaper;
 
 public class CraftBlock implements Block {
     private final net.minecraft.world.level.LevelAccessor world;
@@ -446,6 +447,20 @@ public class CraftBlock implements Block {
         return this.getBlockPower(BlockFace.SELF);
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isInExternalChunk() {
+        return MultiPaper.isChunkExternal(world.getChunkIfLoadedImmediately(getX() >> 4, getZ() >> 4));
+    }
+
+    @Override
+    public boolean isInLocalChunk() {
+        return MultiPaper.isChunkLocal(world.getChunkIfLoadedImmediately(getX() >> 4, getZ() >> 4));
+    }
+
+    // MultiPaper end
+
     @Override
     public boolean isEmpty() {
         return this.getNMS().isAir();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 5aae88e20bc04560d6ad52cfcaa872d28bfcee8f..c5ffedeef4d2e3a32f84a4ff9d4d86936bf4fc88 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -181,6 +181,7 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
+import puregero.multipaper.MultiPaper;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
@@ -613,6 +614,20 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return this.entity.getId();
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isInExternalChunk() {
+        return MultiPaper.isChunkExternal(entity.level.getChunkIfLoaded(entity.blockPosition()));
+    }
+
+    @Override
+    public boolean isInLocalChunk() {
+        return MultiPaper.isChunkLocal(entity.level.getChunkIfLoaded(entity.blockPosition()));
+    }
+
+    // MultiPaper end
+
     @Override
     public int getFireTicks() {
         return entity.remainingFireTicks;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 83e1c9aabba0d1b3b3c6c7a76a87bdb5bbb9fc7b..aeb4abae251affbd99563da83e6d147fde3ad49d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -31,6 +31,7 @@ import net.minecraft.Util;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.StringTag;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
@@ -139,12 +140,15 @@ import org.jetbrains.annotations.NotNull;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerDataUpdatePacket;
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
     private long firstPlayed = 0;
     private long lastPlayed = 0;
     private boolean hasPlayedBefore = false;
+    public HashMap<String, String> data = new HashMap<>(); // MultiPaper
+    public HashMap<String, String> persistentData = new HashMap<>(); // MultiPaper
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
     private final Map<UUID, Set<WeakReference<Plugin>>> hiddenEntities = new HashMap<>();
@@ -944,6 +948,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             net.minecraft.util.Mth.floor(loc.getZ()) >> 4), 28, 3); // Load area high priority
         return super.teleportAsync(loc, cause);
     }
+
+    @Override
+    public boolean isInExternalChunk() {
+        return false;
+    }
+
+    @Override
+    public boolean isInLocalChunk() {
+        return false;
+    }
     // Paper end
 
     @Override
@@ -1097,6 +1111,42 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isExternalPlayer() {
+        return MultiPaper.isExternalPlayer(this);
+    }
+
+    @Override
+    public boolean isLocalPlayer() {
+        return MultiPaper.isRealPlayer(this);
+    }
+
+    @Override
+    public String getData(String key) {
+        return data.get(key);
+    }
+
+    @Override
+    public void setData(String key, String value) {
+        data.put(key, value);
+        MultiPaper.broadcastPacketToExternalServers(new PlayerDataUpdatePacket(this, false, key, value));
+    }
+
+    @Override
+    public String getPersistentData(String key) {
+        return persistentData.get(key);
+    }
+
+    @Override
+    public void setPersistentData(String key, String value) {
+        persistentData.put(key, value);
+        MultiPaper.broadcastPacketToExternalServers(new PlayerDataUpdatePacket(this, true, key, value));
+    }
+
+    // MultiPaper end
+
     @Override
     public Location getBedLocation() {
         Preconditions.checkState(isSleeping(), "Not sleeping");
@@ -1635,6 +1685,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 handle.keepLevel = data.getBoolean("keepLevel");
             }
         }
+
+        // MultiPaper start - store persistent data
+        if (nbttagcompound.contains("MultiPaperPersistentData")) {
+            CompoundTag multipaperPersistentData = nbttagcompound.getCompound("MultiPaperPersistentData");
+            multipaperPersistentData.tags.forEach((key, tag) -> persistentData.put(key, tag.toString()));
+        }
+        // MultiPaper end
     }
 
     public void setExtraData(CompoundTag nbttagcompound) {
@@ -1664,6 +1721,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         paper.putLong("LastLogin", handle.loginTime);
         paper.putLong("LastSeen", System.currentTimeMillis());
         // Paper end
+
+        // MultiPaper start - store persistent data
+        CompoundTag multipaperPersistentData = new CompoundTag();
+        persistentData.forEach(multipaperPersistentData::putString);
+        nbttagcompound.put("MultiPaperPersistentData", multipaperPersistentData);
+        // MultiPaper end
     }
 
     @Override
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index 3649cb2a86213a5311be1218f1d7922f992b90fd..ecfd849c943fde805ab1ba29d69bd697d7ef8360 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -33,8 +33,8 @@ public class ExternalPlayer extends ServerPlayer {
     private boolean sendPackets = true;
     public boolean updatingData = false;
 
-    public static void create(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z, GameType gamemode) {
-        new ExternalPlayer(externalServerConnection, name, uuid, world, x, y, z, gamemode);
+    public static ExternalPlayer create(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z, GameType gamemode) {
+        return new ExternalPlayer(externalServerConnection, name, uuid, world, x, y, z, gamemode);
     }
 
     public ExternalPlayer(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z, GameType gamemode) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 16d4dc1748efaf1d8ddac9eacf651f8a4f84c944..19752deec4f5a71d45c1d685c46624ffd816684f 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -36,6 +36,7 @@ public class ExternalServerPacketSerializer {
         addPacket(HurtEntityPacket.class, HurtEntityPacket::new);
         addPacket(AddItemToContainerPacket.class, AddItemToContainerPacket::new);
         addPacket(MobSetNavigationGoalPacket.class, MobSetNavigationGoalPacket::new);
+        addPacket(PlayerDataUpdatePacket.class, PlayerDataUpdatePacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, IOExceptionFunction<DataInputStream, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
index f87c7dff5450a8d84b3cbf4fd1c4c86fbfb7a71e..a1ce17a3c7c7775d3a37141c5ec4e4f4632a6ba6 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -11,6 +11,8 @@ import puregero.multipaper.MultiPaper;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.UUID;
 
 public class PlayerCreatePacket extends ExternalServerPacket {
@@ -24,6 +26,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
     private final double y;
     private final double z;
     private final GameType gamemode;
+    private final HashMap<String, String> data;
+    private final HashMap<String, String> persistentData;
 
     public PlayerCreatePacket(ServerPlayer player) {
         this.name = player.getScoreboardName();
@@ -33,6 +37,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         this.y = player.getY();
         this.z = player.getZ();
         this.gamemode = player.gameMode.getGameModeForPlayer();
+        this.data = player.getBukkitEntity().data;
+        this.persistentData = player.getBukkitEntity().persistentData;
     }
 
     public PlayerCreatePacket(DataInputStream in) throws IOException {
@@ -43,6 +49,18 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         y = in.readDouble();
         z = in.readDouble();
         gamemode = GameType.byId(in.read());
+
+        data = new HashMap<>();
+        int dataLength = in.readInt();
+        for (int i = 0; i < dataLength; i++) {
+            data.put(in.readUTF(), in.readUTF());
+        }
+
+        persistentData = new HashMap<>();
+        int persistentDataLength = in.readInt();
+        for (int i = 0; i < persistentDataLength; i++) {
+            persistentData.put(in.readUTF(), in.readUTF());
+        }
     }
 
     @Override
@@ -54,11 +72,27 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         out.writeDouble(y);
         out.writeDouble(z);
         out.write(gamemode.getId());
+
+        out.writeInt(data.size());
+        for (Map.Entry<String, String> entry : data.entrySet()) {
+            out.writeUTF(entry.getKey());
+            out.writeUTF(entry.getValue());
+        }
+
+        out.writeInt(persistentData.size());
+        for (Map.Entry<String, String> entry : persistentData.entrySet()) {
+            out.writeUTF(entry.getKey());
+            out.writeUTF(entry.getValue());
+        }
     }
 
     @Override
     public void handle(ExternalServerConnection connection) {
         LOGGER.info("Adding player " + name + " (" + uuid + ")");
-        MultiPaper.runSync(() -> ExternalPlayer.create(connection, name, uuid, world, x, y, z, gamemode));
+        MultiPaper.runSync(() -> {
+            ExternalPlayer player = ExternalPlayer.create(connection, name, uuid, world, x, y, z, gamemode);
+            player.getBukkitEntity().data = data;
+            player.getBukkitEntity().persistentData = persistentData;
+        });
     }
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerDataUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerDataUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..54248f943847265a832740c70d8567ed34ab73f7
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerDataUpdatePacket.java
@@ -0,0 +1,55 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.entity.Player;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerDataUpdatePacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final boolean persistent;
+    private final String key;
+    private final String value;
+
+    public PlayerDataUpdatePacket(Player player, boolean persistent, String key, String value) {
+        this.uuid = player.getUniqueId();
+        this.persistent = persistent;
+        this.key = key;
+        this.value = value;
+    }
+
+    public PlayerDataUpdatePacket(DataInputStream in) throws IOException {
+        uuid = readUUID(in);
+        persistent = in.readBoolean();
+        key = in.readUTF();
+        value = in.readUTF();
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+        out.writeBoolean(persistent);
+        out.writeUTF(key);
+        out.writeUTF(value);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (persistent) {
+                player.getBukkitEntity().persistentData.put(key, value);
+            } else {
+                player.getBukkitEntity().data.put(key, value);
+            }
+        });
+    }
+}
