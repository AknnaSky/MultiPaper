From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 15 Nov 2021 13:27:45 +1000
Subject: [PATCH] Add peer-to-peer connection


diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index 6299c769c56bd6c2b2f3a26c1f5766e17b6fb660..17ebc0ac3d4c91d6818c79e8821681b668bd95c6 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -8,6 +8,8 @@ import org.bukkit.plugin.Plugin;
 
 import org.json.simple.JSONArray;
 import org.json.simple.JSONObject;
+import puregero.multipaper.ExternalServer;
+import puregero.multipaper.MultiPaper;
 
 import javax.net.ssl.HttpsURLConnection;
 import java.io.ByteArrayOutputStream;
@@ -604,6 +606,7 @@ public class Metrics {
                 metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
                 metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
                 metrics.addCustomChart(new Metrics.SimplePie("multipaper_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown")); // Tuinity - we have our own bstats page // Airplane // MultiPaper
+                metrics.addCustomChart(new Metrics.SimplePie("total_servers", () -> String.valueOf(MultiPaper.getConnection().getServersMap().values().stream().filter(ExternalServer::isAlive).count()))); // MultiPaper
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
                     Map<String, Map<String, Integer>> map = new HashMap<>();
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 48e3c5a22e1a808e93e877c8c5a064f9e218e505..8c392224518b61edad3dbe7ee5d23611fff247af 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -67,6 +67,7 @@ import co.aikar.timings.MinecraftTimings; // Paper
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.server.RemoteServerCommandEvent;
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
@@ -288,6 +289,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
         // CraftBukkit end
 
+        MultiPaper.onStart(); // MultiPaper
+
         if (!this.usesAuthentication()) {
             DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
             DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
diff --git a/src/main/java/puregero/multipaper/ExternalServer.java b/src/main/java/puregero/multipaper/ExternalServer.java
index 35b8352a2c798c70cfebeddd2a95dc8edf1d21d9..ceaad2b5af855905ad1b87e7308fb354304819b1 100644
--- a/src/main/java/puregero/multipaper/ExternalServer.java
+++ b/src/main/java/puregero/multipaper/ExternalServer.java
@@ -6,6 +6,7 @@ public class ExternalServer {
     private int averageTickTime;
     private double tps;
     private long lastAlive;
+    private ExternalServerConnection connection;
 
     public ExternalServer(String name, boolean me) {
         this.name = name;
@@ -47,4 +48,12 @@ public class ExternalServer {
     public void setTps(double tps) {
         this.tps = tps;
     }
+
+    public void setConnection(ExternalServerConnection connection) {
+        this.connection = connection;
+    }
+
+    public ExternalServerConnection getConnection() {
+        return connection;
+    }
 }
diff --git a/src/main/java/puregero/multipaper/ExternalServerConnection.java b/src/main/java/puregero/multipaper/ExternalServerConnection.java
new file mode 100644
index 0000000000000000000000000000000000000000..f93a51058848620727f783dd23f83b23c2707238
--- /dev/null
+++ b/src/main/java/puregero/multipaper/ExternalServerConnection.java
@@ -0,0 +1,85 @@
+package puregero.multipaper;
+
+import net.minecraft.server.MinecraftServer;
+import puregero.multipaper.externalserverprotocol.ExternalServerPacket;
+import puregero.multipaper.externalserverprotocol.ExternalServerPacketSerializer;
+import puregero.multipaper.externalserverprotocol.HelloPacket;
+
+import java.io.*;
+import java.net.Socket;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+public class ExternalServerConnection extends Thread implements Closeable {
+
+    private Socket socket;
+    public ExternalServer externalServer = null;
+    private ExecutorService sendThread = Executors.newSingleThreadExecutor();
+
+    public ExternalServerConnection(Socket socket) {
+        this.socket = socket;
+        start();
+    }
+
+    public int getPort() {
+        return socket.getLocalPort();
+    }
+
+    @Override
+    public void close() throws IOException {
+        socket.close();
+    }
+
+    @Override
+    public void run() {
+        try {
+            DataInputStream in = new DataInputStream(new BufferedInputStream(socket.getInputStream()));
+
+            while (MinecraftServer.getServer() == null || MinecraftServer.getServer().getPlayerList() == null || MinecraftServer.getServer().getPlayerList().players == null) {
+                Thread.sleep(50); // Wait for server to initialise
+            }
+
+            send(new HelloPacket(MultiPaper.getBungeeCordName()));
+
+            while (!socket.isClosed()) {
+                ExternalServerPacket packet = ExternalServerPacketSerializer.deserialize(in);
+                packet.handle(this);
+            }
+        } catch (EOFException e) {
+            // Ignore
+        } catch (Exception e) {
+            if (!socket.isClosed()) {
+                e.printStackTrace();
+            }
+        }
+
+        try {
+            socket.close();
+        } catch (Exception e) {
+            // Ignore
+        }
+
+        sendThread.shutdown();
+
+        if (externalServer != null && externalServer.getConnection() == this) {
+            externalServer.setConnection(null);
+        }
+    }
+
+    public void send(ExternalServerPacket packet) {
+        if (socket.isClosed()) {
+            new IOException("Socket is closed for " + externalServer.getName()).printStackTrace();
+        } else {
+            CompletableFuture.runAsync(() -> {
+                try {
+                    ByteArrayOutputStream buffer = new ByteArrayOutputStream();
+                    ExternalServerPacketSerializer.serialize(packet, new DataOutputStream(buffer));
+                    socket.getOutputStream().write(buffer.toByteArray());
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }, sendThread);
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/ExternalServerSocket.java b/src/main/java/puregero/multipaper/ExternalServerSocket.java
new file mode 100644
index 0000000000000000000000000000000000000000..52ff011d8ce356a407f38502eb828e24bbb4dc5c
--- /dev/null
+++ b/src/main/java/puregero/multipaper/ExternalServerSocket.java
@@ -0,0 +1,41 @@
+package puregero.multipaper;
+
+import java.io.Closeable;
+import java.io.IOException;
+import java.net.ServerSocket;
+
+public class ExternalServerSocket extends Thread implements Closeable {
+
+    private final ServerSocket socket;
+
+    public ExternalServerSocket() {
+        try {
+            socket = new ServerSocket(MultiPaper.getExternalServerPort());
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+        start();
+    }
+
+    public int getPort() {
+        return socket.getLocalPort();
+    }
+
+    @Override
+    public void close() throws IOException {
+        socket.close();
+    }
+
+    @Override
+    public void run() {
+        try {
+            while (true) {
+                new ExternalServerConnection(socket.accept());
+            }
+        } catch (Exception e) {
+            if (!socket.isClosed()) {
+                e.printStackTrace();
+            }
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 7c34a6624baa715409538d57a02672e70bd42d48..1a78a66bba0d8e34d2ea692df7e298a634c339c7 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -2,13 +2,19 @@ package puregero.multipaper;
 
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
+import net.minecraft.server.MinecraftServer;
+import puregero.multipaper.externalserverprotocol.ExternalServerPacket;
 
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.util.Collection;
+import java.util.function.Consumer;
+import java.util.function.Supplier;
 
 public class MultiPaper {
     private static MultiPaperConnection multiPaperConnection = null;
+    private static ExternalServerSocket externalServerSocket = null;
 
     public static MultiPaperConnection getConnection() {
         if (multiPaperConnection == null) {
@@ -34,6 +40,14 @@ public class MultiPaper {
         return multipaperMasterAddress;
     }
 
+    private static Integer externalServerPort = null;
+    public static int getExternalServerPort() {
+        if (externalServerPort == null) {
+            loadConfig();
+        }
+        return externalServerPort;
+    }
+
     private static void loadConfig() {
         YamlConfiguration config = new YamlConfiguration();
         File file = new File("multipaper.yml");
@@ -61,6 +75,13 @@ public class MultiPaper {
 
         multipaperMasterAddress = config.getString("multipaperMasterAddress");
 
+        if (!config.contains("externalServerPort")) {
+            save = true;
+            config.set("externalServerPort", 0);
+        }
+
+        externalServerPort = config.getInt("externalServerPort");
+
         try {
             if (save) {
                 config.save(file);
@@ -77,4 +98,40 @@ public class MultiPaper {
             e.printStackTrace();
         }
     }
+
+    public static void onStart() {
+        try {
+            externalServerSocket = new ExternalServerSocket();
+            getConnection().sendStart(externalServerSocket.getPort());
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+    
+    public static void runSync(Runnable runnable) {
+        MinecraftServer.getServer().scheduleOnMain(runnable);
+    }
+
+    public static void forEachExternalServer(Consumer<ExternalServer> externalServerConsumer) {
+        getConnection().getServersMap().values().forEach(externalServerConsumer);
+    }
+
+    public static void broadcastPacketToExternalServers(ExternalServerPacket packet) {
+        broadcastPacketToExternalServers(getConnection().getServersMap().values(), packet);
+    }
+
+    public static void broadcastPacketToExternalServers(Collection<ExternalServer> externalServers, ExternalServerPacket packet) {
+        broadcastPacketToExternalServers(externalServers, () -> packet);
+    }
+
+    public static void broadcastPacketToExternalServers(Collection<ExternalServer> externalServers, Supplier<ExternalServerPacket> generatePacketIfNeeded) {
+        if (!externalServers.isEmpty()) {
+            ExternalServerPacket packet = generatePacketIfNeeded.get();
+            externalServers.forEach(externalServer -> {
+                if (externalServer.getConnection() != null) {
+                    externalServer.getConnection().send(packet);
+                }
+            });
+        }
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index 6d82a54d759d2be4a7cdfc392371ac94a563b59c..a07fee59d0907e2263426ec0ba47fb7bec6b9aee 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -8,6 +8,7 @@ import java.io.*;
 import java.net.Socket;
 import java.net.SocketException;
 import java.util.Map;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Consumer;
 
@@ -52,6 +53,10 @@ public class MultiPaperConnection extends Thread {
         return new DataOutputSender(this, id);
     }
 
+    public ExternalServer getOrCreateServer(String name) {
+        return serversMap.computeIfAbsent(name, key -> new ExternalServer(key, key.equals(myName)));
+    }
+
     @Override
     public void run() {
         while (true) {
@@ -108,12 +113,26 @@ public class MultiPaperConnection extends Thread {
     }
 
     public void serverInfo(DataInputStream in, DataOutputSender out) throws IOException {
-        ExternalServer server = serversMap.computeIfAbsent(in.readUTF(), key -> new ExternalServer(key, key.equals(myName)));
+        ExternalServer server = getOrCreateServer(in.readUTF());
         server.setAverageTickTime(in.readInt());
         server.setTps(in.readFloat());
         server.setLastAlive(System.currentTimeMillis());
     }
 
+    public void start(DataInputStream in, DataOutputSender out) throws IOException {
+        String address = in.readUTF();
+        int port = in.readInt();
+        CompletableFuture.runAsync(() -> {
+            try {
+                LOGGER.info("Connecting to external server " + address + ":" + port + "...");
+                Socket socket = new Socket(address, port);
+                new ExternalServerConnection(socket);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        });
+    }
+
     public void writeTickTime(long time, double tps) throws IOException {
         DataOutputSender out = new DataOutputSender(this);
         out.writeUTF("writeTickTime");
@@ -121,4 +140,11 @@ public class MultiPaperConnection extends Thread {
         out.writeFloat((float) tps);
         out.send(null);
     }
+
+    public void sendStart(int port) throws IOException {
+        DataOutputSender out = new DataOutputSender(this);
+        out.writeUTF("start");
+        out.writeInt(port);
+        out.send(null);
+    }
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..81d61a2d671fedd031eb2725ac3ab45622e196b1
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacket.java
@@ -0,0 +1,14 @@
+package puregero.multipaper.externalserverprotocol;
+
+import puregero.multipaper.ExternalServerConnection;
+
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public abstract class ExternalServerPacket {
+
+    public abstract void handle(ExternalServerConnection connection);
+
+    public abstract void write(DataOutputStream out) throws IOException;
+
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
new file mode 100644
index 0000000000000000000000000000000000000000..c21f3dc975820b3d979a4fc5c0fa981296375f0b
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -0,0 +1,39 @@
+package puregero.multipaper.externalserverprotocol;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.EOFException;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+public class ExternalServerPacketSerializer {
+
+    private static final List<Class<? extends ExternalServerPacket>> PACKETS = new ArrayList<>();
+    private static final List<IOExceptionFunction<DataInputStream, ExternalServerPacket>> PACKET_DESERIALIZERS = new ArrayList<>();
+    static {
+        addPacket(HelloPacket.class, HelloPacket::new);
+    }
+
+    private static void addPacket(Class<? extends ExternalServerPacket> clazz, IOExceptionFunction<DataInputStream, ExternalServerPacket> deserializer) {
+        PACKETS.add(clazz);
+        PACKET_DESERIALIZERS.add(deserializer);
+    }
+
+    private static int getPacketId(ExternalServerPacket packet) {
+        return PACKETS.indexOf(packet.getClass());
+    }
+
+    public static void serialize(ExternalServerPacket packet, DataOutputStream out) throws IOException {
+        out.write(getPacketId(packet));
+        packet.write(out);
+    }
+
+    public static ExternalServerPacket deserialize(DataInputStream in) throws IOException {
+        int packetId = in.read();
+        if (packetId == -1) {
+            throw new EOFException("End of stream reached while reading packet id");
+        }
+        return PACKET_DESERIALIZERS.get(packetId).apply(in);
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/HelloPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/HelloPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..21a57d5fcb66211e6a42d6d1b21940b25e9d1382
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/HelloPacket.java
@@ -0,0 +1,37 @@
+package puregero.multipaper.externalserverprotocol;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class HelloPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(HelloPacket.class.getSimpleName());
+
+    private final String bungeecordName;
+
+    public HelloPacket(String bungeecordName) {
+        this.bungeecordName = bungeecordName;
+    }
+
+    public HelloPacket(DataInputStream in) throws IOException {
+        bungeecordName = in.readUTF();
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        out.writeUTF(bungeecordName);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        LOGGER.info("Connected to external server " + bungeecordName);
+        connection.externalServer = MultiPaper.getConnection().getOrCreateServer(bungeecordName);
+        connection.externalServer.setConnection(connection);
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/IOExceptionFunction.java b/src/main/java/puregero/multipaper/externalserverprotocol/IOExceptionFunction.java
new file mode 100644
index 0000000000000000000000000000000000000000..e75e8d222336483ce2d5cda77e570e161ea86cbb
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/IOExceptionFunction.java
@@ -0,0 +1,10 @@
+package puregero.multipaper.externalserverprotocol;
+
+import java.io.IOException;
+
+@FunctionalInterface
+public interface IOExceptionFunction<T, R> {
+
+    R apply(final T elem) throws IOException;
+
+}
