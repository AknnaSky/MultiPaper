From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 15 Nov 2021 13:02:02 +1000
Subject: [PATCH] Add sendTickTime


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index a3b95df01d2c7f20d44c9c2c52b4b9e57f65a798..9e36e6415c086ad7b7063350a4ba50ef46410f50 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1538,6 +1538,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         tickTimes60s.add(this.tickCount, l);
         // Paper end
 
+        MultiPaper.sendTickTime(i1 - i, recentTps[0]); // MultiPaper
         this.frameTimer.logFrameDuration(i1 - i);
         this.profiler.pop();
         org.spigotmc.WatchdogThread.tick(); // Spigot
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 5624ae7ac06396f649dc0df285665c89bdc1bb85..7c34a6624baa715409538d57a02672e70bd42d48 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -69,4 +69,12 @@ public class MultiPaper {
             e.printStackTrace();
         }
     }
+
+    public static void sendTickTime(long time, double tps) {
+        try {
+            getConnection().writeTickTime(time, tps);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index 8920b0fce82cd663b588a5ba954258445cb7f345..30e16bb397fc82fcfaf8822ca56e649fe8a172ad 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -26,6 +26,14 @@ public class MultiPaperConnection extends Thread {
     }
 
     public void send(byte[] bytes, int id, @Nullable Consumer<DataInputStream> callback) {
+        while (socket == null || socket.isClosed()) {
+            // Wait for socket to connect
+            try {
+                Thread.sleep(10);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
         Request request = new Request(bytes, callback);
         if (callback != null) {
             callbacks.put(id, request);
@@ -102,6 +110,15 @@ public class MultiPaperConnection extends Thread {
     public void serverInfo(DataInputStream in, DataOutputSender out) throws IOException {
         ExternalServer server = serversMap.computeIfAbsent(in.readUTF(), key -> new ExternalServer(key, key.equals(myName)));
         server.setAverageTickTime(in.readInt());
+        server.setTps(in.readFloat());
         server.setLastAlive(System.currentTimeMillis());
     }
+
+    public void writeTickTime(long time, double tps) throws IOException {
+        DataOutputSender out = new DataOutputSender(this);
+        out.writeUTF("writeTickTime");
+        out.writeLong(time);
+        out.writeFloat((float) tps);
+        out.send(null);
+    }
 }
