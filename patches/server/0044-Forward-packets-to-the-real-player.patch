From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Tue, 16 Nov 2021 01:58:28 +1000
Subject: [PATCH] Forward packets to the real player


diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index ca0cda5d46237bba4592b3e7d5a67cb83edf0269..528c3536247ac4476db106cd53bde4782122f508 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -6,6 +6,7 @@ import io.netty.util.concurrent.GenericFutureListener;
 import net.minecraft.network.Connection;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
@@ -64,11 +65,17 @@ public class ExternalPlayer extends ServerPlayer {
 
         @Override
         public void send(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> callback) {
-            if (sendPackets) {
-
+            if (sendPackets && !(packet instanceof ClientboundPlayerAbilitiesPacket)) {
+//                LOGGER.info("Forwarding packet " + packet);
+                externalServerConnection.sendPacket(ExternalPlayer.this, packet);
             } else {
 //                LOGGER.info("Not sending packet " + packet.getClass().getSimpleName());
             }
         }
     }
+
+    @Override
+    public boolean broadcastToPlayer(ServerPlayer spectator) {
+        return false;
+    }
 }
diff --git a/src/main/java/puregero/multipaper/ExternalServerConnection.java b/src/main/java/puregero/multipaper/ExternalServerConnection.java
index 11ee85df2d7ed546c4f7b05ff668d6278d73d1b3..17621d5fd36f0b17ab2c4d1736583d9eb9c79153 100644
--- a/src/main/java/puregero/multipaper/ExternalServerConnection.java
+++ b/src/main/java/puregero/multipaper/ExternalServerConnection.java
@@ -1,19 +1,25 @@
 package puregero.multipaper;
 
+import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.level.ServerPlayer;
 import puregero.multipaper.externalserverprotocol.ExternalServerPacket;
 import puregero.multipaper.externalserverprotocol.ExternalServerPacketSerializer;
 import puregero.multipaper.externalserverprotocol.HelloPacket;
+import puregero.multipaper.externalserverprotocol.SendPacketPacket;
 
 import java.io.*;
 import java.net.Socket;
+import java.util.*;
 
 public class ExternalServerConnection extends Thread implements Closeable {
 
     private Socket socket;
     public ExternalServer externalServer = null;
 
+    private static final Queue<List<ExternalPlayer>> externalPlayerListPool = new LinkedList<>();
+    private final HashMap<Packet<?>, List<ExternalPlayer>> packetsToSend = new LinkedHashMap<>();
+
     public ExternalServerConnection(Socket socket) {
         this.socket = socket;
         start();
@@ -74,4 +80,32 @@ public class ExternalServerConnection extends Thread implements Closeable {
             e.printStackTrace();
         }
     }
+
+    public void tick() {
+        // Send the packets after each vanilla tick
+        synchronized (packetsToSend) {
+            packetsToSend.forEach((packet, players) -> {
+                send(new SendPacketPacket(players, packet));
+                players.clear();
+                externalPlayerListPool.add(players);
+            });
+            packetsToSend.clear();
+        }
+    }
+
+    public void sendPacket(ExternalPlayer player, Packet<?> packet) {
+        // Combine all the players that the packet's being sent to together
+        // so that the packet only needs to be sent to the external server
+        // just once, not duplicated for each player
+        synchronized (packetsToSend) {
+            List<ExternalPlayer> players = packetsToSend.computeIfAbsent(packet, key -> {
+                List<ExternalPlayer> list = externalPlayerListPool.poll();
+                if (list == null) {
+                    list = new ArrayList<>();
+                }
+                return list;
+            });
+            players.add(player);
+        }
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 253541e5f55b816116898ab239925c65b54da2e7..dfbb4c47f0308e8395057014ca14dec0152eec07 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -48,6 +48,12 @@ public class MultiPaper {
     }
 
     public static void tick() {
+        for (ExternalServer server : getConnection().getServersMap().values()) {
+            if (server.getConnection() != null) {
+                // This tick function must be run after the vanilla tick
+                server.getConnection().tick();
+            }
+        }
     }
 
     public static void sendTickTime(long time, double tps) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 0e3324d116f937f9783fdf85af8a81d24eabfa2b..269fa39d6d5f16efeda1867e47d2a14bfa94770c 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -17,6 +17,7 @@ public class ExternalServerPacketSerializer {
         addPacket(PlayerRemovePacket.class, PlayerRemovePacket::new);
         addPacket(PlayerChangeGamemodePacket.class, PlayerChangeGamemodePacket::new);
         addPacket(PlayerChangeDimensionPacket.class, PlayerChangeDimensionPacket::new);
+        addPacket(SendPacketPacket.class, SendPacketPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, IOExceptionFunction<DataInputStream, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..086f6064400d03de8eb9ffe9fa1a5f349cdf8fe5
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
@@ -0,0 +1,91 @@
+package puregero.multipaper.externalserverprotocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.ConnectionProtocol;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.List;
+import java.util.UUID;
+
+public class SendPacketPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(SendPacketPacket.class.getSimpleName());
+
+    private final UUID[] uuids;
+    private final Packet<?> packet;
+
+    public SendPacketPacket(List<? extends ServerPlayer> players, Packet<?> packet) {
+        this.uuids = new UUID[players.size()];
+        for (int i = 0; i < players.size(); i++) {
+            this.uuids[i] = players.get(i).getUUID();
+        }
+        this.packet = packet;
+    }
+
+    public SendPacketPacket(ServerPlayer player, Packet<?> packet) {
+        this.uuids = new UUID[1];
+        this.uuids[0] = player.getUUID();
+        this.packet = packet;
+    }
+
+    public SendPacketPacket(DataInputStream in) throws IOException {
+        uuids = new UUID[in.readInt()];
+        for (int i = 0; i < uuids.length; i++) {
+            this.uuids[i] = readUUID(in);
+        }
+
+        int length = in.readInt();
+        byte[] bytes = new byte[length];
+        in.readFully(bytes);
+        ByteBuf buf = Unpooled.wrappedBuffer(bytes);
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        int packetId = friendlyByteBuf.readVarInt();
+        packet = ConnectionProtocol.PLAY.createPacket(PacketFlow.CLIENTBOUND, packetId, friendlyByteBuf);
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        out.writeInt(uuids.length);
+        for (UUID uuid : uuids) {
+            writeUUID(out, uuid);
+        }
+
+        ConnectionProtocol protocol = ConnectionProtocol.getProtocolForPacket(packet);
+        Integer id = protocol.getPacketId(PacketFlow.CLIENTBOUND, packet);
+        ByteBuf buf = Unpooled.buffer();
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        friendlyByteBuf.writeVarInt(id);
+        packet.write(friendlyByteBuf);
+        byte[] bytes = buf.array();
+        out.writeInt(bytes.length);
+        out.write(bytes);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            for (UUID uuid : uuids) {
+                ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+                if (player == null) {
+                    LOGGER.warn("Tried to send a packet to a non-existent player uuid " + player);
+                    return;
+                }
+
+                player.connection.send(packet);
+            }
+        });
+    }
+}
