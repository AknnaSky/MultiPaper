From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Tue, 16 Nov 2021 01:58:28 +1000
Subject: [PATCH] Forward packets to the real player


diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index fe7ac552211558c40d10a739a1d719a426d85d6d..411b1cfdb0de16c8c183860833ebdd0772b92f7d 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -70,7 +70,13 @@ public class ExternalPlayer extends ServerPlayer {
 
         @Override
         public void send(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> callback) {
-
+            LOGGER.info("Forwarding packet " + packet);
+            externalServerConnection.sendPacket(ExternalPlayer.this, packet);
         }
     }
+
+    @Override
+    public boolean broadcastToPlayer(ServerPlayer spectator) {
+        return false;
+    }
 }
diff --git a/src/main/java/puregero/multipaper/ExternalServerConnection.java b/src/main/java/puregero/multipaper/ExternalServerConnection.java
index 11ee85df2d7ed546c4f7b05ff668d6278d73d1b3..5384c15cb77ef984a6596c16f8b7f94c06dbb7ab 100644
--- a/src/main/java/puregero/multipaper/ExternalServerConnection.java
+++ b/src/main/java/puregero/multipaper/ExternalServerConnection.java
@@ -1,19 +1,25 @@
 package puregero.multipaper;
 
+import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.level.ServerPlayer;
 import puregero.multipaper.externalserverprotocol.ExternalServerPacket;
 import puregero.multipaper.externalserverprotocol.ExternalServerPacketSerializer;
 import puregero.multipaper.externalserverprotocol.HelloPacket;
+import puregero.multipaper.externalserverprotocol.SendPacketPacket;
 
 import java.io.*;
 import java.net.Socket;
+import java.util.*;
 
 public class ExternalServerConnection extends Thread implements Closeable {
 
     private Socket socket;
     public ExternalServer externalServer = null;
 
+    private static final Queue<List<ExternalPlayer>> externalPlayerListPool = new LinkedList<>();
+    private final HashMap<Packet<?>, List<ExternalPlayer>> packetsToSend = new LinkedHashMap<>();
+
     public ExternalServerConnection(Socket socket) {
         this.socket = socket;
         start();
@@ -57,10 +63,6 @@ public class ExternalServerConnection extends Thread implements Closeable {
                 MultiPaper.runSync(() -> player.connection.disconnect("External server disconnected"));
             }
         }
-
-        if (externalServer != null && externalServer.getConnection() == this) {
-            externalServer.setConnection(null);
-        }
     }
 
     public void send(ExternalServerPacket packet) {
@@ -74,4 +76,32 @@ public class ExternalServerConnection extends Thread implements Closeable {
             e.printStackTrace();
         }
     }
+
+    public void tick() {
+        // Send the packets after each vanilla tick
+        synchronized (packetsToSend) {
+            packetsToSend.forEach((packet, players) -> {
+                send(new SendPacketPacket(players, packet));
+                players.clear();
+                externalPlayerListPool.add(players);
+            });
+            packetsToSend.clear();
+        }
+    }
+
+    public void sendPacket(ExternalPlayer player, Packet<?> packet) {
+        // Combine all the players that the packet's being sent to together
+        // so that the packet only needs to be sent to the external server
+        // just once, not duplicated for each player
+        synchronized (packetsToSend) {
+            List<ExternalPlayer> players = packetsToSend.computeIfAbsent(packet, key -> {
+                List<ExternalPlayer> list = externalPlayerListPool.poll();
+                if (list == null) {
+                    list = new ArrayList<>();
+                }
+                return list;
+            });
+            players.add(player);
+        }
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 81f6542c9fc609eabb6cbd5c082242541d260519..38be2afcc04916ab199930a931a8753de426a40c 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -65,6 +65,13 @@ public class MultiPaper {
                 }
             }
         }
+
+        for (ExternalServer server : getConnection().getServersMap().values()) {
+            if (server.getConnection() != null) {
+                // This tick function must be run after the vanilla tick
+                server.getConnection().tick();
+            }
+        }
     }
 
     public static void sendTickTime(long time) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 77e18bb08ee446140abe55f87fa30a4ab1dd005e..998b0df31e09092b199f7b7637bd64dda213b773 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -15,6 +15,7 @@ public class ExternalServerPacketSerializer {
         addPacket(PlayerCreatePacket.class, PlayerCreatePacket::new);
         addPacket(PlayerRemovePacket.class, PlayerRemovePacket::new);
         addPacket(PlayerMovePacket.class, PlayerMovePacket::new);
+        addPacket(SendPacketPacket.class, SendPacketPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, IOExceptionFunction<DataInputStream, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..d606e66e6142790bfd7ea738e84d2b66063c2061
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
@@ -0,0 +1,82 @@
+package puregero.multipaper.externalserverprotocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.ConnectionProtocol;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.List;
+
+public class SendPacketPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(SendPacketPacket.class.getSimpleName());
+
+    private final int[] ids;
+    private final Packet<?> packet;
+
+    public SendPacketPacket(List<ExternalPlayer> players, Packet<?> packet) {
+        this.ids = new int[players.size()];
+        for (int i = 0; i < players.size(); i++) {
+            this.ids[i] = players.get(i).getId();
+        }
+        this.packet = packet;
+    }
+
+    public SendPacketPacket(DataInputStream in) throws IOException {
+        ids = new int[in.readInt()];
+        for (int i = 0; i < ids.length; i++) {
+            this.ids[i] = in.readInt();
+        }
+
+        int length = in.readInt();
+        byte[] bytes = new byte[length];
+        in.readFully(bytes);
+        ByteBuf buf = Unpooled.wrappedBuffer(bytes);
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        int packetId = friendlyByteBuf.readVarInt();
+        packet = ConnectionProtocol.PLAY.createPacket(PacketFlow.CLIENTBOUND, packetId, friendlyByteBuf);
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        out.writeInt(ids.length);
+        for (int id : ids) {
+            out.writeInt(id);
+        }
+
+        ConnectionProtocol protocol = ConnectionProtocol.getProtocolForPacket(packet);
+        Integer id = protocol.getPacketId(PacketFlow.CLIENTBOUND, packet);
+        ByteBuf buf = Unpooled.buffer();
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        friendlyByteBuf.writeVarInt(id);
+        packet.write(friendlyByteBuf);
+        byte[] bytes = buf.array();
+        out.writeInt(bytes.length);
+        out.write(bytes);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        for (int id : ids) {
+            ServerPlayer player = MultiPaper.getPlayerById(id);
+
+            if (player == null) {
+                LOGGER.warn("Tried to remove a non-existant player with entity id of " + id);
+                return;
+            }
+
+            player.connection.send(packet);
+        }
+    }
+}
