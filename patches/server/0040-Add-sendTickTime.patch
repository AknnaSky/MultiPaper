From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 15 Nov 2021 13:02:02 +1000
Subject: [PATCH] Add sendTickTime


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 60633552c440039bdc1bfd50789645b8a78154b4..29c5df60f90ce0ad1bf8a20116b063bdf72ad68e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1535,6 +1535,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         tickTimes60s.add(this.tickCount, l);
         // Paper end
 
+        MultiPaper.sendTickTime(i1 - i, recentTps[0]); // MultiPaper
         this.frameTimer.logFrameDuration(i1 - i);
         this.profiler.pop();
         org.spigotmc.WatchdogThread.tick(); // Spigot
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 7a6b980502593afd47de458ed2b443160dfb5754..5ddb4c40c42f94b6a4b76dc0479c51dbcfe65f6e 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -30,4 +30,12 @@ public class MultiPaper {
         }
         return bungeeCordName;
     }
+
+    public static void sendTickTime(long time, double tps) {
+        try {
+            getConnection().writeTickTime(time, tps);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index 4c3b5986e4c29663e193987d24cc2f88d309b30d..4aaa90a7023245791003dfe274af04bcf42ca1d9 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -27,6 +27,14 @@ public class MultiPaperConnection extends Thread {
     }
 
     public void send(byte[] bytes, int id, @Nullable Consumer<DataInputStream> callback) {
+        while (socket == null) {
+            // Wait for socket to connect
+            try {
+                Thread.sleep(10);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
         Request request = new Request(bytes, callback);
         if (callback != null) {
             callbacks.put(id, request);
@@ -116,6 +124,15 @@ public class MultiPaperConnection extends Thread {
     public void serverInfo(DataInputStream in, DataOutputSender out) throws IOException {
         ExternalServer server = serversMap.computeIfAbsent(in.readUTF(), key -> new ExternalServer(key, key.equals(myName)));
         server.setAverageTickTime(in.readInt());
+        server.setTps(in.readFloat());
         server.setLastAlive(System.currentTimeMillis());
     }
+
+    public void writeTickTime(long time, double tps) throws IOException {
+        DataOutputSender out = new DataOutputSender(this);
+        out.writeUTF("writeTickTime");
+        out.writeLong(time);
+        out.writeFloat((float) tps);
+        out.send(null);
+    }
 }
