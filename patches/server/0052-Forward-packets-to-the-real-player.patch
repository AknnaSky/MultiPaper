From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Tue, 16 Nov 2021 01:58:28 +1000
Subject: [PATCH] Forward packets to the real player


diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index 578f369c90ef287e06a76eb8f3757a6e8142e94e..46a054e2c23c1fd57c85fe86d37efa06a9db3c72 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -6,6 +6,7 @@ import io.netty.util.concurrent.GenericFutureListener;
 import net.minecraft.network.Connection;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
@@ -75,11 +76,24 @@ public class ExternalPlayer extends ServerPlayer {
 
         @Override
         public void send(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> callback) {
-            if (sendPackets) {
-
+            if (sendPackets && !(packet instanceof ClientboundPlayerAbilitiesPacket)
+                    && !(packet instanceof ClientboundSetPlayerTeamPacket)
+                    && !(packet instanceof ClientboundSetScorePacket)
+                    && !(packet instanceof ClientboundSetObjectivePacket)
+                    && !(packet instanceof ClientboundSetDisplayObjectivePacket)
+                    && !(packet instanceof ClientboundSetEntityDataPacket)
+                    && !(packet instanceof ClientboundSetChunkCacheCenterPacket)
+                    && !(packet instanceof ClientboundSetChunkCacheRadiusPacket)) {
+//                LOGGER.info("Forwarding packet " + packet);
+                externalServerConnection.sendPacket(ExternalPlayer.this, packet);
             } else {
 //                LOGGER.info("Not sending packet " + packet.getClass().getSimpleName());
             }
         }
     }
+
+    @Override
+    public boolean broadcastToPlayer(ServerPlayer spectator) {
+        return false;
+    }
 }
diff --git a/src/main/java/puregero/multipaper/ExternalServerConnection.java b/src/main/java/puregero/multipaper/ExternalServerConnection.java
index 172a24866ebafbda8811e52034e797e3fd9e7d97..35ce2069d31413298f842b20f2ba0dc0cf178dd8 100644
--- a/src/main/java/puregero/multipaper/ExternalServerConnection.java
+++ b/src/main/java/puregero/multipaper/ExternalServerConnection.java
@@ -4,6 +4,7 @@ import io.netty.channel.Channel;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.socket.SocketChannel;
 import net.minecraft.network.*;
+import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
 import net.minecraft.server.dedicated.DedicatedServer;
@@ -12,9 +13,9 @@ import puregero.multipaper.externalserverprotocol.*;
 
 import java.io.Closeable;
 import java.io.IOException;
+import java.util.*;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
-import java.util.HashSet;
 
 public class ExternalServerConnection extends ChannelInitializer<SocketChannel> implements Closeable {
 
@@ -23,6 +24,8 @@ public class ExternalServerConnection extends ChannelInitializer<SocketChannel>
     public ExternalServer externalServer = null;
     private static final ExecutorService sendThread = Executors.newSingleThreadExecutor();
     public HashSet<String> subscribedWorlds = new HashSet<>();
+    private static final Queue<List<ExternalPlayer>> externalPlayerListPool = new LinkedList<>();
+    private final HashMap<Packet<?>, List<ExternalPlayer>> packetsToSend = new LinkedHashMap<>();
 
     public ExternalServerConnection() {
 
@@ -99,4 +102,32 @@ public class ExternalServerConnection extends ChannelInitializer<SocketChannel>
             sendThread.execute(() -> channel.writeAndFlush(packet));
         }
     }
+
+    public void tick() {
+        // Send the packets after each vanilla tick
+        synchronized (packetsToSend) {
+            packetsToSend.forEach((packet, players) -> {
+                send(new SendPacketPacket(players, packet));
+                players.clear();
+                externalPlayerListPool.add(players);
+            });
+            packetsToSend.clear();
+        }
+    }
+
+    public void sendPacket(ExternalPlayer player, Packet<?> packet) {
+        // Combine all the players that the packet's being sent to together
+        // so that the packet only needs to be sent to the external server
+        // just once, not duplicated for each player
+        synchronized (packetsToSend) {
+            List<ExternalPlayer> players = packetsToSend.computeIfAbsent(packet, key -> {
+                List<ExternalPlayer> list = externalPlayerListPool.poll();
+                if (list == null) {
+                    list = new ArrayList<>();
+                }
+                return list;
+            });
+            players.add(player);
+        }
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 632adc081ef8b4b3028b303597fc778c9a0b581d..531bc1bba8391045ef9c2ac27f7947df75fe6c88 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -87,6 +87,12 @@ public class MultiPaper {
     }
 
     public static void tick() {
+        for (ExternalServer server : getConnection().getServersMap().values()) {
+            if (server.getConnection() != null) {
+                // This tick function must be run after the vanilla tick
+                server.getConnection().tick();
+            }
+        }
     }
 
     public static void sendTickTime(long time, double tps) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 1bd2efec2f12078d46d3cd6f973e9ba918584929..fe04e97a2bdbb479ff738a4b068e8cb23b07f44b 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -18,6 +18,7 @@ public class ExternalServerPacketSerializer {
         addPacket(PlayerChangeGamemodePacket.class, PlayerChangeGamemodePacket::new);
         addPacket(PlayerRespawnPacket.class, PlayerRespawnPacket::new);
         addPacket(PlayerChangeDimensionPacket.class, PlayerChangeDimensionPacket::new);
+        addPacket(SendPacketPacket.class, SendPacketPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..716736c83da71a09c84d94f5fe10dc3c368d5f19
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
@@ -0,0 +1,85 @@
+package puregero.multipaper.externalserverprotocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.ConnectionProtocol;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+
+import java.util.List;
+import java.util.UUID;
+
+public class SendPacketPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(SendPacketPacket.class.getSimpleName());
+
+    private final UUID[] uuids;
+    private final Packet<?> packet;
+
+    public SendPacketPacket(List<? extends ServerPlayer> players, Packet<?> packet) {
+        this.uuids = new UUID[players.size()];
+        for (int i = 0; i < players.size(); i++) {
+            this.uuids[i] = players.get(i).getUUID();
+        }
+        this.packet = packet;
+    }
+
+    public SendPacketPacket(ServerPlayer player, Packet<?> packet) {
+        this.uuids = new UUID[1];
+        this.uuids[0] = player.getUUID();
+        this.packet = packet;
+    }
+
+    public SendPacketPacket(FriendlyByteBuf in) {
+        uuids = new UUID[in.readInt()];
+        for (int i = 0; i < uuids.length; i++) {
+            this.uuids[i] = in.readUUID();
+        }
+
+        byte[] bytes = in.readByteArray();
+        ByteBuf buf = Unpooled.wrappedBuffer(bytes);
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        int packetId = friendlyByteBuf.readVarInt();
+        packet = ConnectionProtocol.PLAY.createPacket(PacketFlow.CLIENTBOUND, packetId, friendlyByteBuf);
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeInt(uuids.length);
+        for (UUID uuid : uuids) {
+            out.writeUUID(uuid);
+        }
+
+        ConnectionProtocol protocol = ConnectionProtocol.getProtocolForPacket(packet);
+        Integer id = protocol.getPacketId(PacketFlow.CLIENTBOUND, packet);
+        ByteBuf buf = Unpooled.buffer();
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        friendlyByteBuf.writeVarInt(id);
+        packet.write(friendlyByteBuf);
+        out.writeByteArray(buf.array());
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        doHandle(connection);
+    }
+
+    public void doHandle(ExternalServerConnection connection) {
+        for (UUID uuid : uuids) {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn("Tried to send a packet to a non-existent player uuid " + player);
+                return;
+            }
+
+            player.connection.send(packet);
+        }
+    }
+}
