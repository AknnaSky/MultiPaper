From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 14 Jan 2022 10:15:23 +1000
Subject: [PATCH] Sync respawn locations


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index f8cc83dc23197ca39ecb91bcbe9d2634fb5ffa4a..c3f500788bbcea21492fa08a6a2f47efd5f70ec7 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -213,11 +213,11 @@ public class ServerPlayer extends Player {
     @Nullable
     private Vec3 enteredLavaOnVehiclePosition;
     private SectionPos lastSectionPos;
-    private ResourceKey<Level> respawnDimension;
+    public ResourceKey<Level> respawnDimension; // MultiPaper - make public
     @Nullable
-    private BlockPos respawnPosition;
-    private boolean respawnForced;
-    private float respawnAngle;
+    public BlockPos respawnPosition; // MultiPaper - make public
+    public boolean respawnForced; // MultiPaper - make public
+    public float respawnAngle; // MultiPaper - make public
     private final TextFilter textFilter;
     private boolean textFilteringEnabled;
     private boolean allowsListing;
@@ -2199,6 +2199,7 @@ public class ServerPlayer extends Player {
             this.respawnForced = false;
         }
 
+        PlayerSetRespawnPosition.broadcastRespawnPosition(this); // MultiPaper
     }
 
     public void trackChunk(ChunkPos chunkPos, Packet<?> chunkDataPacket) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 7cec13504eeefbd637b94f4f57566cfc2ed84127..67a04c15533b7041e3a88c57c66e4e1f52237a00 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -50,6 +50,7 @@ public class ExternalServerPacketSerializer {
         addPacket(PlayerExperienceUpdatePacket.class, PlayerExperienceUpdatePacket::new);
         addPacket(PlayerListNameUpdatePacket.class, PlayerListNameUpdatePacket::new);
         addPacket(PlayerSetCameraPacket.class, PlayerSetCameraPacket::new);
+        addPacket(PlayerSetRespawnPosition.class, PlayerSetRespawnPosition::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
index 0152c1720fe641150bb9b51f596b8305f8a6dc35..cc83bb97070bc438aeb6663f7c909ce634dce13a 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -141,6 +141,7 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         connection.send(new EntityUpdatePacket(player, new ClientboundSetEntityDataPacket(player.getId(), player.getEntityData(), true)));
         connection.send(new PlayerFoodUpdatePacket(player));
         connection.send(new PlayerListNameUpdatePacket(player));
+        connection.send(new PlayerSetRespawnPosition(player));
 
         MultiPaperInventoryHandler.sendFullInventoryUpdate(connection, player);
         MultiPaperEnderChestHandler.sendFullEnderChestUpdate(connection, player);
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerSetRespawnPosition.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerSetRespawnPosition.java
new file mode 100644
index 0000000000000000000000000000000000000000..81eb8c819b7119de8b2ab1ea123d2a17bad3176e
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerSetRespawnPosition.java
@@ -0,0 +1,80 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Registry;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PlayerSetRespawnPosition extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerSetRespawnPosition.class.getSimpleName());
+    private static boolean settingRespawnPosition = false;
+
+    private final UUID uuid;
+    private final ResourceKey<Level> dimension;
+    private final BlockPos pos;
+    private final float angle;
+    private final boolean forced;
+
+    public PlayerSetRespawnPosition(ServerPlayer player) {
+        this.uuid = player.getUUID();
+        this.dimension = player.respawnDimension;
+        this.pos = player.respawnPosition;
+        this.angle = player.respawnAngle;
+        this.forced = player.respawnForced;
+    }
+
+    public PlayerSetRespawnPosition(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        dimension = ResourceKey.elementKey(Registry.DIMENSION_REGISTRY).apply(new ResourceLocation(in.readUtf()));
+        pos = in.readBoolean() ? BlockPos.of(in.readLong()) : null;
+        angle = in.readFloat();
+        forced = in.readBoolean();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeUtf(dimension.location().toString());
+
+        out.writeBoolean(pos != null);
+        if (pos != null) {
+            out.writeLong(pos.asLong());
+        }
+
+        out.writeFloat(angle);
+        out.writeBoolean(forced);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn("Tried to set a respawn position on a non-existent player with uuid " + uuid);
+                return;
+            }
+
+            settingRespawnPosition = true;
+            player.setRespawnPosition(dimension, pos, angle, forced, false);
+            settingRespawnPosition = false;
+        });
+    }
+
+    public static void broadcastRespawnPosition(ServerPlayer player) {
+        if (!settingRespawnPosition) {
+            MultiPaper.broadcastPacketToExternalServers(player, new PlayerSetRespawnPosition(player));
+        }
+    }
+}
