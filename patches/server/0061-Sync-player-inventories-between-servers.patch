From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 18 Nov 2021 00:00:34 +1000
Subject: [PATCH] Sync player inventories between servers


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 7aaa378e4c3239173c7fc032ded8252aac5d2c0b..b71b743a8e43843757993898ee4f37d6b15e72bf 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -164,6 +164,7 @@ import org.bukkit.event.player.PlayerPortalEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.inventory.MainHand;
+import puregero.multipaper.ExternalServer;
 import puregero.multipaper.MultiPaper;
 import puregero.multipaper.externalserverprotocol.PlayerChangeDimensionPacket;
 import puregero.multipaper.externalserverprotocol.PlayerChangeGamemodePacket;
@@ -228,6 +229,7 @@ public class ServerPlayer extends Player {
     private final ContainerSynchronizer containerSynchronizer;
     private final ContainerListener containerListener;
     private int containerCounter;
+    @Nullable public ExternalServer openContainer; // MultiPaper
     public int latency;
     public boolean wonGame;
     private int containerUpdateDelay; // Paper
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 39bb17fdb09f1c60ca80d7e6a9325c62e904e178..d130d6f167b8e4a5556c405bdfd72790dca48fb2 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -215,6 +215,7 @@ import org.bukkit.inventory.SmithingInventory;
 import org.bukkit.util.NumberConversions;
 import co.aikar.timings.MinecraftTimings; // Paper
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperInventoryHandler;
 // CraftBukkit end
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener {
@@ -750,6 +751,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handleAcceptTeleportPacket(ServerboundAcceptTeleportationPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        MultiPaperInventoryHandler.handleAcceptTeleport(this.player, packet); // MultiPaper
         if (packet.getId() == this.awaitingTeleport && this.awaitingPositionFromClient != null) { // CraftBukkit
             this.player.moveTo(this.awaitingPositionFromClient.x, this.awaitingPositionFromClient.y, this.awaitingPositionFromClient.z, this.player.getYRot(), this.player.getXRot()); // Paper - use proper setPositionRotation for teleportation
             this.lastGoodX = this.awaitingPositionFromClient.x;
@@ -778,6 +780,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handleRecipeBookChangeSettingsPacket(ServerboundRecipeBookChangeSettingsPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        MultiPaperInventoryHandler.handleContainerEvent(this.player, packet); // MultiPaper
         this.player.getRecipeBook().setBookSetting(packet.getBookType(), packet.isOpen(), packet.isFiltering());
     }
 
@@ -976,6 +979,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handleRenameItem(ServerboundRenameItemPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return; // MultiPaper
         if (this.player.containerMenu instanceof AnvilMenu) {
             AnvilMenu containeranvil = (AnvilMenu) this.player.containerMenu;
             String s = SharedConstants.filterText(packet.getName());
@@ -990,6 +994,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handleSetBeaconPacket(ServerboundSetBeaconPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return; // MultiPaper
         if (this.player.containerMenu instanceof BeaconMenu) {
             ((BeaconMenu) this.player.containerMenu).updateEffects(packet.getPrimary(), packet.getSecondary());
         }
@@ -1096,6 +1101,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handleSelectTrade(ServerboundSelectTradePacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return;
         int i = packet.getItem();
         AbstractContainerMenu container = this.player.containerMenu;
 
@@ -1828,6 +1834,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         }
         // Paper end - move check up
 
+        if (MultiPaperInventoryHandler.handleInteractEvent(this.player, packet)) return; // MultiPaper - send to external server if necessary
+
         this.player.resetLastActionTime();
         int i = this.player.level.getMaxBuildHeight();
 
@@ -1866,6 +1874,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         InteractionHand enumhand = packet.getHand();
         ItemStack itemstack = this.player.getItemInHand(enumhand);
 
+        if (MultiPaperInventoryHandler.handleUseItemEvent(this.player, packet)) return; // MultiPaper
+
         this.player.resetLastActionTime();
         if (!itemstack.isEmpty()) {
             // CraftBukkit start
@@ -2051,6 +2061,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
 
             this.player.getInventory().selected = packet.getSlot();
             this.player.resetLastActionTime();
+            if (MultiPaper.isRealPlayer(this.player)) MultiPaper.broadcastPlayerAction(this.player, packet); // MultiPaper
         } else {
             ServerGamePacketListenerImpl.LOGGER.warn("{} tried to set an invalid carried item", this.player.getName().getString());
             this.disconnect("Invalid hotbar selection (Hacking?)", org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_ACTION); // CraftBukkit // Paper - kick event cause
@@ -2604,6 +2615,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     public void handleContainerClose(ServerboundContainerClosePacket packetplayinclosewindow, InventoryCloseEvent.Reason reason) {
         // Paper end
         PacketUtils.ensureRunningOnSameThread(packetplayinclosewindow, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packetplayinclosewindow)) return; // MultiPaper
 
         if (this.player.isImmobile()) return; // CraftBukkit
         CraftEventFactory.handleInventoryCloseEvent(this.player, reason); // CraftBukkit // Paper
@@ -2614,6 +2626,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handleContainerClick(ServerboundContainerClickPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return; // MultiPaper
         if (this.player.isImmobile()) return; // CraftBukkit
         this.player.resetLastActionTime();
         if (this.player.containerMenu.containerId == packet.getContainerId() && this.player.containerMenu.stillValid(this.player)) { // CraftBukkit
@@ -2924,6 +2937,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
 
     @Override
     public void handlePlaceRecipe(ServerboundPlaceRecipePacket packet) {
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return; // MultiPaper
         // Paper start
         if (!org.bukkit.Bukkit.isPrimaryThread()) {
             if (recipeSpamPackets.addAndGet(com.destroystokyo.paper.PaperConfig.autoRecipeIncrement) > com.destroystokyo.paper.PaperConfig.autoRecipeLimit) {
@@ -2949,6 +2963,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handleContainerButtonClick(ServerboundContainerButtonClickPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return; // MultiPaper
         if (this.player.isImmobile()) return; // CraftBukkit
         this.player.resetLastActionTime();
         if (this.player.containerMenu.containerId == packet.getContainerId() && !this.player.isSpectator()) {
diff --git a/src/main/java/net/minecraft/stats/RecipeBook.java b/src/main/java/net/minecraft/stats/RecipeBook.java
index 87167f16fa9dedf19abefe38864498edb0c40a1d..8fb5f47a1ffeb248266e6bfa12a26a1bc8a8ad0f 100644
--- a/src/main/java/net/minecraft/stats/RecipeBook.java
+++ b/src/main/java/net/minecraft/stats/RecipeBook.java
@@ -33,6 +33,7 @@ public class RecipeBook {
     }
 
     public boolean contains(@Nullable Recipe<?> recipe) {
+        if (recipe != null) return true; // MultiPaper - who cares if they use a recipe that they don't have, no point trying to sync this between servers
         return recipe == null ? false : this.known.contains(recipe.getId());
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 9523c625054ef29bfbc609015ccd5724f0e90124..1f009ca047f2d4fa97bd88907a2c4e126666ecf7 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -84,14 +84,7 @@ import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.FenceGateBlock;
-import net.minecraft.world.level.block.HoneyBlock;
-import net.minecraft.world.level.block.Mirror;
-import net.minecraft.world.level.block.RenderShape;
-import net.minecraft.world.level.block.Rotation;
-import net.minecraft.world.level.block.SoundType;
+import net.minecraft.world.level.block.*;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
@@ -146,6 +139,7 @@ import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.event.entity.EntityPoseChangeEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.plugin.PluginManager;
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public abstract class Entity implements Nameable, EntityAccess, CommandSource, io.papermc.paper.util.KeyedObject { // Paper
@@ -1441,6 +1435,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
                         blockposition_mutableblockposition.set(i, j, k);
                         BlockState iblockdata = this.level.getBlockState(blockposition_mutableblockposition);
 
+                        boolean shouldTickOurPlayer = MultiPaper.isRealPlayer(this) && (iblockdata.getBlock() instanceof NetherPortalBlock || iblockdata.getBlock() instanceof EndPortalBlock); // MultiPaper - tick portals
+                        if (!shouldTickOurPlayer && MultiPaper.isChunkExternal(this.level.getChunkAt(blockposition_mutableblockposition))) continue; // MultiPaper - Only check for blocks on our server
+
                         try {
                             iblockdata.entityInside(this.level, blockposition_mutableblockposition, this);
                             this.onInsideBlock(iblockdata);
diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index 8d329bca0818033df41fbd781028919c73e052a6..d43cdea5999da9f878bb6a84da1893f4767c90a1 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -17,6 +17,7 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.Tag;
 import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
+import net.minecraft.world.InteractionHand;
 import net.minecraft.world.Nameable;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
@@ -30,6 +31,7 @@ import java.util.ArrayList;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
+import puregero.multipaper.NonNullListFilter;
 // CraftBukkit end
 
 public class Inventory implements Container, Nameable {
@@ -41,10 +43,12 @@ public class Inventory implements Container, Nameable {
     public static final int NOT_FOUND_INDEX = -1;
     public static final int[] ALL_ARMOR_SLOTS = new int[]{0, 1, 2, 3};
     public static final int[] HELMET_SLOT_ONLY = new int[]{3};
-    public final NonNullList<ItemStack> items;
-    public final NonNullList<ItemStack> armor;
-    public final NonNullList<ItemStack> offhand;
-    public final List<NonNullList<ItemStack>> compartments;
+    // MultiPaper start - Use NonNullListFilter instead of NonNullList
+    public final NonNullListFilter<ItemStack> items;
+    public final NonNullListFilter<ItemStack> armor;
+    public final NonNullListFilter<ItemStack> offhand;
+    public final List<NonNullListFilter<ItemStack>> compartments;
+    // MultiPaper end
     public int selected;
     public final Player player;
     private int timesChanged;
@@ -98,9 +102,11 @@ public class Inventory implements Container, Nameable {
     // CraftBukkit end
 
     public Inventory(Player player) {
-        this.items = NonNullList.withSize(36, ItemStack.EMPTY);
-        this.armor = NonNullList.withSize(4, ItemStack.EMPTY);
-        this.offhand = NonNullList.withSize(1, ItemStack.EMPTY);
+        // MultiPaper start - Filter the inventory and sync it with other server
+        this.items = NonNullListFilter.withSize(36, ItemStack.EMPTY, player, "items");
+        this.armor = NonNullListFilter.withSize(4, ItemStack.EMPTY, player, "armor");
+        this.offhand = NonNullListFilter.withSize(1, ItemStack.EMPTY, player, "offhand");
+        // MultiPaper end
         this.compartments = ImmutableList.of(this.items, this.armor, this.offhand);
         this.player = player;
     }
@@ -439,6 +445,8 @@ public class Inventory implements Container, Nameable {
             }
         }
 
+        if (list != null) ((NonNullListFilter<ItemStack>) list).markDirty(slot); // MultiPaper
+
         return list != null && !((ItemStack) list.get(slot)).isEmpty() ? ContainerHelper.removeItem(list, slot, amount) : ItemStack.EMPTY;
     }
 
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 66f808cabcf6a9a6584849b285f1c60133adc7b4..ee33647ae4658e3318db556556e682b84e479fd5 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -148,6 +148,8 @@ public final class ItemStack {
     private AdventureModeCheck adventureBreakCheck;
     @Nullable
     private AdventureModeCheck adventurePlaceCheck;
+    public boolean dirty = true; // MultiPaper
+    static { EMPTY.dirty = false; } // MultiPaper
 
     public Optional<TooltipComponent> getTooltipImage() {
         return this.getItem().getTooltipImage(this);
@@ -260,6 +262,7 @@ public final class ItemStack {
             this.setDamageValue(this.getDamageValue());
         }
 
+        dirty = true; // MultiPaper
     }
 
     private ItemStack(CompoundTag nbt) {
@@ -519,6 +522,8 @@ public final class ItemStack {
 
     public void setDamageValue(int damage) {
         this.getOrCreateTag().putInt("Damage", Math.max(0, damage));
+
+        dirty = true; // MultiPaper
     }
 
     public int getMaxDamage() {
@@ -788,6 +793,8 @@ public final class ItemStack {
             if (this.tag.isEmpty()) {
                 this.tag = null;
             }
+
+            dirty = true; // MultiPaper
         }
 
     }
@@ -826,6 +833,7 @@ public final class ItemStack {
             this.getItem().verifyTagAfterLoad(nbt);
         }
 
+        dirty = true; // MultiPaper
     }
 
     public Component getHoverName() {
@@ -857,6 +865,8 @@ public final class ItemStack {
             nbttagcompound.remove("Name");
         }
 
+        dirty = true; // MultiPaper
+
         return this;
     }
 
@@ -874,6 +884,8 @@ public final class ItemStack {
             this.tag = null;
         }
 
+        dirty = true; // MultiPaper
+
     }
 
     public boolean hasCustomHoverName() {
@@ -1059,6 +1071,8 @@ public final class ItemStack {
         CompoundTag nbttagcompound = this.getOrCreateTag();
 
         nbttagcompound.putInt("HideFlags", nbttagcompound.getInt("HideFlags") | tooltipSection.getMask());
+
+        dirty = true; // MultiPaper
     }
 
     public static void appendEnchantmentNames(List<Component> tooltip, ListTag enchantments) {
@@ -1126,6 +1140,8 @@ public final class ItemStack {
 
         nbttaglist.add(EnchantmentHelper.storeEnchantment(EnchantmentHelper.getEnchantmentId(enchantment), (byte) level));
         processEnchantOrder(this.tag); // Paper
+
+        dirty = true; // MultiPaper
     }
 
     public boolean isEnchanted() {
@@ -1134,6 +1150,8 @@ public final class ItemStack {
 
     public void addTagElement(String key, net.minecraft.nbt.Tag element) {
         this.getOrCreateTag().put(key, element);
+
+        dirty = true; // MultiPaper
     }
 
     public boolean isFramed() {
@@ -1166,6 +1184,8 @@ public final class ItemStack {
         }
         // CraftBukkit end
         this.getOrCreateTag().putInt("RepairCost", repairCost);
+
+        dirty = true; // MultiPaper
     }
 
     public Multimap<Attribute, AttributeModifier> getAttributeModifiers(EquipmentSlot slot) {
@@ -1219,6 +1239,8 @@ public final class ItemStack {
     public void setItem(Item item) {
         this.bukkitStack = null; // Paper
         this.item = item;
+
+        dirty = true; // MultiPaper
     }
     // CraftBukkit end
 
@@ -1271,6 +1293,8 @@ public final class ItemStack {
     public void setCount(int count) {
         this.count = count;
         this.updateEmptyCacheFlag();
+
+        dirty = true; // MultiPaper
     }
 
     public void grow(int amount) {
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index b7f6eafdd78d0170224e65e8084561b4ff4d8ad5..0dc131b3a46c55b9ff3c93791b0d4837798c622f 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -89,4 +89,9 @@ public class ExternalPlayer extends ServerPlayer {
     public boolean broadcastToPlayer(ServerPlayer spectator) {
         return false;
     }
+
+    @Override
+    public void checkInsideBlocks() {
+        super.checkInsideBlocks();
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index da404af219b2c93f3c27a34cee8f53f595a83c3b..7312eeed723bf6647121ec5e15093b1a31d31f35 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -5,6 +5,7 @@ import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
+import net.minecraft.network.protocol.game.ServerboundSetCarriedItemPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
@@ -32,6 +33,7 @@ import puregero.multipaper.externalserverprotocol.*;
 import java.io.*;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
@@ -177,6 +179,14 @@ public class MultiPaper {
                 }
             });
         });
+
+        MultiPaperInventoryHandler.tick();
+
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().players) {
+            if (player instanceof ExternalPlayer externalPlayer) {
+                externalPlayer.checkInsideBlocks();
+            }
+        }
     }
 
     public static void sendTickTime(long time, double tps) {
@@ -435,7 +445,7 @@ public class MultiPaper {
             e.printStackTrace();
         }
     }
-    
+
     public static byte[] nbtToBytes(CompoundTag compoundTag) throws IOException {
         if (compoundTag == null) {
             return new byte[0];
@@ -509,4 +519,8 @@ public class MultiPaper {
             e.printStackTrace();
         };
     }
+
+    public static void broadcastPlayerAction(ServerPlayer player, ServerboundSetCarriedItemPacket packet) {
+        broadcastPacketToExternalServers(new PlayerActionPacket(player, packet));
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaperInventoryHandler.java b/src/main/java/puregero/multipaper/MultiPaperInventoryHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..d8adffcd3ebd0b4c2453ac914a847cef07638776
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperInventoryHandler.java
@@ -0,0 +1,285 @@
+package puregero.multipaper;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.*;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.item.BucketItem;
+import net.minecraft.world.item.EnderEyeItem;
+import net.minecraft.world.item.FishingRodItem;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.chunk.LevelChunk;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.externalserverprotocol.PlayerActionPacket;
+import puregero.multipaper.externalserverprotocol.PlayerInventoryUpdatePacket;
+
+import java.util.*;
+
+public class MultiPaperInventoryHandler {
+
+    private static final Logger LOGGER = LogManager.getLogger(MultiPaperInventoryHandler.class.getSimpleName());
+
+    private static boolean updatingInventory = false;
+    private static final HashMap<UUID, ArrayList<AwaitingTeleport>> awaitingTeleports = new HashMap<>();
+
+    public static boolean handlePacketFromExternalServer(ExternalServer server, ServerPlayer player, Packet<?> packet) {
+        if (packet instanceof ClientboundOpenScreenPacket) {
+            // An external server has requested to open a window on a player
+            player.openContainer = server;
+        } else if (packet instanceof ClientboundContainerClosePacket) {
+            // An external server has requested to close the open window on a player
+            if (player.openContainer == server) {
+                player.openContainer = null;
+            }
+        } else if (packet instanceof ClientboundSetCarriedItemPacket setCarriedItemPacket) {
+            // An external server is changing the selected item in the hotbar
+            player.getInventory().selected = setCarriedItemPacket.getSlot();
+        } else if (packet instanceof ClientboundSetExperiencePacket setExperiencePacket) {
+            // An external server is changing the player's experience level
+            player.experienceLevel = setExperiencePacket.getExperienceLevel();
+            player.experienceProgress = setExperiencePacket.getExperienceProgress();
+            player.totalExperience = setExperiencePacket.getTotalExperience();
+        } else if (packet instanceof ClientboundPlayerPositionPacket playerPositionPacket) {
+            // An external server is teleporting the player
+            double x = playerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.X) ? player.getX() : 0.0D;
+            double y = playerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Y) ? player.getY() : 0.0D;
+            double z = playerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Z) ? player.getZ() : 0.0D;
+            float yaw = playerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Y_ROT) ? player.getYRot() : 0.0F;
+            float pitch = playerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.X_ROT) ? player.getXRot() : 0.0F;
+            player.connection.teleport(x + playerPositionPacket.getX(), y + playerPositionPacket.getY(), z + playerPositionPacket.getZ(), yaw + playerPositionPacket.getYRot(), pitch + playerPositionPacket.getXRot(), playerPositionPacket.getRelativeArguments());
+            server.getConnection().send(new PlayerActionPacket(player, new ServerboundAcceptTeleportationPacket(playerPositionPacket.getId())));
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * Returns true if the even should be cancelled
+     */
+    public static boolean handleInteractEvent(ServerPlayer player, ServerboundUseItemOnPacket packet) {
+        LevelChunk chunk = player.level.getChunkIfLoaded(packet.getHitResult().getBlockPos());
+        ItemStack item = player.getItemInHand(packet.getHand());
+        if (MultiPaper.isChunkExternal(chunk) && !(item.getItem() instanceof BucketItem)) {
+            chunk.externalOwner.getConnection().send(new PlayerActionPacket(player, packet));
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * Returns true if the even should be cancelled
+     */
+    public static boolean handleUseItemEvent(ServerPlayer player, ServerboundUseItemPacket packet) {
+        LevelChunk chunk = player.level.getChunkIfLoaded(player.blockPosition());
+        ItemStack item = player.getItemInHand(packet.getHand());
+        if (MultiPaper.isChunkExternal(chunk) && item.getItem() instanceof EnderEyeItem) {
+            chunk.externalOwner.getConnection().send(new PlayerActionPacket(player, packet));
+            return true;
+        } else if (MultiPaper.isRealPlayer(player) && item.getItem() instanceof FishingRodItem) {
+            MultiPaper.broadcastPacketToExternalServers(chunk.externalSubscribers, () -> new PlayerActionPacket(player, packet));
+        }
+
+        return false;
+    }
+
+    /**
+     * Returns true if the even should be cancelled
+     */
+    public static boolean handleContainerEvent(ServerPlayer player, Packet<ServerGamePacketListener> containerPacket) {
+        if (player.openContainer != null) {
+            player.openContainer.getConnection().send(new PlayerActionPacket(player, containerPacket));
+
+            if (containerPacket instanceof ServerboundContainerClosePacket) {
+                player.openContainer = null;
+            }
+
+            return true;
+        }
+
+        return false;
+    }
+
+    public static void updateInventory(ServerPlayer player, String name, int slot, ItemStack replacingItem, ItemStack item) {
+        updatingInventory = true; // Don't let these changes mark the inventories as dirty
+        NonNullListFilter<ItemStack> component = null;
+        switch (name) {
+            case "items" -> component = player.getInventory().items;
+            case "armor" -> component = player.getInventory().armor;
+            case "offhand" -> component = player.getInventory().offhand;
+            default -> throw new IllegalArgumentException("Unknown inventory component of " + name);
+        }
+
+        item.dirty = false;
+
+        if (component != null) {
+            ItemStack lastItem = component.lastItems.get(slot);
+            ItemStack currentItem = component.get(slot);
+
+            if (!ItemStack.matches(lastItem, currentItem) && !MultiPaper.isRealPlayer(player)) {
+                // Our changes haven't been sent yet, send them
+                broadcastComponentChanges(player, component);
+            }
+
+            if (MultiPaper.isRealPlayer(player) && replacingItem != null && !ItemStack.matches(replacingItem, currentItem)) {
+                // The expected item doesn't match, a merge is required
+                item.dirty = true; // Resend the item afterwards to sync the other servers
+                if (isSameItemSameTagIgnoringDurability(replacingItem, item)) {
+                    if (replacingItem.getCount() != item.getCount()) {
+                        int countDiff = item.getCount() - replacingItem.getCount();
+                        if (countDiff > 0) {
+                            item.setCount(countDiff);
+                            addItem(item, player);
+                        } else {
+                            LOGGER.warn(player.getScoreboard() + ": An external server tried to remove " + countDiff + " items from " + replacingItem + ", but that item is now a " + currentItem);
+                        }
+                    } else if (replacingItem.getDamageValue() != item.getDamageValue()) {
+                        int damageDiff = item.getDamageValue() - replacingItem.getDamageValue();
+                        if (isSameItemSameTagIgnoringDurability(currentItem, item)) {
+                            currentItem.setDamageValue(currentItem.getDamageValue() + damageDiff);
+                        }
+                    } else {
+                        LOGGER.warn(player.getScoreboard() + ": Trying to merge the same item same tags, but neither the count nor the durability is different. " + item + " and " + replacingItem);
+                    }
+                } else {
+                    addItem(item, player);
+                }
+            } else {
+                component.set(slot, item);
+                component.lastItems.set(slot, item.copy()); // We don't need to do this if it's out player
+            }
+        }
+
+        updatingInventory = false;
+    }
+
+    private static void addItem(ItemStack itemStack, ServerPlayer player) {
+        if (player.isDeadOrDying() || !player.getInventory().add(itemStack)) {
+            player.drop(itemStack, false);
+        }
+    }
+
+    private static boolean isSameItemSameTagIgnoringDurability(ItemStack left, ItemStack right) {
+        int leftDurability = left.getDamageValue();
+        int rightDurability = right.getDamageValue();
+
+        if (left.getTag() != null) left.getTag().remove("Damage");
+        if (right.getTag() != null) right.getTag().remove("Damage");
+
+        boolean result = left.is(right.getItem()) && ItemStack.tagMatches(left, right);
+
+        if (leftDurability > 0) left.getTag().putInt("Damage", leftDurability);
+        if (rightDurability > 0) right.getTag().putInt("Damage", rightDurability);
+
+        return result;
+    }
+
+    /**
+     * Returns true if the changes to the inventory component should be marked as dirty.
+     */
+    public static <E extends ItemStack> boolean markDirty(NonNullListFilter<E> inventoryComponent) {
+        return !updatingInventory;
+    }
+
+    /**
+     * Runs at the end of a vanilla tick. Ie any changes to the inventory made in the tick will instantly be updated
+     * to other servers without a tick delay.
+     */
+    public static void tick() {
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().players) {
+            for (NonNullListFilter<? extends ItemStack> inventoryComponent : new NonNullListFilter[] {
+                    player.getInventory().items,
+                    player.getInventory().armor,
+                    player.getInventory().offhand,
+            }) {
+                broadcastComponentChanges(player, inventoryComponent);
+            }
+        }
+    }
+
+    public static void broadcastComponentChanges(ServerPlayer player, NonNullListFilter<? extends ItemStack> inventoryComponent) {
+        if (!((ServerPlayer) inventoryComponent.player).didPlayerJoinEvent) {
+            // Don't update the inventory until they fully join
+            return;
+        }
+
+        ListTag items = new ListTag();
+        for (int i = 0; i < inventoryComponent.size(); i++) {
+            if (inventoryComponent.dirty[i] || inventoryComponent.get(i).dirty) {
+                CompoundTag item = new CompoundTag();
+                item.putInt("Slot", i);
+                inventoryComponent.get(i).save(item);
+                items.add(item);
+
+                if (!MultiPaper.isRealPlayer(player)) {
+                    CompoundTag replacingItem = new CompoundTag();
+                    inventoryComponent.lastItems.get(i).save(replacingItem);
+                    item.put("Replacing", replacingItem);
+                }
+
+                inventoryComponent.dirty[i] = false;
+                inventoryComponent.get(i).dirty = false;
+                inventoryComponent.lastItems.set(i, inventoryComponent.get(i).copy());
+            }
+        }
+
+        if (!items.isEmpty()) {
+            CompoundTag itemsRoot = new CompoundTag();
+            itemsRoot.put("items", items);
+            MultiPaper.broadcastPacketToExternalServers(player, new PlayerInventoryUpdatePacket(player, inventoryComponent.name, itemsRoot));
+        }
+    }
+
+    public static void sendFullInventoryUpdate(ExternalServerConnection connection, ServerPlayer player) {
+        for (NonNullListFilter<? extends ItemStack> inventoryComponent : new NonNullListFilter[] {
+                player.getInventory().items,
+                player.getInventory().armor,
+                player.getInventory().offhand,
+        }) {
+            ListTag items = new ListTag();
+            for (int i = 0; i < inventoryComponent.size(); i++) {
+                CompoundTag item = new CompoundTag();
+                item.putInt("Slot", i);
+                inventoryComponent.get(i).save(item);
+                items.add(item);
+            }
+
+            CompoundTag itemsRoot = new CompoundTag();
+            itemsRoot.put("items", items);
+            connection.send(new PlayerInventoryUpdatePacket((ServerPlayer) inventoryComponent.player, inventoryComponent.name, itemsRoot));
+        }
+    }
+
+    public static void handleAcceptTeleport(ServerPlayer player, ServerboundAcceptTeleportationPacket packet) {
+        ArrayList<AwaitingTeleport> accepts = awaitingTeleports.get(player.getUUID());
+
+        if (accepts != null) {
+            accepts.removeIf(accept -> {
+               if (accept.id == packet.getId()) {
+                   accept.externalServer.getConnection().send(new PlayerActionPacket(player, packet));
+                   return true;
+               } else {
+                   return false;
+               }
+            });
+
+            if (accepts.isEmpty()) {
+                awaitingTeleports.remove(player.getUUID());
+            }
+        }
+    }
+
+    private static class AwaitingTeleport {
+        private final ExternalServer externalServer;
+        private final int id;
+
+        private AwaitingTeleport(ExternalServer externalServer, int id) {
+            this.externalServer = externalServer;
+            this.id = id;
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/NonNullListFilter.java b/src/main/java/puregero/multipaper/NonNullListFilter.java
new file mode 100644
index 0000000000000000000000000000000000000000..f55917e9ab8be2828d803eb79eafa55d48ca31dd
--- /dev/null
+++ b/src/main/java/puregero/multipaper/NonNullListFilter.java
@@ -0,0 +1,64 @@
+package puregero.multipaper;
+
+import net.minecraft.core.NonNullList;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import org.apache.commons.lang3.Validate;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class NonNullListFilter<E extends ItemStack> extends NonNullList<E> {
+    public NonNullList<ItemStack> lastItems;
+    public final boolean[] dirty;
+    public final Player player;
+    public final String name;
+
+    protected NonNullListFilter(List<E> delegate, @Nullable E initialElement, Player player, String name) {
+        super(delegate, initialElement);
+        this.lastItems = NonNullList.withSize(delegate.size(), initialElement);
+        this.dirty = new boolean[delegate.size()];
+        this.player = player;
+        this.name = name;
+    }
+
+    public static <E extends ItemStack> NonNullListFilter<E> withSize(int size, E defaultValue, Player player, String name) {
+        Validate.notNull(defaultValue);
+        ItemStack[] objects = new ItemStack[size];
+        Arrays.fill(objects, defaultValue);
+        return new NonNullListFilter<E>(Arrays.asList((E[])objects), defaultValue, player, name);
+    }
+
+    public boolean markDirty(int i) {
+        if (MultiPaperInventoryHandler.markDirty(this)) {
+            dirty[i] = true;
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public E set(int i, E object) {
+        markDirty(i);
+        return super.set(i, object);
+    }
+
+    @Override
+    public void add(int i, E object) {
+        throw new UnsupportedOperationException("Assumption - you can't add to a fixed sized list");
+    }
+
+    @Override
+    public E remove(int i) {
+        throw new UnsupportedOperationException("Assumption - you can't remove from a fixed sized list");
+    }
+
+    @Override
+    public void clear() {
+        if (markDirty(0)) {
+            Arrays.fill(dirty, true);
+        }
+        super.clear();
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 6d53a1c5fb71ba4b8629e4c3b2d06ea999dccea0..1b58d7b815e9294c5bce5de02e4c8a1b3952fbfe 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -22,6 +22,8 @@ public class ExternalServerPacketSerializer {
         addPacket(RequestChunkPacket.class, RequestChunkPacket::new);
         addPacket(SendChunkPacket.class, SendChunkPacket::new);
         addPacket(SendTickListPacket.class, SendTickListPacket::new);
+        addPacket(PlayerActionPacket.class, PlayerActionPacket::new);
+        addPacket(PlayerInventoryUpdatePacket.class, PlayerInventoryUpdatePacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, IOExceptionFunction<FriendlyDataInputStream, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..286f2f964822059d7bb58c6b7d8f6b6e1853b956
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionPacket.java
@@ -0,0 +1,72 @@
+package puregero.multipaper.externalserverprotocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.ConnectionProtocol;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ServerGamePacketListener;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerActionPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerActionPacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final Packet<ServerGamePacketListener> action;
+
+    public PlayerActionPacket(ServerPlayer player, Packet<ServerGamePacketListener> action) {
+        this.uuid = player.getUUID();
+        this.action = action;
+    }
+
+    public PlayerActionPacket(FriendlyDataInputStream in) throws IOException {
+        uuid = readUUID(in);
+
+        int length = in.readInt();
+        byte[] bytes = new byte[length];
+        in.readFully(bytes);
+        ByteBuf buf = Unpooled.wrappedBuffer(bytes);
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        int packetId = friendlyByteBuf.readVarInt();
+        action = (Packet<ServerGamePacketListener>) ConnectionProtocol.PLAY.createPacket(PacketFlow.SERVERBOUND, packetId, friendlyByteBuf);
+    }
+
+    @Override
+    public void write(FriendlyDataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+
+        ConnectionProtocol protocol = ConnectionProtocol.getProtocolForPacket(action);
+        Integer id = protocol.getPacketId(PacketFlow.SERVERBOUND, action);
+        ByteBuf buf = Unpooled.buffer();
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        friendlyByteBuf.writeVarInt(id);
+        action.write(friendlyByteBuf);
+        byte[] bytes = buf.array();
+        out.writeInt(bytes.length);
+        out.write(bytes);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+        if (player == null) {
+            LOGGER.warn("Tried to run an action on a non-existent player with uuid " + uuid);
+            return;
+        }
+
+        player.server.execute(() -> action.handle(player.connection));
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
index d6f187e142ba4c5bcf66aba896693d03ad616cb1..0dc31a246d126afa5f81cc1de12f86b1d80a9a18 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -1,5 +1,7 @@
 package puregero.multipaper.externalserverprotocol;
 
+import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
+import net.minecraft.network.protocol.game.ServerboundSetCarriedItemPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.level.GameType;
@@ -8,6 +10,7 @@ import org.apache.logging.log4j.Logger;
 import puregero.multipaper.ExternalPlayer;
 import puregero.multipaper.ExternalServerConnection;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperInventoryHandler;
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -101,5 +104,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
 
     public static void sendPlayer(ExternalServerConnection connection, ServerPlayer player) {
         connection.send(new PlayerCreatePacket(player));
+        connection.send(new PlayerActionPacket(player, new ServerboundSetCarriedItemPacket(player.getInventory().selected)));
+
+        MultiPaperInventoryHandler.sendFullInventoryUpdate(connection, player);
     }
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerInventoryUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerInventoryUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..d8d3662ea53a4fd9fd7107af0bd9b23114cbd1a5
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerInventoryUpdatePacket.java
@@ -0,0 +1,76 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.item.ItemStack;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperInventoryHandler;
+
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerInventoryUpdatePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerInventoryUpdatePacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final String component;
+    private final CompoundTag tag;
+
+    public PlayerInventoryUpdatePacket(ServerPlayer player, String component, CompoundTag tag) {
+        this.uuid = player.getUUID();
+        this.component = component;
+        this.tag = tag;
+    }
+
+    public PlayerInventoryUpdatePacket(FriendlyDataInputStream in) throws IOException {
+        uuid = readUUID(in);
+        component = in.readUTF();
+
+        int length = in.readInt();
+        byte[] bytes = new byte[length];
+        in.readFully(bytes);
+        tag = MultiPaper.nbtFromBytes(bytes);
+    }
+
+    @Override
+    public void write(FriendlyDataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+
+        out.writeUTF(component);
+        byte[] bytes = MultiPaper.nbtToBytes(tag);
+        out.writeInt(bytes.length);
+        out.write(bytes);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn("Tried to update the inventory of a non-existant player uuid " + uuid);
+                return;
+            }
+
+            ListTag items = tag.getList("items", Tag.TAG_COMPOUND);
+            items.forEach(i -> {
+                CompoundTag item = (CompoundTag) i;
+                ItemStack itemStack = ItemStack.of(item);
+
+                ItemStack replacingItem = null;
+                if (item.contains("Replacing")) {
+                    replacingItem = ItemStack.of(item.getCompound("Replacing"));
+                }
+
+                MultiPaperInventoryHandler.updateInventory(player, component, item.getInt("Slot"), replacingItem, itemStack);
+            });
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
index af285389a119f3661e607f1bdef0934cda970408..19913fcd26548d00eb4747b539d72e4c0b945f54 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
@@ -6,12 +6,14 @@ import net.minecraft.network.ConnectionProtocol;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import puregero.multipaper.ExternalServerConnection;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperInventoryHandler;
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -75,7 +77,11 @@ public class SendPacketPacket extends ExternalServerPacket {
 
     @Override
     public void handle(ExternalServerConnection connection) {
-        doHandle(connection);
+        if (packet instanceof ClientboundPlayerPositionPacket) {
+            MultiPaper.runSync(() -> doHandle(connection));
+        } else {
+            doHandle(connection);
+        }
     }
 
     public void doHandle(ExternalServerConnection connection) {
@@ -87,6 +93,10 @@ public class SendPacketPacket extends ExternalServerPacket {
                 return;
             }
 
+            if (MultiPaperInventoryHandler.handlePacketFromExternalServer(connection.externalServer, player, packet)) {
+                return;
+            }
+
             player.connection.send(packet);
         }
     }
