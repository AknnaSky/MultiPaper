From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 5 Feb 2022 22:11:44 +1000
Subject: [PATCH] Take control of external chunks when extending pistons across
 server borders


diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index 309350d805e690341bd9b6f30474e24b63bcbb0d..7670ef054e415853473cae7711d0f41a4eeca95e 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -16,6 +16,7 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
@@ -40,6 +41,10 @@ import com.google.common.collect.ImmutableList;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.event.block.BlockPistonRetractEvent;
 import org.bukkit.event.block.BlockPistonExtendEvent;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.mastermessagingprotocol.ChunkKey;
+import puregero.multipaper.mastermessagingprotocol.messages.masterbound.RequestChunkOwnershipMessage;
+import puregero.multipaper.mastermessagingprotocol.messages.serverbound.BooleanMessageReply;
 // CraftBukkit end
 
 public class PistonBaseBlock extends DirectionalBlock {
@@ -420,6 +425,9 @@ public class PistonBaseBlock extends DirectionalBlock {
                 aiblockdata[j++] = iblockdata1;
             }
 
+            HashSet<ChunkPos> takeControlOfChunks = new HashSet<>(); // MultiPaper
+            takeControlOfChunks.add(new ChunkPos(pos)); // MultiPaper
+
             for (k = list.size() - 1; k >= 0; --k) {
                 // Paper start - fix a variety of piston desync dupes
                 boolean allowDesync = com.destroystokyo.paper.PaperConfig.allowPistonDuplication;
@@ -430,6 +438,8 @@ public class PistonBaseBlock extends DirectionalBlock {
                 map.remove(blockposition3);
                 BlockState iblockdata2 = (BlockState) Blocks.MOVING_PISTON.defaultBlockState().setValue(PistonBaseBlock.FACING, dir);
 
+                takeControlOfChunks.add(new ChunkPos(blockposition3)); // MultiPaper
+
                 world.setBlock(blockposition3, iblockdata2, 68);
                 // Paper start - fix a variety of piston desync dupes
                 if (!allowDesync) {
@@ -446,6 +456,7 @@ public class PistonBaseBlock extends DirectionalBlock {
             }
 
             if (retract) {
+                takeControlOfChunks.add(new ChunkPos(blockposition1)); // MultiPaper
                 PistonType blockpropertypistontype = this.isSticky ? PistonType.STICKY : PistonType.DEFAULT;
                 BlockState iblockdata3 = (BlockState) ((BlockState) Blocks.PISTON_HEAD.defaultBlockState().setValue(PistonHeadBlock.FACING, dir)).setValue(PistonHeadBlock.TYPE, blockpropertypistontype);
 
@@ -456,6 +467,8 @@ public class PistonBaseBlock extends DirectionalBlock {
                 ((ServerLevel) world).getChunkSource().blockChanged(blockposition1); // MultiPaper
             }
 
+            takeControlOfChunks((ServerLevel) world, takeControlOfChunks); // MultiPaper
+
             BlockState iblockdata4 = Blocks.AIR.defaultBlockState();
             Iterator iterator = map.keySet().iterator();
 
@@ -503,6 +516,21 @@ public class PistonBaseBlock extends DirectionalBlock {
         }
     }
 
+    // MultiPaper start
+    private void takeControlOfChunks(ServerLevel level, HashSet<ChunkPos> takeControlOfChunks) {
+        if (takeControlOfChunks.stream().anyMatch(pos -> MultiPaper.isChunkExternal(level.getChunkIfLoaded(pos.x, pos.z)))
+                && takeControlOfChunks.stream().allMatch(pos -> level.getChunkIfLoaded(pos.x, pos.z).hasExternalLockRequest)) {
+            MultiPaper.getConnection().sendAndAwaitReply(
+                    new RequestChunkOwnershipMessage(
+                            level.getWorld().getName(),
+                            takeControlOfChunks.stream().map(pos -> new ChunkKey(level.getWorld().getName(), pos.x, pos.z)).toArray(ChunkKey[]::new)
+                    ),
+                    BooleanMessageReply.class
+            );
+        }
+    }
+    // MultiPaper end
+
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
         return (BlockState) state.setValue(PistonBaseBlock.FACING, rotation.rotate((Direction) state.getValue(PistonBaseBlock.FACING)));
