From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Tue, 22 Jun 2021 00:01:38 +1000
Subject: [PATCH] Look ahead and start loading chunk neighbours before
 requested


diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 01ae5bd905de2d2508cdacfdbcc186e2daebf62e..f1ba403f897d7cff56b37dd3b46f026b551ce9ec 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -29,11 +29,9 @@ import org.bukkit.entity.Player;
 
 import java.io.*;
 import java.nio.file.Files;
-import java.util.ConcurrentModificationException;
-import java.util.UUID;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
+import java.util.*;
+import java.util.concurrent.*;
+import java.util.zip.InflaterInputStream;
 
 public class MultiPaper {
 
@@ -103,14 +101,39 @@ public class MultiPaper {
         writeRegionFileNBT(serverLevel, "region", chunkPos, compoundTag);
     }
 
-    public static DataInput readRegionFile(String world, String path, int cx, int cz) throws IOException {
+    private static final ConcurrentHashMap<String, CompletableFuture<byte[]>> regionFileLookAhead = new ConcurrentHashMap<>();
+    private static final List<String> lookAheadPaths = Arrays.asList("region", "poi", "entities");
+    private static long lastRegionFileLookAheadClear = 0;
+    public static DataInput readRegionFile(String world, String path, int cx, int cz) throws IOException {      
         if (DedicatedServer.getServer().hasStopped()) {
             LOGGER.info("Attempted to readRegionFile " + world + "," + path + "," + cx + "," + cz + ", but server has stopped, aborting operation.");
             return null;
         }
         while (true) {
             try {
-                return getConnection().readChunk(world, path, cx, cz).get(15, TimeUnit.SECONDS);
+                CompletableFuture<byte[]> future;
+                if (!lookAheadPaths.contains(path)) {
+                    // Don't look ahead
+                    future = getConnection().readChunk(world, path, cx, cz);
+                } else {
+                    // Look ahead
+                    if (lastRegionFileLookAheadClear < System.currentTimeMillis() - 15 * 1000) {
+                        regionFileLookAhead.clear();
+                        lastRegionFileLookAheadClear = System.currentTimeMillis();
+                    }
+
+                    future = lookAhead(world, path, cx, cz);
+                    for (int x = -1; x <= 1; x++) {
+                        for (int z = -1; z <= 1; z++) {
+                            int fx = x;
+                            int fz = z;
+                            CompletableFuture.supplyAsync(() -> lookAhead(world, path, cx + fx, cz + fz));
+                        }
+                    }
+                }
+                
+                byte[] data = future.get(15, TimeUnit.SECONDS);
+                return data == null || data.length == 0 ? null : new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(data)));
             } catch (InterruptedException | ExecutionException e) {
                 throw new IOException(e);
             } catch (TimeoutException e) {
@@ -123,7 +146,16 @@ public class MultiPaper {
         }
     }
 
+    private static CompletableFuture<byte[]> lookAhead(String world, String path, int cx, int cz) {
+        return regionFileLookAhead.computeIfAbsent(key(world, path, cx, cz), key -> getConnection().readChunk(world, path, cx, cz));
+    }
+
+    private static String key(String world, String path, int cx, int cz) {
+        return world + "." + path + "." + cx + "." + cz;
+    }
+
     public static void writeRegionFile(String world, String path, int cx, int cz, byte[] bytes) throws IOException {
+        regionFileLookAhead.remove(key(world, path, cx, cz));
         getConnection().writeChunk(world, path, cx, cz, bytes);
     }
 
@@ -226,6 +258,7 @@ public class MultiPaper {
 
     public static void notifyChunkNotSaving(ChunkPos chunkPos, ServerLevel serverLevel) {
         try {
+            lookAheadPaths.forEach(path -> regionFileLookAhead.remove(key(serverLevel.convertable.getLevelId(), path, chunkPos.x, chunkPos.z)));
             getConnection().notifyChunkNotSaving(serverLevel.convertable.getLevelId(), chunkPos.x, chunkPos.z);
         } catch (IOException e) {
             e.printStackTrace();
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index 9bd199b767d7677990e97c3a9c9da5a9a37b7cc1..33f4b1a97b030f7fa4e313864163b89429da4d3e 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -362,27 +362,31 @@ public class MultiPaperConnection extends Thread {
         }
     }
 
-    public CompletableFuture<DataInputStream> readChunk(String world, String path, int cx, int cz) throws IOException {
-        CompletableFuture<DataInputStream> future = new CompletableFuture<>();
+    public CompletableFuture<byte[]> readChunk(String world, String path, int cx, int cz) {
+        CompletableFuture<byte[]> future = new CompletableFuture<>();
 
         Consumer<DataInputStream> callback = in -> {
             try {
                 byte[] data = new byte[in.readInt()];
                 in.readFully(data);
 
-                future.complete(data.length == 0 ? null : new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(data))));
+                future.complete(data);
             } catch (IOException e) {
                 e.printStackTrace();
             }
         };
-
-        DataOutputSender out = new DataOutputSender(this);
-        out.writeUTF("readChunk");
-        out.writeUTF(world);
-        out.writeUTF(path);
-        out.writeInt(cx);
-        out.writeInt(cz);
-        out.send(callback);
+        
+        try {
+            DataOutputSender out = new DataOutputSender(this);
+            out.writeUTF("readChunk");
+            out.writeUTF(world);
+            out.writeUTF(path);
+            out.writeInt(cx);
+            out.writeInt(cz);
+            out.send(callback);
+        } catch (IOException e) {
+            return CompletableFuture.failedFuture(e);
+        }
 
         return future;
     }
